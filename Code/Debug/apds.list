
apds.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003520  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  080035e0  080035e0  000135e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003710  08003710  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003710  08003710  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003710  08003710  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003710  08003710  00013710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003714  08003714  00013714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003718  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  20000010  08003724  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08003724  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000565e  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001610  00000000  00000000  00025692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004f0  00000000  00000000  00026ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000418  00000000  00000000  00027198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ecfc  00000000  00000000  000275b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000773a  00000000  00000000  000362ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000565c1  00000000  00000000  0003d9e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00093fa7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001070  00000000  00000000  00093ffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080035c8 	.word	0x080035c8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	080035c8 	.word	0x080035c8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_fdiv>:
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	464f      	mov	r7, r9
 8000224:	4646      	mov	r6, r8
 8000226:	46d6      	mov	lr, sl
 8000228:	0245      	lsls	r5, r0, #9
 800022a:	b5c0      	push	{r6, r7, lr}
 800022c:	0047      	lsls	r7, r0, #1
 800022e:	1c0c      	adds	r4, r1, #0
 8000230:	0a6d      	lsrs	r5, r5, #9
 8000232:	0e3f      	lsrs	r7, r7, #24
 8000234:	0fc6      	lsrs	r6, r0, #31
 8000236:	2f00      	cmp	r7, #0
 8000238:	d066      	beq.n	8000308 <__aeabi_fdiv+0xe8>
 800023a:	2fff      	cmp	r7, #255	; 0xff
 800023c:	d06c      	beq.n	8000318 <__aeabi_fdiv+0xf8>
 800023e:	2300      	movs	r3, #0
 8000240:	00ea      	lsls	r2, r5, #3
 8000242:	2580      	movs	r5, #128	; 0x80
 8000244:	4699      	mov	r9, r3
 8000246:	469a      	mov	sl, r3
 8000248:	04ed      	lsls	r5, r5, #19
 800024a:	4315      	orrs	r5, r2
 800024c:	3f7f      	subs	r7, #127	; 0x7f
 800024e:	0260      	lsls	r0, r4, #9
 8000250:	0061      	lsls	r1, r4, #1
 8000252:	0a43      	lsrs	r3, r0, #9
 8000254:	4698      	mov	r8, r3
 8000256:	0e09      	lsrs	r1, r1, #24
 8000258:	0fe4      	lsrs	r4, r4, #31
 800025a:	2900      	cmp	r1, #0
 800025c:	d048      	beq.n	80002f0 <__aeabi_fdiv+0xd0>
 800025e:	29ff      	cmp	r1, #255	; 0xff
 8000260:	d010      	beq.n	8000284 <__aeabi_fdiv+0x64>
 8000262:	2280      	movs	r2, #128	; 0x80
 8000264:	00d8      	lsls	r0, r3, #3
 8000266:	04d2      	lsls	r2, r2, #19
 8000268:	4302      	orrs	r2, r0
 800026a:	4690      	mov	r8, r2
 800026c:	2000      	movs	r0, #0
 800026e:	397f      	subs	r1, #127	; 0x7f
 8000270:	464a      	mov	r2, r9
 8000272:	0033      	movs	r3, r6
 8000274:	1a7f      	subs	r7, r7, r1
 8000276:	4302      	orrs	r2, r0
 8000278:	496c      	ldr	r1, [pc, #432]	; (800042c <__aeabi_fdiv+0x20c>)
 800027a:	0092      	lsls	r2, r2, #2
 800027c:	588a      	ldr	r2, [r1, r2]
 800027e:	4063      	eors	r3, r4
 8000280:	b2db      	uxtb	r3, r3
 8000282:	4697      	mov	pc, r2
 8000284:	2b00      	cmp	r3, #0
 8000286:	d16d      	bne.n	8000364 <__aeabi_fdiv+0x144>
 8000288:	2002      	movs	r0, #2
 800028a:	3fff      	subs	r7, #255	; 0xff
 800028c:	e033      	b.n	80002f6 <__aeabi_fdiv+0xd6>
 800028e:	2300      	movs	r3, #0
 8000290:	4698      	mov	r8, r3
 8000292:	0026      	movs	r6, r4
 8000294:	4645      	mov	r5, r8
 8000296:	4682      	mov	sl, r0
 8000298:	4653      	mov	r3, sl
 800029a:	2b02      	cmp	r3, #2
 800029c:	d100      	bne.n	80002a0 <__aeabi_fdiv+0x80>
 800029e:	e07f      	b.n	80003a0 <__aeabi_fdiv+0x180>
 80002a0:	2b03      	cmp	r3, #3
 80002a2:	d100      	bne.n	80002a6 <__aeabi_fdiv+0x86>
 80002a4:	e094      	b.n	80003d0 <__aeabi_fdiv+0x1b0>
 80002a6:	2b01      	cmp	r3, #1
 80002a8:	d017      	beq.n	80002da <__aeabi_fdiv+0xba>
 80002aa:	0038      	movs	r0, r7
 80002ac:	307f      	adds	r0, #127	; 0x7f
 80002ae:	2800      	cmp	r0, #0
 80002b0:	dd5f      	ble.n	8000372 <__aeabi_fdiv+0x152>
 80002b2:	076b      	lsls	r3, r5, #29
 80002b4:	d004      	beq.n	80002c0 <__aeabi_fdiv+0xa0>
 80002b6:	230f      	movs	r3, #15
 80002b8:	402b      	ands	r3, r5
 80002ba:	2b04      	cmp	r3, #4
 80002bc:	d000      	beq.n	80002c0 <__aeabi_fdiv+0xa0>
 80002be:	3504      	adds	r5, #4
 80002c0:	012b      	lsls	r3, r5, #4
 80002c2:	d503      	bpl.n	80002cc <__aeabi_fdiv+0xac>
 80002c4:	0038      	movs	r0, r7
 80002c6:	4b5a      	ldr	r3, [pc, #360]	; (8000430 <__aeabi_fdiv+0x210>)
 80002c8:	3080      	adds	r0, #128	; 0x80
 80002ca:	401d      	ands	r5, r3
 80002cc:	28fe      	cmp	r0, #254	; 0xfe
 80002ce:	dc67      	bgt.n	80003a0 <__aeabi_fdiv+0x180>
 80002d0:	01ad      	lsls	r5, r5, #6
 80002d2:	0a6d      	lsrs	r5, r5, #9
 80002d4:	b2c0      	uxtb	r0, r0
 80002d6:	e002      	b.n	80002de <__aeabi_fdiv+0xbe>
 80002d8:	001e      	movs	r6, r3
 80002da:	2000      	movs	r0, #0
 80002dc:	2500      	movs	r5, #0
 80002de:	05c0      	lsls	r0, r0, #23
 80002e0:	4328      	orrs	r0, r5
 80002e2:	07f6      	lsls	r6, r6, #31
 80002e4:	4330      	orrs	r0, r6
 80002e6:	bce0      	pop	{r5, r6, r7}
 80002e8:	46ba      	mov	sl, r7
 80002ea:	46b1      	mov	r9, r6
 80002ec:	46a8      	mov	r8, r5
 80002ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d12b      	bne.n	800034c <__aeabi_fdiv+0x12c>
 80002f4:	2001      	movs	r0, #1
 80002f6:	464a      	mov	r2, r9
 80002f8:	0033      	movs	r3, r6
 80002fa:	494e      	ldr	r1, [pc, #312]	; (8000434 <__aeabi_fdiv+0x214>)
 80002fc:	4302      	orrs	r2, r0
 80002fe:	0092      	lsls	r2, r2, #2
 8000300:	588a      	ldr	r2, [r1, r2]
 8000302:	4063      	eors	r3, r4
 8000304:	b2db      	uxtb	r3, r3
 8000306:	4697      	mov	pc, r2
 8000308:	2d00      	cmp	r5, #0
 800030a:	d113      	bne.n	8000334 <__aeabi_fdiv+0x114>
 800030c:	2304      	movs	r3, #4
 800030e:	4699      	mov	r9, r3
 8000310:	3b03      	subs	r3, #3
 8000312:	2700      	movs	r7, #0
 8000314:	469a      	mov	sl, r3
 8000316:	e79a      	b.n	800024e <__aeabi_fdiv+0x2e>
 8000318:	2d00      	cmp	r5, #0
 800031a:	d105      	bne.n	8000328 <__aeabi_fdiv+0x108>
 800031c:	2308      	movs	r3, #8
 800031e:	4699      	mov	r9, r3
 8000320:	3b06      	subs	r3, #6
 8000322:	27ff      	movs	r7, #255	; 0xff
 8000324:	469a      	mov	sl, r3
 8000326:	e792      	b.n	800024e <__aeabi_fdiv+0x2e>
 8000328:	230c      	movs	r3, #12
 800032a:	4699      	mov	r9, r3
 800032c:	3b09      	subs	r3, #9
 800032e:	27ff      	movs	r7, #255	; 0xff
 8000330:	469a      	mov	sl, r3
 8000332:	e78c      	b.n	800024e <__aeabi_fdiv+0x2e>
 8000334:	0028      	movs	r0, r5
 8000336:	f001 fa19 	bl	800176c <__clzsi2>
 800033a:	2776      	movs	r7, #118	; 0x76
 800033c:	1f43      	subs	r3, r0, #5
 800033e:	409d      	lsls	r5, r3
 8000340:	2300      	movs	r3, #0
 8000342:	427f      	negs	r7, r7
 8000344:	4699      	mov	r9, r3
 8000346:	469a      	mov	sl, r3
 8000348:	1a3f      	subs	r7, r7, r0
 800034a:	e780      	b.n	800024e <__aeabi_fdiv+0x2e>
 800034c:	0018      	movs	r0, r3
 800034e:	f001 fa0d 	bl	800176c <__clzsi2>
 8000352:	4642      	mov	r2, r8
 8000354:	1f43      	subs	r3, r0, #5
 8000356:	2176      	movs	r1, #118	; 0x76
 8000358:	409a      	lsls	r2, r3
 800035a:	4249      	negs	r1, r1
 800035c:	1a09      	subs	r1, r1, r0
 800035e:	4690      	mov	r8, r2
 8000360:	2000      	movs	r0, #0
 8000362:	e785      	b.n	8000270 <__aeabi_fdiv+0x50>
 8000364:	21ff      	movs	r1, #255	; 0xff
 8000366:	2003      	movs	r0, #3
 8000368:	e782      	b.n	8000270 <__aeabi_fdiv+0x50>
 800036a:	001e      	movs	r6, r3
 800036c:	20ff      	movs	r0, #255	; 0xff
 800036e:	2500      	movs	r5, #0
 8000370:	e7b5      	b.n	80002de <__aeabi_fdiv+0xbe>
 8000372:	2301      	movs	r3, #1
 8000374:	1a1b      	subs	r3, r3, r0
 8000376:	2b1b      	cmp	r3, #27
 8000378:	dcaf      	bgt.n	80002da <__aeabi_fdiv+0xba>
 800037a:	379e      	adds	r7, #158	; 0x9e
 800037c:	0029      	movs	r1, r5
 800037e:	40bd      	lsls	r5, r7
 8000380:	40d9      	lsrs	r1, r3
 8000382:	1e6a      	subs	r2, r5, #1
 8000384:	4195      	sbcs	r5, r2
 8000386:	430d      	orrs	r5, r1
 8000388:	076b      	lsls	r3, r5, #29
 800038a:	d004      	beq.n	8000396 <__aeabi_fdiv+0x176>
 800038c:	230f      	movs	r3, #15
 800038e:	402b      	ands	r3, r5
 8000390:	2b04      	cmp	r3, #4
 8000392:	d000      	beq.n	8000396 <__aeabi_fdiv+0x176>
 8000394:	3504      	adds	r5, #4
 8000396:	016b      	lsls	r3, r5, #5
 8000398:	d544      	bpl.n	8000424 <__aeabi_fdiv+0x204>
 800039a:	2001      	movs	r0, #1
 800039c:	2500      	movs	r5, #0
 800039e:	e79e      	b.n	80002de <__aeabi_fdiv+0xbe>
 80003a0:	20ff      	movs	r0, #255	; 0xff
 80003a2:	2500      	movs	r5, #0
 80003a4:	e79b      	b.n	80002de <__aeabi_fdiv+0xbe>
 80003a6:	2580      	movs	r5, #128	; 0x80
 80003a8:	2600      	movs	r6, #0
 80003aa:	20ff      	movs	r0, #255	; 0xff
 80003ac:	03ed      	lsls	r5, r5, #15
 80003ae:	e796      	b.n	80002de <__aeabi_fdiv+0xbe>
 80003b0:	2300      	movs	r3, #0
 80003b2:	4698      	mov	r8, r3
 80003b4:	2080      	movs	r0, #128	; 0x80
 80003b6:	03c0      	lsls	r0, r0, #15
 80003b8:	4205      	tst	r5, r0
 80003ba:	d009      	beq.n	80003d0 <__aeabi_fdiv+0x1b0>
 80003bc:	4643      	mov	r3, r8
 80003be:	4203      	tst	r3, r0
 80003c0:	d106      	bne.n	80003d0 <__aeabi_fdiv+0x1b0>
 80003c2:	4645      	mov	r5, r8
 80003c4:	4305      	orrs	r5, r0
 80003c6:	026d      	lsls	r5, r5, #9
 80003c8:	0026      	movs	r6, r4
 80003ca:	20ff      	movs	r0, #255	; 0xff
 80003cc:	0a6d      	lsrs	r5, r5, #9
 80003ce:	e786      	b.n	80002de <__aeabi_fdiv+0xbe>
 80003d0:	2080      	movs	r0, #128	; 0x80
 80003d2:	03c0      	lsls	r0, r0, #15
 80003d4:	4305      	orrs	r5, r0
 80003d6:	026d      	lsls	r5, r5, #9
 80003d8:	20ff      	movs	r0, #255	; 0xff
 80003da:	0a6d      	lsrs	r5, r5, #9
 80003dc:	e77f      	b.n	80002de <__aeabi_fdiv+0xbe>
 80003de:	4641      	mov	r1, r8
 80003e0:	016a      	lsls	r2, r5, #5
 80003e2:	0148      	lsls	r0, r1, #5
 80003e4:	4282      	cmp	r2, r0
 80003e6:	d219      	bcs.n	800041c <__aeabi_fdiv+0x1fc>
 80003e8:	211b      	movs	r1, #27
 80003ea:	2500      	movs	r5, #0
 80003ec:	3f01      	subs	r7, #1
 80003ee:	2601      	movs	r6, #1
 80003f0:	0014      	movs	r4, r2
 80003f2:	006d      	lsls	r5, r5, #1
 80003f4:	0052      	lsls	r2, r2, #1
 80003f6:	2c00      	cmp	r4, #0
 80003f8:	db01      	blt.n	80003fe <__aeabi_fdiv+0x1de>
 80003fa:	4290      	cmp	r0, r2
 80003fc:	d801      	bhi.n	8000402 <__aeabi_fdiv+0x1e2>
 80003fe:	1a12      	subs	r2, r2, r0
 8000400:	4335      	orrs	r5, r6
 8000402:	3901      	subs	r1, #1
 8000404:	2900      	cmp	r1, #0
 8000406:	d1f3      	bne.n	80003f0 <__aeabi_fdiv+0x1d0>
 8000408:	1e50      	subs	r0, r2, #1
 800040a:	4182      	sbcs	r2, r0
 800040c:	0038      	movs	r0, r7
 800040e:	307f      	adds	r0, #127	; 0x7f
 8000410:	001e      	movs	r6, r3
 8000412:	4315      	orrs	r5, r2
 8000414:	2800      	cmp	r0, #0
 8000416:	dd00      	ble.n	800041a <__aeabi_fdiv+0x1fa>
 8000418:	e74b      	b.n	80002b2 <__aeabi_fdiv+0x92>
 800041a:	e7aa      	b.n	8000372 <__aeabi_fdiv+0x152>
 800041c:	211a      	movs	r1, #26
 800041e:	2501      	movs	r5, #1
 8000420:	1a12      	subs	r2, r2, r0
 8000422:	e7e4      	b.n	80003ee <__aeabi_fdiv+0x1ce>
 8000424:	01ad      	lsls	r5, r5, #6
 8000426:	2000      	movs	r0, #0
 8000428:	0a6d      	lsrs	r5, r5, #9
 800042a:	e758      	b.n	80002de <__aeabi_fdiv+0xbe>
 800042c:	080035e0 	.word	0x080035e0
 8000430:	f7ffffff 	.word	0xf7ffffff
 8000434:	08003620 	.word	0x08003620

08000438 <__aeabi_ui2f>:
 8000438:	b570      	push	{r4, r5, r6, lr}
 800043a:	1e05      	subs	r5, r0, #0
 800043c:	d00e      	beq.n	800045c <__aeabi_ui2f+0x24>
 800043e:	f001 f995 	bl	800176c <__clzsi2>
 8000442:	239e      	movs	r3, #158	; 0x9e
 8000444:	0004      	movs	r4, r0
 8000446:	1a1b      	subs	r3, r3, r0
 8000448:	2b96      	cmp	r3, #150	; 0x96
 800044a:	dc0c      	bgt.n	8000466 <__aeabi_ui2f+0x2e>
 800044c:	2808      	cmp	r0, #8
 800044e:	dd01      	ble.n	8000454 <__aeabi_ui2f+0x1c>
 8000450:	3c08      	subs	r4, #8
 8000452:	40a5      	lsls	r5, r4
 8000454:	026d      	lsls	r5, r5, #9
 8000456:	0a6d      	lsrs	r5, r5, #9
 8000458:	b2d8      	uxtb	r0, r3
 800045a:	e001      	b.n	8000460 <__aeabi_ui2f+0x28>
 800045c:	2000      	movs	r0, #0
 800045e:	2500      	movs	r5, #0
 8000460:	05c0      	lsls	r0, r0, #23
 8000462:	4328      	orrs	r0, r5
 8000464:	bd70      	pop	{r4, r5, r6, pc}
 8000466:	2b99      	cmp	r3, #153	; 0x99
 8000468:	dd09      	ble.n	800047e <__aeabi_ui2f+0x46>
 800046a:	0002      	movs	r2, r0
 800046c:	0029      	movs	r1, r5
 800046e:	321b      	adds	r2, #27
 8000470:	4091      	lsls	r1, r2
 8000472:	1e4a      	subs	r2, r1, #1
 8000474:	4191      	sbcs	r1, r2
 8000476:	2205      	movs	r2, #5
 8000478:	1a12      	subs	r2, r2, r0
 800047a:	40d5      	lsrs	r5, r2
 800047c:	430d      	orrs	r5, r1
 800047e:	2c05      	cmp	r4, #5
 8000480:	dd01      	ble.n	8000486 <__aeabi_ui2f+0x4e>
 8000482:	1f62      	subs	r2, r4, #5
 8000484:	4095      	lsls	r5, r2
 8000486:	0029      	movs	r1, r5
 8000488:	4e08      	ldr	r6, [pc, #32]	; (80004ac <__aeabi_ui2f+0x74>)
 800048a:	4031      	ands	r1, r6
 800048c:	076a      	lsls	r2, r5, #29
 800048e:	d009      	beq.n	80004a4 <__aeabi_ui2f+0x6c>
 8000490:	200f      	movs	r0, #15
 8000492:	4028      	ands	r0, r5
 8000494:	2804      	cmp	r0, #4
 8000496:	d005      	beq.n	80004a4 <__aeabi_ui2f+0x6c>
 8000498:	3104      	adds	r1, #4
 800049a:	014a      	lsls	r2, r1, #5
 800049c:	d502      	bpl.n	80004a4 <__aeabi_ui2f+0x6c>
 800049e:	239f      	movs	r3, #159	; 0x9f
 80004a0:	4031      	ands	r1, r6
 80004a2:	1b1b      	subs	r3, r3, r4
 80004a4:	0189      	lsls	r1, r1, #6
 80004a6:	0a4d      	lsrs	r5, r1, #9
 80004a8:	b2d8      	uxtb	r0, r3
 80004aa:	e7d9      	b.n	8000460 <__aeabi_ui2f+0x28>
 80004ac:	fbffffff 	.word	0xfbffffff

080004b0 <__aeabi_ddiv>:
 80004b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004b2:	4657      	mov	r7, sl
 80004b4:	464e      	mov	r6, r9
 80004b6:	4645      	mov	r5, r8
 80004b8:	46de      	mov	lr, fp
 80004ba:	b5e0      	push	{r5, r6, r7, lr}
 80004bc:	4681      	mov	r9, r0
 80004be:	0005      	movs	r5, r0
 80004c0:	030c      	lsls	r4, r1, #12
 80004c2:	0048      	lsls	r0, r1, #1
 80004c4:	4692      	mov	sl, r2
 80004c6:	001f      	movs	r7, r3
 80004c8:	b085      	sub	sp, #20
 80004ca:	0b24      	lsrs	r4, r4, #12
 80004cc:	0d40      	lsrs	r0, r0, #21
 80004ce:	0fce      	lsrs	r6, r1, #31
 80004d0:	2800      	cmp	r0, #0
 80004d2:	d059      	beq.n	8000588 <__aeabi_ddiv+0xd8>
 80004d4:	4b87      	ldr	r3, [pc, #540]	; (80006f4 <__aeabi_ddiv+0x244>)
 80004d6:	4298      	cmp	r0, r3
 80004d8:	d100      	bne.n	80004dc <__aeabi_ddiv+0x2c>
 80004da:	e098      	b.n	800060e <__aeabi_ddiv+0x15e>
 80004dc:	0f6b      	lsrs	r3, r5, #29
 80004de:	00e4      	lsls	r4, r4, #3
 80004e0:	431c      	orrs	r4, r3
 80004e2:	2380      	movs	r3, #128	; 0x80
 80004e4:	041b      	lsls	r3, r3, #16
 80004e6:	4323      	orrs	r3, r4
 80004e8:	4698      	mov	r8, r3
 80004ea:	4b83      	ldr	r3, [pc, #524]	; (80006f8 <__aeabi_ddiv+0x248>)
 80004ec:	00ed      	lsls	r5, r5, #3
 80004ee:	469b      	mov	fp, r3
 80004f0:	2300      	movs	r3, #0
 80004f2:	4699      	mov	r9, r3
 80004f4:	4483      	add	fp, r0
 80004f6:	9300      	str	r3, [sp, #0]
 80004f8:	033c      	lsls	r4, r7, #12
 80004fa:	007b      	lsls	r3, r7, #1
 80004fc:	4650      	mov	r0, sl
 80004fe:	0b24      	lsrs	r4, r4, #12
 8000500:	0d5b      	lsrs	r3, r3, #21
 8000502:	0fff      	lsrs	r7, r7, #31
 8000504:	2b00      	cmp	r3, #0
 8000506:	d067      	beq.n	80005d8 <__aeabi_ddiv+0x128>
 8000508:	4a7a      	ldr	r2, [pc, #488]	; (80006f4 <__aeabi_ddiv+0x244>)
 800050a:	4293      	cmp	r3, r2
 800050c:	d018      	beq.n	8000540 <__aeabi_ddiv+0x90>
 800050e:	497a      	ldr	r1, [pc, #488]	; (80006f8 <__aeabi_ddiv+0x248>)
 8000510:	0f42      	lsrs	r2, r0, #29
 8000512:	468c      	mov	ip, r1
 8000514:	00e4      	lsls	r4, r4, #3
 8000516:	4659      	mov	r1, fp
 8000518:	4314      	orrs	r4, r2
 800051a:	2280      	movs	r2, #128	; 0x80
 800051c:	4463      	add	r3, ip
 800051e:	0412      	lsls	r2, r2, #16
 8000520:	1acb      	subs	r3, r1, r3
 8000522:	4314      	orrs	r4, r2
 8000524:	469b      	mov	fp, r3
 8000526:	00c2      	lsls	r2, r0, #3
 8000528:	2000      	movs	r0, #0
 800052a:	0033      	movs	r3, r6
 800052c:	407b      	eors	r3, r7
 800052e:	469a      	mov	sl, r3
 8000530:	464b      	mov	r3, r9
 8000532:	2b0f      	cmp	r3, #15
 8000534:	d900      	bls.n	8000538 <__aeabi_ddiv+0x88>
 8000536:	e0ef      	b.n	8000718 <__aeabi_ddiv+0x268>
 8000538:	4970      	ldr	r1, [pc, #448]	; (80006fc <__aeabi_ddiv+0x24c>)
 800053a:	009b      	lsls	r3, r3, #2
 800053c:	58cb      	ldr	r3, [r1, r3]
 800053e:	469f      	mov	pc, r3
 8000540:	4b6f      	ldr	r3, [pc, #444]	; (8000700 <__aeabi_ddiv+0x250>)
 8000542:	4652      	mov	r2, sl
 8000544:	469c      	mov	ip, r3
 8000546:	4322      	orrs	r2, r4
 8000548:	44e3      	add	fp, ip
 800054a:	2a00      	cmp	r2, #0
 800054c:	d000      	beq.n	8000550 <__aeabi_ddiv+0xa0>
 800054e:	e095      	b.n	800067c <__aeabi_ddiv+0x1cc>
 8000550:	4649      	mov	r1, r9
 8000552:	2302      	movs	r3, #2
 8000554:	4319      	orrs	r1, r3
 8000556:	4689      	mov	r9, r1
 8000558:	2400      	movs	r4, #0
 800055a:	2002      	movs	r0, #2
 800055c:	e7e5      	b.n	800052a <__aeabi_ddiv+0x7a>
 800055e:	2300      	movs	r3, #0
 8000560:	2400      	movs	r4, #0
 8000562:	2500      	movs	r5, #0
 8000564:	4652      	mov	r2, sl
 8000566:	051b      	lsls	r3, r3, #20
 8000568:	4323      	orrs	r3, r4
 800056a:	07d2      	lsls	r2, r2, #31
 800056c:	4313      	orrs	r3, r2
 800056e:	0028      	movs	r0, r5
 8000570:	0019      	movs	r1, r3
 8000572:	b005      	add	sp, #20
 8000574:	bcf0      	pop	{r4, r5, r6, r7}
 8000576:	46bb      	mov	fp, r7
 8000578:	46b2      	mov	sl, r6
 800057a:	46a9      	mov	r9, r5
 800057c:	46a0      	mov	r8, r4
 800057e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000580:	2400      	movs	r4, #0
 8000582:	2500      	movs	r5, #0
 8000584:	4b5b      	ldr	r3, [pc, #364]	; (80006f4 <__aeabi_ddiv+0x244>)
 8000586:	e7ed      	b.n	8000564 <__aeabi_ddiv+0xb4>
 8000588:	464b      	mov	r3, r9
 800058a:	4323      	orrs	r3, r4
 800058c:	4698      	mov	r8, r3
 800058e:	d100      	bne.n	8000592 <__aeabi_ddiv+0xe2>
 8000590:	e089      	b.n	80006a6 <__aeabi_ddiv+0x1f6>
 8000592:	2c00      	cmp	r4, #0
 8000594:	d100      	bne.n	8000598 <__aeabi_ddiv+0xe8>
 8000596:	e1e0      	b.n	800095a <__aeabi_ddiv+0x4aa>
 8000598:	0020      	movs	r0, r4
 800059a:	f001 f8e7 	bl	800176c <__clzsi2>
 800059e:	0001      	movs	r1, r0
 80005a0:	0002      	movs	r2, r0
 80005a2:	390b      	subs	r1, #11
 80005a4:	231d      	movs	r3, #29
 80005a6:	1a5b      	subs	r3, r3, r1
 80005a8:	4649      	mov	r1, r9
 80005aa:	0010      	movs	r0, r2
 80005ac:	40d9      	lsrs	r1, r3
 80005ae:	3808      	subs	r0, #8
 80005b0:	4084      	lsls	r4, r0
 80005b2:	000b      	movs	r3, r1
 80005b4:	464d      	mov	r5, r9
 80005b6:	4323      	orrs	r3, r4
 80005b8:	4698      	mov	r8, r3
 80005ba:	4085      	lsls	r5, r0
 80005bc:	4851      	ldr	r0, [pc, #324]	; (8000704 <__aeabi_ddiv+0x254>)
 80005be:	033c      	lsls	r4, r7, #12
 80005c0:	1a83      	subs	r3, r0, r2
 80005c2:	469b      	mov	fp, r3
 80005c4:	2300      	movs	r3, #0
 80005c6:	4699      	mov	r9, r3
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	007b      	lsls	r3, r7, #1
 80005cc:	4650      	mov	r0, sl
 80005ce:	0b24      	lsrs	r4, r4, #12
 80005d0:	0d5b      	lsrs	r3, r3, #21
 80005d2:	0fff      	lsrs	r7, r7, #31
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d197      	bne.n	8000508 <__aeabi_ddiv+0x58>
 80005d8:	4652      	mov	r2, sl
 80005da:	4322      	orrs	r2, r4
 80005dc:	d055      	beq.n	800068a <__aeabi_ddiv+0x1da>
 80005de:	2c00      	cmp	r4, #0
 80005e0:	d100      	bne.n	80005e4 <__aeabi_ddiv+0x134>
 80005e2:	e1ca      	b.n	800097a <__aeabi_ddiv+0x4ca>
 80005e4:	0020      	movs	r0, r4
 80005e6:	f001 f8c1 	bl	800176c <__clzsi2>
 80005ea:	0002      	movs	r2, r0
 80005ec:	3a0b      	subs	r2, #11
 80005ee:	231d      	movs	r3, #29
 80005f0:	0001      	movs	r1, r0
 80005f2:	1a9b      	subs	r3, r3, r2
 80005f4:	4652      	mov	r2, sl
 80005f6:	3908      	subs	r1, #8
 80005f8:	40da      	lsrs	r2, r3
 80005fa:	408c      	lsls	r4, r1
 80005fc:	4314      	orrs	r4, r2
 80005fe:	4652      	mov	r2, sl
 8000600:	408a      	lsls	r2, r1
 8000602:	4b41      	ldr	r3, [pc, #260]	; (8000708 <__aeabi_ddiv+0x258>)
 8000604:	4458      	add	r0, fp
 8000606:	469b      	mov	fp, r3
 8000608:	4483      	add	fp, r0
 800060a:	2000      	movs	r0, #0
 800060c:	e78d      	b.n	800052a <__aeabi_ddiv+0x7a>
 800060e:	464b      	mov	r3, r9
 8000610:	4323      	orrs	r3, r4
 8000612:	4698      	mov	r8, r3
 8000614:	d140      	bne.n	8000698 <__aeabi_ddiv+0x1e8>
 8000616:	2308      	movs	r3, #8
 8000618:	4699      	mov	r9, r3
 800061a:	3b06      	subs	r3, #6
 800061c:	2500      	movs	r5, #0
 800061e:	4683      	mov	fp, r0
 8000620:	9300      	str	r3, [sp, #0]
 8000622:	e769      	b.n	80004f8 <__aeabi_ddiv+0x48>
 8000624:	46b2      	mov	sl, r6
 8000626:	9b00      	ldr	r3, [sp, #0]
 8000628:	2b02      	cmp	r3, #2
 800062a:	d0a9      	beq.n	8000580 <__aeabi_ddiv+0xd0>
 800062c:	2b03      	cmp	r3, #3
 800062e:	d100      	bne.n	8000632 <__aeabi_ddiv+0x182>
 8000630:	e211      	b.n	8000a56 <__aeabi_ddiv+0x5a6>
 8000632:	2b01      	cmp	r3, #1
 8000634:	d093      	beq.n	800055e <__aeabi_ddiv+0xae>
 8000636:	4a35      	ldr	r2, [pc, #212]	; (800070c <__aeabi_ddiv+0x25c>)
 8000638:	445a      	add	r2, fp
 800063a:	2a00      	cmp	r2, #0
 800063c:	dc00      	bgt.n	8000640 <__aeabi_ddiv+0x190>
 800063e:	e13c      	b.n	80008ba <__aeabi_ddiv+0x40a>
 8000640:	076b      	lsls	r3, r5, #29
 8000642:	d000      	beq.n	8000646 <__aeabi_ddiv+0x196>
 8000644:	e1a7      	b.n	8000996 <__aeabi_ddiv+0x4e6>
 8000646:	08ed      	lsrs	r5, r5, #3
 8000648:	4643      	mov	r3, r8
 800064a:	01db      	lsls	r3, r3, #7
 800064c:	d506      	bpl.n	800065c <__aeabi_ddiv+0x1ac>
 800064e:	4642      	mov	r2, r8
 8000650:	4b2f      	ldr	r3, [pc, #188]	; (8000710 <__aeabi_ddiv+0x260>)
 8000652:	401a      	ands	r2, r3
 8000654:	4690      	mov	r8, r2
 8000656:	2280      	movs	r2, #128	; 0x80
 8000658:	00d2      	lsls	r2, r2, #3
 800065a:	445a      	add	r2, fp
 800065c:	4b2d      	ldr	r3, [pc, #180]	; (8000714 <__aeabi_ddiv+0x264>)
 800065e:	429a      	cmp	r2, r3
 8000660:	dc8e      	bgt.n	8000580 <__aeabi_ddiv+0xd0>
 8000662:	4643      	mov	r3, r8
 8000664:	0552      	lsls	r2, r2, #21
 8000666:	0758      	lsls	r0, r3, #29
 8000668:	025c      	lsls	r4, r3, #9
 800066a:	4305      	orrs	r5, r0
 800066c:	0b24      	lsrs	r4, r4, #12
 800066e:	0d53      	lsrs	r3, r2, #21
 8000670:	e778      	b.n	8000564 <__aeabi_ddiv+0xb4>
 8000672:	46ba      	mov	sl, r7
 8000674:	46a0      	mov	r8, r4
 8000676:	0015      	movs	r5, r2
 8000678:	9000      	str	r0, [sp, #0]
 800067a:	e7d4      	b.n	8000626 <__aeabi_ddiv+0x176>
 800067c:	464a      	mov	r2, r9
 800067e:	2303      	movs	r3, #3
 8000680:	431a      	orrs	r2, r3
 8000682:	4691      	mov	r9, r2
 8000684:	2003      	movs	r0, #3
 8000686:	4652      	mov	r2, sl
 8000688:	e74f      	b.n	800052a <__aeabi_ddiv+0x7a>
 800068a:	4649      	mov	r1, r9
 800068c:	2301      	movs	r3, #1
 800068e:	4319      	orrs	r1, r3
 8000690:	4689      	mov	r9, r1
 8000692:	2400      	movs	r4, #0
 8000694:	2001      	movs	r0, #1
 8000696:	e748      	b.n	800052a <__aeabi_ddiv+0x7a>
 8000698:	230c      	movs	r3, #12
 800069a:	4699      	mov	r9, r3
 800069c:	3b09      	subs	r3, #9
 800069e:	46a0      	mov	r8, r4
 80006a0:	4683      	mov	fp, r0
 80006a2:	9300      	str	r3, [sp, #0]
 80006a4:	e728      	b.n	80004f8 <__aeabi_ddiv+0x48>
 80006a6:	2304      	movs	r3, #4
 80006a8:	4699      	mov	r9, r3
 80006aa:	2300      	movs	r3, #0
 80006ac:	469b      	mov	fp, r3
 80006ae:	3301      	adds	r3, #1
 80006b0:	2500      	movs	r5, #0
 80006b2:	9300      	str	r3, [sp, #0]
 80006b4:	e720      	b.n	80004f8 <__aeabi_ddiv+0x48>
 80006b6:	2300      	movs	r3, #0
 80006b8:	2480      	movs	r4, #128	; 0x80
 80006ba:	469a      	mov	sl, r3
 80006bc:	2500      	movs	r5, #0
 80006be:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <__aeabi_ddiv+0x244>)
 80006c0:	0324      	lsls	r4, r4, #12
 80006c2:	e74f      	b.n	8000564 <__aeabi_ddiv+0xb4>
 80006c4:	2380      	movs	r3, #128	; 0x80
 80006c6:	4641      	mov	r1, r8
 80006c8:	031b      	lsls	r3, r3, #12
 80006ca:	4219      	tst	r1, r3
 80006cc:	d008      	beq.n	80006e0 <__aeabi_ddiv+0x230>
 80006ce:	421c      	tst	r4, r3
 80006d0:	d106      	bne.n	80006e0 <__aeabi_ddiv+0x230>
 80006d2:	431c      	orrs	r4, r3
 80006d4:	0324      	lsls	r4, r4, #12
 80006d6:	46ba      	mov	sl, r7
 80006d8:	0015      	movs	r5, r2
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <__aeabi_ddiv+0x244>)
 80006dc:	0b24      	lsrs	r4, r4, #12
 80006de:	e741      	b.n	8000564 <__aeabi_ddiv+0xb4>
 80006e0:	2480      	movs	r4, #128	; 0x80
 80006e2:	4643      	mov	r3, r8
 80006e4:	0324      	lsls	r4, r4, #12
 80006e6:	431c      	orrs	r4, r3
 80006e8:	0324      	lsls	r4, r4, #12
 80006ea:	46b2      	mov	sl, r6
 80006ec:	4b01      	ldr	r3, [pc, #4]	; (80006f4 <__aeabi_ddiv+0x244>)
 80006ee:	0b24      	lsrs	r4, r4, #12
 80006f0:	e738      	b.n	8000564 <__aeabi_ddiv+0xb4>
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	000007ff 	.word	0x000007ff
 80006f8:	fffffc01 	.word	0xfffffc01
 80006fc:	08003660 	.word	0x08003660
 8000700:	fffff801 	.word	0xfffff801
 8000704:	fffffc0d 	.word	0xfffffc0d
 8000708:	000003f3 	.word	0x000003f3
 800070c:	000003ff 	.word	0x000003ff
 8000710:	feffffff 	.word	0xfeffffff
 8000714:	000007fe 	.word	0x000007fe
 8000718:	4544      	cmp	r4, r8
 800071a:	d200      	bcs.n	800071e <__aeabi_ddiv+0x26e>
 800071c:	e116      	b.n	800094c <__aeabi_ddiv+0x49c>
 800071e:	d100      	bne.n	8000722 <__aeabi_ddiv+0x272>
 8000720:	e111      	b.n	8000946 <__aeabi_ddiv+0x496>
 8000722:	2301      	movs	r3, #1
 8000724:	425b      	negs	r3, r3
 8000726:	469c      	mov	ip, r3
 8000728:	002e      	movs	r6, r5
 800072a:	4640      	mov	r0, r8
 800072c:	2500      	movs	r5, #0
 800072e:	44e3      	add	fp, ip
 8000730:	0223      	lsls	r3, r4, #8
 8000732:	0e14      	lsrs	r4, r2, #24
 8000734:	431c      	orrs	r4, r3
 8000736:	0c1b      	lsrs	r3, r3, #16
 8000738:	4699      	mov	r9, r3
 800073a:	0423      	lsls	r3, r4, #16
 800073c:	0c1f      	lsrs	r7, r3, #16
 800073e:	0212      	lsls	r2, r2, #8
 8000740:	4649      	mov	r1, r9
 8000742:	9200      	str	r2, [sp, #0]
 8000744:	9701      	str	r7, [sp, #4]
 8000746:	f7ff fd65 	bl	8000214 <__aeabi_uidivmod>
 800074a:	0002      	movs	r2, r0
 800074c:	437a      	muls	r2, r7
 800074e:	040b      	lsls	r3, r1, #16
 8000750:	0c31      	lsrs	r1, r6, #16
 8000752:	4680      	mov	r8, r0
 8000754:	4319      	orrs	r1, r3
 8000756:	428a      	cmp	r2, r1
 8000758:	d90b      	bls.n	8000772 <__aeabi_ddiv+0x2c2>
 800075a:	2301      	movs	r3, #1
 800075c:	425b      	negs	r3, r3
 800075e:	469c      	mov	ip, r3
 8000760:	1909      	adds	r1, r1, r4
 8000762:	44e0      	add	r8, ip
 8000764:	428c      	cmp	r4, r1
 8000766:	d804      	bhi.n	8000772 <__aeabi_ddiv+0x2c2>
 8000768:	428a      	cmp	r2, r1
 800076a:	d902      	bls.n	8000772 <__aeabi_ddiv+0x2c2>
 800076c:	1e83      	subs	r3, r0, #2
 800076e:	4698      	mov	r8, r3
 8000770:	1909      	adds	r1, r1, r4
 8000772:	1a88      	subs	r0, r1, r2
 8000774:	4649      	mov	r1, r9
 8000776:	f7ff fd4d 	bl	8000214 <__aeabi_uidivmod>
 800077a:	0409      	lsls	r1, r1, #16
 800077c:	468c      	mov	ip, r1
 800077e:	0431      	lsls	r1, r6, #16
 8000780:	4666      	mov	r6, ip
 8000782:	9a01      	ldr	r2, [sp, #4]
 8000784:	0c09      	lsrs	r1, r1, #16
 8000786:	4342      	muls	r2, r0
 8000788:	0003      	movs	r3, r0
 800078a:	4331      	orrs	r1, r6
 800078c:	428a      	cmp	r2, r1
 800078e:	d904      	bls.n	800079a <__aeabi_ddiv+0x2ea>
 8000790:	1909      	adds	r1, r1, r4
 8000792:	3b01      	subs	r3, #1
 8000794:	428c      	cmp	r4, r1
 8000796:	d800      	bhi.n	800079a <__aeabi_ddiv+0x2ea>
 8000798:	e111      	b.n	80009be <__aeabi_ddiv+0x50e>
 800079a:	1a89      	subs	r1, r1, r2
 800079c:	4642      	mov	r2, r8
 800079e:	9e00      	ldr	r6, [sp, #0]
 80007a0:	0412      	lsls	r2, r2, #16
 80007a2:	431a      	orrs	r2, r3
 80007a4:	0c33      	lsrs	r3, r6, #16
 80007a6:	001f      	movs	r7, r3
 80007a8:	0c10      	lsrs	r0, r2, #16
 80007aa:	4690      	mov	r8, r2
 80007ac:	9302      	str	r3, [sp, #8]
 80007ae:	0413      	lsls	r3, r2, #16
 80007b0:	0432      	lsls	r2, r6, #16
 80007b2:	0c16      	lsrs	r6, r2, #16
 80007b4:	0032      	movs	r2, r6
 80007b6:	0c1b      	lsrs	r3, r3, #16
 80007b8:	435a      	muls	r2, r3
 80007ba:	9603      	str	r6, [sp, #12]
 80007bc:	437b      	muls	r3, r7
 80007be:	4346      	muls	r6, r0
 80007c0:	4378      	muls	r0, r7
 80007c2:	0c17      	lsrs	r7, r2, #16
 80007c4:	46bc      	mov	ip, r7
 80007c6:	199b      	adds	r3, r3, r6
 80007c8:	4463      	add	r3, ip
 80007ca:	429e      	cmp	r6, r3
 80007cc:	d903      	bls.n	80007d6 <__aeabi_ddiv+0x326>
 80007ce:	2680      	movs	r6, #128	; 0x80
 80007d0:	0276      	lsls	r6, r6, #9
 80007d2:	46b4      	mov	ip, r6
 80007d4:	4460      	add	r0, ip
 80007d6:	0c1e      	lsrs	r6, r3, #16
 80007d8:	1830      	adds	r0, r6, r0
 80007da:	0416      	lsls	r6, r2, #16
 80007dc:	041b      	lsls	r3, r3, #16
 80007de:	0c36      	lsrs	r6, r6, #16
 80007e0:	199e      	adds	r6, r3, r6
 80007e2:	4281      	cmp	r1, r0
 80007e4:	d200      	bcs.n	80007e8 <__aeabi_ddiv+0x338>
 80007e6:	e09c      	b.n	8000922 <__aeabi_ddiv+0x472>
 80007e8:	d100      	bne.n	80007ec <__aeabi_ddiv+0x33c>
 80007ea:	e097      	b.n	800091c <__aeabi_ddiv+0x46c>
 80007ec:	1bae      	subs	r6, r5, r6
 80007ee:	1a09      	subs	r1, r1, r0
 80007f0:	42b5      	cmp	r5, r6
 80007f2:	4180      	sbcs	r0, r0
 80007f4:	4240      	negs	r0, r0
 80007f6:	1a08      	subs	r0, r1, r0
 80007f8:	4284      	cmp	r4, r0
 80007fa:	d100      	bne.n	80007fe <__aeabi_ddiv+0x34e>
 80007fc:	e111      	b.n	8000a22 <__aeabi_ddiv+0x572>
 80007fe:	4649      	mov	r1, r9
 8000800:	f7ff fd08 	bl	8000214 <__aeabi_uidivmod>
 8000804:	9a01      	ldr	r2, [sp, #4]
 8000806:	040b      	lsls	r3, r1, #16
 8000808:	4342      	muls	r2, r0
 800080a:	0c31      	lsrs	r1, r6, #16
 800080c:	0005      	movs	r5, r0
 800080e:	4319      	orrs	r1, r3
 8000810:	428a      	cmp	r2, r1
 8000812:	d907      	bls.n	8000824 <__aeabi_ddiv+0x374>
 8000814:	1909      	adds	r1, r1, r4
 8000816:	3d01      	subs	r5, #1
 8000818:	428c      	cmp	r4, r1
 800081a:	d803      	bhi.n	8000824 <__aeabi_ddiv+0x374>
 800081c:	428a      	cmp	r2, r1
 800081e:	d901      	bls.n	8000824 <__aeabi_ddiv+0x374>
 8000820:	1e85      	subs	r5, r0, #2
 8000822:	1909      	adds	r1, r1, r4
 8000824:	1a88      	subs	r0, r1, r2
 8000826:	4649      	mov	r1, r9
 8000828:	f7ff fcf4 	bl	8000214 <__aeabi_uidivmod>
 800082c:	0409      	lsls	r1, r1, #16
 800082e:	468c      	mov	ip, r1
 8000830:	0431      	lsls	r1, r6, #16
 8000832:	4666      	mov	r6, ip
 8000834:	9a01      	ldr	r2, [sp, #4]
 8000836:	0c09      	lsrs	r1, r1, #16
 8000838:	4342      	muls	r2, r0
 800083a:	0003      	movs	r3, r0
 800083c:	4331      	orrs	r1, r6
 800083e:	428a      	cmp	r2, r1
 8000840:	d907      	bls.n	8000852 <__aeabi_ddiv+0x3a2>
 8000842:	1909      	adds	r1, r1, r4
 8000844:	3b01      	subs	r3, #1
 8000846:	428c      	cmp	r4, r1
 8000848:	d803      	bhi.n	8000852 <__aeabi_ddiv+0x3a2>
 800084a:	428a      	cmp	r2, r1
 800084c:	d901      	bls.n	8000852 <__aeabi_ddiv+0x3a2>
 800084e:	1e83      	subs	r3, r0, #2
 8000850:	1909      	adds	r1, r1, r4
 8000852:	9e03      	ldr	r6, [sp, #12]
 8000854:	1a89      	subs	r1, r1, r2
 8000856:	0032      	movs	r2, r6
 8000858:	042d      	lsls	r5, r5, #16
 800085a:	431d      	orrs	r5, r3
 800085c:	9f02      	ldr	r7, [sp, #8]
 800085e:	042b      	lsls	r3, r5, #16
 8000860:	0c1b      	lsrs	r3, r3, #16
 8000862:	435a      	muls	r2, r3
 8000864:	437b      	muls	r3, r7
 8000866:	469c      	mov	ip, r3
 8000868:	0c28      	lsrs	r0, r5, #16
 800086a:	4346      	muls	r6, r0
 800086c:	0c13      	lsrs	r3, r2, #16
 800086e:	44b4      	add	ip, r6
 8000870:	4463      	add	r3, ip
 8000872:	4378      	muls	r0, r7
 8000874:	429e      	cmp	r6, r3
 8000876:	d903      	bls.n	8000880 <__aeabi_ddiv+0x3d0>
 8000878:	2680      	movs	r6, #128	; 0x80
 800087a:	0276      	lsls	r6, r6, #9
 800087c:	46b4      	mov	ip, r6
 800087e:	4460      	add	r0, ip
 8000880:	0c1e      	lsrs	r6, r3, #16
 8000882:	0412      	lsls	r2, r2, #16
 8000884:	041b      	lsls	r3, r3, #16
 8000886:	0c12      	lsrs	r2, r2, #16
 8000888:	1830      	adds	r0, r6, r0
 800088a:	189b      	adds	r3, r3, r2
 800088c:	4281      	cmp	r1, r0
 800088e:	d306      	bcc.n	800089e <__aeabi_ddiv+0x3ee>
 8000890:	d002      	beq.n	8000898 <__aeabi_ddiv+0x3e8>
 8000892:	2301      	movs	r3, #1
 8000894:	431d      	orrs	r5, r3
 8000896:	e6ce      	b.n	8000636 <__aeabi_ddiv+0x186>
 8000898:	2b00      	cmp	r3, #0
 800089a:	d100      	bne.n	800089e <__aeabi_ddiv+0x3ee>
 800089c:	e6cb      	b.n	8000636 <__aeabi_ddiv+0x186>
 800089e:	1861      	adds	r1, r4, r1
 80008a0:	1e6e      	subs	r6, r5, #1
 80008a2:	42a1      	cmp	r1, r4
 80008a4:	d200      	bcs.n	80008a8 <__aeabi_ddiv+0x3f8>
 80008a6:	e0a4      	b.n	80009f2 <__aeabi_ddiv+0x542>
 80008a8:	4281      	cmp	r1, r0
 80008aa:	d200      	bcs.n	80008ae <__aeabi_ddiv+0x3fe>
 80008ac:	e0c9      	b.n	8000a42 <__aeabi_ddiv+0x592>
 80008ae:	d100      	bne.n	80008b2 <__aeabi_ddiv+0x402>
 80008b0:	e0d9      	b.n	8000a66 <__aeabi_ddiv+0x5b6>
 80008b2:	0035      	movs	r5, r6
 80008b4:	e7ed      	b.n	8000892 <__aeabi_ddiv+0x3e2>
 80008b6:	2501      	movs	r5, #1
 80008b8:	426d      	negs	r5, r5
 80008ba:	2101      	movs	r1, #1
 80008bc:	1a89      	subs	r1, r1, r2
 80008be:	2938      	cmp	r1, #56	; 0x38
 80008c0:	dd00      	ble.n	80008c4 <__aeabi_ddiv+0x414>
 80008c2:	e64c      	b.n	800055e <__aeabi_ddiv+0xae>
 80008c4:	291f      	cmp	r1, #31
 80008c6:	dc00      	bgt.n	80008ca <__aeabi_ddiv+0x41a>
 80008c8:	e07f      	b.n	80009ca <__aeabi_ddiv+0x51a>
 80008ca:	231f      	movs	r3, #31
 80008cc:	425b      	negs	r3, r3
 80008ce:	1a9a      	subs	r2, r3, r2
 80008d0:	4643      	mov	r3, r8
 80008d2:	40d3      	lsrs	r3, r2
 80008d4:	2920      	cmp	r1, #32
 80008d6:	d004      	beq.n	80008e2 <__aeabi_ddiv+0x432>
 80008d8:	4644      	mov	r4, r8
 80008da:	4a65      	ldr	r2, [pc, #404]	; (8000a70 <__aeabi_ddiv+0x5c0>)
 80008dc:	445a      	add	r2, fp
 80008de:	4094      	lsls	r4, r2
 80008e0:	4325      	orrs	r5, r4
 80008e2:	1e6a      	subs	r2, r5, #1
 80008e4:	4195      	sbcs	r5, r2
 80008e6:	2207      	movs	r2, #7
 80008e8:	432b      	orrs	r3, r5
 80008ea:	0015      	movs	r5, r2
 80008ec:	2400      	movs	r4, #0
 80008ee:	401d      	ands	r5, r3
 80008f0:	421a      	tst	r2, r3
 80008f2:	d100      	bne.n	80008f6 <__aeabi_ddiv+0x446>
 80008f4:	e0a1      	b.n	8000a3a <__aeabi_ddiv+0x58a>
 80008f6:	220f      	movs	r2, #15
 80008f8:	2400      	movs	r4, #0
 80008fa:	401a      	ands	r2, r3
 80008fc:	2a04      	cmp	r2, #4
 80008fe:	d100      	bne.n	8000902 <__aeabi_ddiv+0x452>
 8000900:	e098      	b.n	8000a34 <__aeabi_ddiv+0x584>
 8000902:	1d1a      	adds	r2, r3, #4
 8000904:	429a      	cmp	r2, r3
 8000906:	419b      	sbcs	r3, r3
 8000908:	425b      	negs	r3, r3
 800090a:	18e4      	adds	r4, r4, r3
 800090c:	0013      	movs	r3, r2
 800090e:	0222      	lsls	r2, r4, #8
 8000910:	d400      	bmi.n	8000914 <__aeabi_ddiv+0x464>
 8000912:	e08f      	b.n	8000a34 <__aeabi_ddiv+0x584>
 8000914:	2301      	movs	r3, #1
 8000916:	2400      	movs	r4, #0
 8000918:	2500      	movs	r5, #0
 800091a:	e623      	b.n	8000564 <__aeabi_ddiv+0xb4>
 800091c:	42b5      	cmp	r5, r6
 800091e:	d300      	bcc.n	8000922 <__aeabi_ddiv+0x472>
 8000920:	e764      	b.n	80007ec <__aeabi_ddiv+0x33c>
 8000922:	4643      	mov	r3, r8
 8000924:	1e5a      	subs	r2, r3, #1
 8000926:	9b00      	ldr	r3, [sp, #0]
 8000928:	469c      	mov	ip, r3
 800092a:	4465      	add	r5, ip
 800092c:	001f      	movs	r7, r3
 800092e:	429d      	cmp	r5, r3
 8000930:	419b      	sbcs	r3, r3
 8000932:	425b      	negs	r3, r3
 8000934:	191b      	adds	r3, r3, r4
 8000936:	18c9      	adds	r1, r1, r3
 8000938:	428c      	cmp	r4, r1
 800093a:	d23a      	bcs.n	80009b2 <__aeabi_ddiv+0x502>
 800093c:	4288      	cmp	r0, r1
 800093e:	d863      	bhi.n	8000a08 <__aeabi_ddiv+0x558>
 8000940:	d060      	beq.n	8000a04 <__aeabi_ddiv+0x554>
 8000942:	4690      	mov	r8, r2
 8000944:	e752      	b.n	80007ec <__aeabi_ddiv+0x33c>
 8000946:	42aa      	cmp	r2, r5
 8000948:	d900      	bls.n	800094c <__aeabi_ddiv+0x49c>
 800094a:	e6ea      	b.n	8000722 <__aeabi_ddiv+0x272>
 800094c:	4643      	mov	r3, r8
 800094e:	07de      	lsls	r6, r3, #31
 8000950:	0858      	lsrs	r0, r3, #1
 8000952:	086b      	lsrs	r3, r5, #1
 8000954:	431e      	orrs	r6, r3
 8000956:	07ed      	lsls	r5, r5, #31
 8000958:	e6ea      	b.n	8000730 <__aeabi_ddiv+0x280>
 800095a:	4648      	mov	r0, r9
 800095c:	f000 ff06 	bl	800176c <__clzsi2>
 8000960:	0001      	movs	r1, r0
 8000962:	0002      	movs	r2, r0
 8000964:	3115      	adds	r1, #21
 8000966:	3220      	adds	r2, #32
 8000968:	291c      	cmp	r1, #28
 800096a:	dc00      	bgt.n	800096e <__aeabi_ddiv+0x4be>
 800096c:	e61a      	b.n	80005a4 <__aeabi_ddiv+0xf4>
 800096e:	464b      	mov	r3, r9
 8000970:	3808      	subs	r0, #8
 8000972:	4083      	lsls	r3, r0
 8000974:	2500      	movs	r5, #0
 8000976:	4698      	mov	r8, r3
 8000978:	e620      	b.n	80005bc <__aeabi_ddiv+0x10c>
 800097a:	f000 fef7 	bl	800176c <__clzsi2>
 800097e:	0003      	movs	r3, r0
 8000980:	001a      	movs	r2, r3
 8000982:	3215      	adds	r2, #21
 8000984:	3020      	adds	r0, #32
 8000986:	2a1c      	cmp	r2, #28
 8000988:	dc00      	bgt.n	800098c <__aeabi_ddiv+0x4dc>
 800098a:	e630      	b.n	80005ee <__aeabi_ddiv+0x13e>
 800098c:	4654      	mov	r4, sl
 800098e:	3b08      	subs	r3, #8
 8000990:	2200      	movs	r2, #0
 8000992:	409c      	lsls	r4, r3
 8000994:	e635      	b.n	8000602 <__aeabi_ddiv+0x152>
 8000996:	230f      	movs	r3, #15
 8000998:	402b      	ands	r3, r5
 800099a:	2b04      	cmp	r3, #4
 800099c:	d100      	bne.n	80009a0 <__aeabi_ddiv+0x4f0>
 800099e:	e652      	b.n	8000646 <__aeabi_ddiv+0x196>
 80009a0:	2305      	movs	r3, #5
 80009a2:	425b      	negs	r3, r3
 80009a4:	42ab      	cmp	r3, r5
 80009a6:	419b      	sbcs	r3, r3
 80009a8:	3504      	adds	r5, #4
 80009aa:	425b      	negs	r3, r3
 80009ac:	08ed      	lsrs	r5, r5, #3
 80009ae:	4498      	add	r8, r3
 80009b0:	e64a      	b.n	8000648 <__aeabi_ddiv+0x198>
 80009b2:	428c      	cmp	r4, r1
 80009b4:	d1c5      	bne.n	8000942 <__aeabi_ddiv+0x492>
 80009b6:	42af      	cmp	r7, r5
 80009b8:	d9c0      	bls.n	800093c <__aeabi_ddiv+0x48c>
 80009ba:	4690      	mov	r8, r2
 80009bc:	e716      	b.n	80007ec <__aeabi_ddiv+0x33c>
 80009be:	428a      	cmp	r2, r1
 80009c0:	d800      	bhi.n	80009c4 <__aeabi_ddiv+0x514>
 80009c2:	e6ea      	b.n	800079a <__aeabi_ddiv+0x2ea>
 80009c4:	1e83      	subs	r3, r0, #2
 80009c6:	1909      	adds	r1, r1, r4
 80009c8:	e6e7      	b.n	800079a <__aeabi_ddiv+0x2ea>
 80009ca:	4a2a      	ldr	r2, [pc, #168]	; (8000a74 <__aeabi_ddiv+0x5c4>)
 80009cc:	0028      	movs	r0, r5
 80009ce:	445a      	add	r2, fp
 80009d0:	4643      	mov	r3, r8
 80009d2:	4095      	lsls	r5, r2
 80009d4:	4093      	lsls	r3, r2
 80009d6:	40c8      	lsrs	r0, r1
 80009d8:	1e6a      	subs	r2, r5, #1
 80009da:	4195      	sbcs	r5, r2
 80009dc:	4644      	mov	r4, r8
 80009de:	4303      	orrs	r3, r0
 80009e0:	432b      	orrs	r3, r5
 80009e2:	40cc      	lsrs	r4, r1
 80009e4:	075a      	lsls	r2, r3, #29
 80009e6:	d092      	beq.n	800090e <__aeabi_ddiv+0x45e>
 80009e8:	220f      	movs	r2, #15
 80009ea:	401a      	ands	r2, r3
 80009ec:	2a04      	cmp	r2, #4
 80009ee:	d188      	bne.n	8000902 <__aeabi_ddiv+0x452>
 80009f0:	e78d      	b.n	800090e <__aeabi_ddiv+0x45e>
 80009f2:	0035      	movs	r5, r6
 80009f4:	4281      	cmp	r1, r0
 80009f6:	d000      	beq.n	80009fa <__aeabi_ddiv+0x54a>
 80009f8:	e74b      	b.n	8000892 <__aeabi_ddiv+0x3e2>
 80009fa:	9a00      	ldr	r2, [sp, #0]
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d000      	beq.n	8000a02 <__aeabi_ddiv+0x552>
 8000a00:	e747      	b.n	8000892 <__aeabi_ddiv+0x3e2>
 8000a02:	e618      	b.n	8000636 <__aeabi_ddiv+0x186>
 8000a04:	42ae      	cmp	r6, r5
 8000a06:	d99c      	bls.n	8000942 <__aeabi_ddiv+0x492>
 8000a08:	2302      	movs	r3, #2
 8000a0a:	425b      	negs	r3, r3
 8000a0c:	469c      	mov	ip, r3
 8000a0e:	9b00      	ldr	r3, [sp, #0]
 8000a10:	44e0      	add	r8, ip
 8000a12:	469c      	mov	ip, r3
 8000a14:	4465      	add	r5, ip
 8000a16:	429d      	cmp	r5, r3
 8000a18:	419b      	sbcs	r3, r3
 8000a1a:	425b      	negs	r3, r3
 8000a1c:	191b      	adds	r3, r3, r4
 8000a1e:	18c9      	adds	r1, r1, r3
 8000a20:	e6e4      	b.n	80007ec <__aeabi_ddiv+0x33c>
 8000a22:	4a15      	ldr	r2, [pc, #84]	; (8000a78 <__aeabi_ddiv+0x5c8>)
 8000a24:	445a      	add	r2, fp
 8000a26:	2a00      	cmp	r2, #0
 8000a28:	dc00      	bgt.n	8000a2c <__aeabi_ddiv+0x57c>
 8000a2a:	e744      	b.n	80008b6 <__aeabi_ddiv+0x406>
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	2500      	movs	r5, #0
 8000a30:	4498      	add	r8, r3
 8000a32:	e609      	b.n	8000648 <__aeabi_ddiv+0x198>
 8000a34:	0765      	lsls	r5, r4, #29
 8000a36:	0264      	lsls	r4, r4, #9
 8000a38:	0b24      	lsrs	r4, r4, #12
 8000a3a:	08db      	lsrs	r3, r3, #3
 8000a3c:	431d      	orrs	r5, r3
 8000a3e:	2300      	movs	r3, #0
 8000a40:	e590      	b.n	8000564 <__aeabi_ddiv+0xb4>
 8000a42:	9e00      	ldr	r6, [sp, #0]
 8000a44:	3d02      	subs	r5, #2
 8000a46:	0072      	lsls	r2, r6, #1
 8000a48:	42b2      	cmp	r2, r6
 8000a4a:	41bf      	sbcs	r7, r7
 8000a4c:	427f      	negs	r7, r7
 8000a4e:	193c      	adds	r4, r7, r4
 8000a50:	1909      	adds	r1, r1, r4
 8000a52:	9200      	str	r2, [sp, #0]
 8000a54:	e7ce      	b.n	80009f4 <__aeabi_ddiv+0x544>
 8000a56:	2480      	movs	r4, #128	; 0x80
 8000a58:	4643      	mov	r3, r8
 8000a5a:	0324      	lsls	r4, r4, #12
 8000a5c:	431c      	orrs	r4, r3
 8000a5e:	0324      	lsls	r4, r4, #12
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <__aeabi_ddiv+0x5cc>)
 8000a62:	0b24      	lsrs	r4, r4, #12
 8000a64:	e57e      	b.n	8000564 <__aeabi_ddiv+0xb4>
 8000a66:	9a00      	ldr	r2, [sp, #0]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d3ea      	bcc.n	8000a42 <__aeabi_ddiv+0x592>
 8000a6c:	0035      	movs	r5, r6
 8000a6e:	e7c4      	b.n	80009fa <__aeabi_ddiv+0x54a>
 8000a70:	0000043e 	.word	0x0000043e
 8000a74:	0000041e 	.word	0x0000041e
 8000a78:	000003ff 	.word	0x000003ff
 8000a7c:	000007ff 	.word	0x000007ff

08000a80 <__aeabi_dmul>:
 8000a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a82:	4657      	mov	r7, sl
 8000a84:	464e      	mov	r6, r9
 8000a86:	4645      	mov	r5, r8
 8000a88:	46de      	mov	lr, fp
 8000a8a:	b5e0      	push	{r5, r6, r7, lr}
 8000a8c:	4698      	mov	r8, r3
 8000a8e:	030c      	lsls	r4, r1, #12
 8000a90:	004b      	lsls	r3, r1, #1
 8000a92:	0006      	movs	r6, r0
 8000a94:	4692      	mov	sl, r2
 8000a96:	b087      	sub	sp, #28
 8000a98:	0b24      	lsrs	r4, r4, #12
 8000a9a:	0d5b      	lsrs	r3, r3, #21
 8000a9c:	0fcf      	lsrs	r7, r1, #31
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d06c      	beq.n	8000b7c <__aeabi_dmul+0xfc>
 8000aa2:	4add      	ldr	r2, [pc, #884]	; (8000e18 <__aeabi_dmul+0x398>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d100      	bne.n	8000aaa <__aeabi_dmul+0x2a>
 8000aa8:	e086      	b.n	8000bb8 <__aeabi_dmul+0x138>
 8000aaa:	0f42      	lsrs	r2, r0, #29
 8000aac:	00e4      	lsls	r4, r4, #3
 8000aae:	4314      	orrs	r4, r2
 8000ab0:	2280      	movs	r2, #128	; 0x80
 8000ab2:	0412      	lsls	r2, r2, #16
 8000ab4:	4314      	orrs	r4, r2
 8000ab6:	4ad9      	ldr	r2, [pc, #868]	; (8000e1c <__aeabi_dmul+0x39c>)
 8000ab8:	00c5      	lsls	r5, r0, #3
 8000aba:	4694      	mov	ip, r2
 8000abc:	4463      	add	r3, ip
 8000abe:	9300      	str	r3, [sp, #0]
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	4699      	mov	r9, r3
 8000ac4:	469b      	mov	fp, r3
 8000ac6:	4643      	mov	r3, r8
 8000ac8:	4642      	mov	r2, r8
 8000aca:	031e      	lsls	r6, r3, #12
 8000acc:	0fd2      	lsrs	r2, r2, #31
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	4650      	mov	r0, sl
 8000ad2:	4690      	mov	r8, r2
 8000ad4:	0b36      	lsrs	r6, r6, #12
 8000ad6:	0d5b      	lsrs	r3, r3, #21
 8000ad8:	d100      	bne.n	8000adc <__aeabi_dmul+0x5c>
 8000ada:	e078      	b.n	8000bce <__aeabi_dmul+0x14e>
 8000adc:	4ace      	ldr	r2, [pc, #824]	; (8000e18 <__aeabi_dmul+0x398>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d01d      	beq.n	8000b1e <__aeabi_dmul+0x9e>
 8000ae2:	49ce      	ldr	r1, [pc, #824]	; (8000e1c <__aeabi_dmul+0x39c>)
 8000ae4:	0f42      	lsrs	r2, r0, #29
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	9900      	ldr	r1, [sp, #0]
 8000aea:	4463      	add	r3, ip
 8000aec:	00f6      	lsls	r6, r6, #3
 8000aee:	468c      	mov	ip, r1
 8000af0:	4316      	orrs	r6, r2
 8000af2:	2280      	movs	r2, #128	; 0x80
 8000af4:	449c      	add	ip, r3
 8000af6:	0412      	lsls	r2, r2, #16
 8000af8:	4663      	mov	r3, ip
 8000afa:	4316      	orrs	r6, r2
 8000afc:	00c2      	lsls	r2, r0, #3
 8000afe:	2000      	movs	r0, #0
 8000b00:	9300      	str	r3, [sp, #0]
 8000b02:	9900      	ldr	r1, [sp, #0]
 8000b04:	4643      	mov	r3, r8
 8000b06:	3101      	adds	r1, #1
 8000b08:	468c      	mov	ip, r1
 8000b0a:	4649      	mov	r1, r9
 8000b0c:	407b      	eors	r3, r7
 8000b0e:	9301      	str	r3, [sp, #4]
 8000b10:	290f      	cmp	r1, #15
 8000b12:	d900      	bls.n	8000b16 <__aeabi_dmul+0x96>
 8000b14:	e07e      	b.n	8000c14 <__aeabi_dmul+0x194>
 8000b16:	4bc2      	ldr	r3, [pc, #776]	; (8000e20 <__aeabi_dmul+0x3a0>)
 8000b18:	0089      	lsls	r1, r1, #2
 8000b1a:	5859      	ldr	r1, [r3, r1]
 8000b1c:	468f      	mov	pc, r1
 8000b1e:	4652      	mov	r2, sl
 8000b20:	9b00      	ldr	r3, [sp, #0]
 8000b22:	4332      	orrs	r2, r6
 8000b24:	d000      	beq.n	8000b28 <__aeabi_dmul+0xa8>
 8000b26:	e156      	b.n	8000dd6 <__aeabi_dmul+0x356>
 8000b28:	49bb      	ldr	r1, [pc, #748]	; (8000e18 <__aeabi_dmul+0x398>)
 8000b2a:	2600      	movs	r6, #0
 8000b2c:	468c      	mov	ip, r1
 8000b2e:	4463      	add	r3, ip
 8000b30:	4649      	mov	r1, r9
 8000b32:	9300      	str	r3, [sp, #0]
 8000b34:	2302      	movs	r3, #2
 8000b36:	4319      	orrs	r1, r3
 8000b38:	4689      	mov	r9, r1
 8000b3a:	2002      	movs	r0, #2
 8000b3c:	e7e1      	b.n	8000b02 <__aeabi_dmul+0x82>
 8000b3e:	4643      	mov	r3, r8
 8000b40:	9301      	str	r3, [sp, #4]
 8000b42:	0034      	movs	r4, r6
 8000b44:	0015      	movs	r5, r2
 8000b46:	4683      	mov	fp, r0
 8000b48:	465b      	mov	r3, fp
 8000b4a:	2b02      	cmp	r3, #2
 8000b4c:	d05e      	beq.n	8000c0c <__aeabi_dmul+0x18c>
 8000b4e:	2b03      	cmp	r3, #3
 8000b50:	d100      	bne.n	8000b54 <__aeabi_dmul+0xd4>
 8000b52:	e1f3      	b.n	8000f3c <__aeabi_dmul+0x4bc>
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d000      	beq.n	8000b5a <__aeabi_dmul+0xda>
 8000b58:	e118      	b.n	8000d8c <__aeabi_dmul+0x30c>
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2400      	movs	r4, #0
 8000b5e:	2500      	movs	r5, #0
 8000b60:	9b01      	ldr	r3, [sp, #4]
 8000b62:	0512      	lsls	r2, r2, #20
 8000b64:	4322      	orrs	r2, r4
 8000b66:	07db      	lsls	r3, r3, #31
 8000b68:	431a      	orrs	r2, r3
 8000b6a:	0028      	movs	r0, r5
 8000b6c:	0011      	movs	r1, r2
 8000b6e:	b007      	add	sp, #28
 8000b70:	bcf0      	pop	{r4, r5, r6, r7}
 8000b72:	46bb      	mov	fp, r7
 8000b74:	46b2      	mov	sl, r6
 8000b76:	46a9      	mov	r9, r5
 8000b78:	46a0      	mov	r8, r4
 8000b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b7c:	0025      	movs	r5, r4
 8000b7e:	4305      	orrs	r5, r0
 8000b80:	d100      	bne.n	8000b84 <__aeabi_dmul+0x104>
 8000b82:	e141      	b.n	8000e08 <__aeabi_dmul+0x388>
 8000b84:	2c00      	cmp	r4, #0
 8000b86:	d100      	bne.n	8000b8a <__aeabi_dmul+0x10a>
 8000b88:	e1ad      	b.n	8000ee6 <__aeabi_dmul+0x466>
 8000b8a:	0020      	movs	r0, r4
 8000b8c:	f000 fdee 	bl	800176c <__clzsi2>
 8000b90:	0001      	movs	r1, r0
 8000b92:	0002      	movs	r2, r0
 8000b94:	390b      	subs	r1, #11
 8000b96:	231d      	movs	r3, #29
 8000b98:	0010      	movs	r0, r2
 8000b9a:	1a5b      	subs	r3, r3, r1
 8000b9c:	0031      	movs	r1, r6
 8000b9e:	0035      	movs	r5, r6
 8000ba0:	3808      	subs	r0, #8
 8000ba2:	4084      	lsls	r4, r0
 8000ba4:	40d9      	lsrs	r1, r3
 8000ba6:	4085      	lsls	r5, r0
 8000ba8:	430c      	orrs	r4, r1
 8000baa:	489e      	ldr	r0, [pc, #632]	; (8000e24 <__aeabi_dmul+0x3a4>)
 8000bac:	1a83      	subs	r3, r0, r2
 8000bae:	9300      	str	r3, [sp, #0]
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	4699      	mov	r9, r3
 8000bb4:	469b      	mov	fp, r3
 8000bb6:	e786      	b.n	8000ac6 <__aeabi_dmul+0x46>
 8000bb8:	0005      	movs	r5, r0
 8000bba:	4325      	orrs	r5, r4
 8000bbc:	d000      	beq.n	8000bc0 <__aeabi_dmul+0x140>
 8000bbe:	e11c      	b.n	8000dfa <__aeabi_dmul+0x37a>
 8000bc0:	2208      	movs	r2, #8
 8000bc2:	9300      	str	r3, [sp, #0]
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	2400      	movs	r4, #0
 8000bc8:	4691      	mov	r9, r2
 8000bca:	469b      	mov	fp, r3
 8000bcc:	e77b      	b.n	8000ac6 <__aeabi_dmul+0x46>
 8000bce:	4652      	mov	r2, sl
 8000bd0:	4332      	orrs	r2, r6
 8000bd2:	d100      	bne.n	8000bd6 <__aeabi_dmul+0x156>
 8000bd4:	e10a      	b.n	8000dec <__aeabi_dmul+0x36c>
 8000bd6:	2e00      	cmp	r6, #0
 8000bd8:	d100      	bne.n	8000bdc <__aeabi_dmul+0x15c>
 8000bda:	e176      	b.n	8000eca <__aeabi_dmul+0x44a>
 8000bdc:	0030      	movs	r0, r6
 8000bde:	f000 fdc5 	bl	800176c <__clzsi2>
 8000be2:	0002      	movs	r2, r0
 8000be4:	3a0b      	subs	r2, #11
 8000be6:	231d      	movs	r3, #29
 8000be8:	0001      	movs	r1, r0
 8000bea:	1a9b      	subs	r3, r3, r2
 8000bec:	4652      	mov	r2, sl
 8000bee:	3908      	subs	r1, #8
 8000bf0:	40da      	lsrs	r2, r3
 8000bf2:	408e      	lsls	r6, r1
 8000bf4:	4316      	orrs	r6, r2
 8000bf6:	4652      	mov	r2, sl
 8000bf8:	408a      	lsls	r2, r1
 8000bfa:	9b00      	ldr	r3, [sp, #0]
 8000bfc:	4989      	ldr	r1, [pc, #548]	; (8000e24 <__aeabi_dmul+0x3a4>)
 8000bfe:	1a18      	subs	r0, r3, r0
 8000c00:	0003      	movs	r3, r0
 8000c02:	468c      	mov	ip, r1
 8000c04:	4463      	add	r3, ip
 8000c06:	2000      	movs	r0, #0
 8000c08:	9300      	str	r3, [sp, #0]
 8000c0a:	e77a      	b.n	8000b02 <__aeabi_dmul+0x82>
 8000c0c:	2400      	movs	r4, #0
 8000c0e:	2500      	movs	r5, #0
 8000c10:	4a81      	ldr	r2, [pc, #516]	; (8000e18 <__aeabi_dmul+0x398>)
 8000c12:	e7a5      	b.n	8000b60 <__aeabi_dmul+0xe0>
 8000c14:	0c2f      	lsrs	r7, r5, #16
 8000c16:	042d      	lsls	r5, r5, #16
 8000c18:	0c2d      	lsrs	r5, r5, #16
 8000c1a:	002b      	movs	r3, r5
 8000c1c:	0c11      	lsrs	r1, r2, #16
 8000c1e:	0412      	lsls	r2, r2, #16
 8000c20:	0c12      	lsrs	r2, r2, #16
 8000c22:	4353      	muls	r3, r2
 8000c24:	4698      	mov	r8, r3
 8000c26:	0013      	movs	r3, r2
 8000c28:	0028      	movs	r0, r5
 8000c2a:	437b      	muls	r3, r7
 8000c2c:	4699      	mov	r9, r3
 8000c2e:	4348      	muls	r0, r1
 8000c30:	4448      	add	r0, r9
 8000c32:	4683      	mov	fp, r0
 8000c34:	4640      	mov	r0, r8
 8000c36:	000b      	movs	r3, r1
 8000c38:	0c00      	lsrs	r0, r0, #16
 8000c3a:	4682      	mov	sl, r0
 8000c3c:	4658      	mov	r0, fp
 8000c3e:	437b      	muls	r3, r7
 8000c40:	4450      	add	r0, sl
 8000c42:	9302      	str	r3, [sp, #8]
 8000c44:	4581      	cmp	r9, r0
 8000c46:	d906      	bls.n	8000c56 <__aeabi_dmul+0x1d6>
 8000c48:	469a      	mov	sl, r3
 8000c4a:	2380      	movs	r3, #128	; 0x80
 8000c4c:	025b      	lsls	r3, r3, #9
 8000c4e:	4699      	mov	r9, r3
 8000c50:	44ca      	add	sl, r9
 8000c52:	4653      	mov	r3, sl
 8000c54:	9302      	str	r3, [sp, #8]
 8000c56:	0c03      	lsrs	r3, r0, #16
 8000c58:	469b      	mov	fp, r3
 8000c5a:	4643      	mov	r3, r8
 8000c5c:	041b      	lsls	r3, r3, #16
 8000c5e:	0400      	lsls	r0, r0, #16
 8000c60:	0c1b      	lsrs	r3, r3, #16
 8000c62:	4698      	mov	r8, r3
 8000c64:	0003      	movs	r3, r0
 8000c66:	4443      	add	r3, r8
 8000c68:	9304      	str	r3, [sp, #16]
 8000c6a:	0c33      	lsrs	r3, r6, #16
 8000c6c:	4699      	mov	r9, r3
 8000c6e:	002b      	movs	r3, r5
 8000c70:	0436      	lsls	r6, r6, #16
 8000c72:	0c36      	lsrs	r6, r6, #16
 8000c74:	4373      	muls	r3, r6
 8000c76:	4698      	mov	r8, r3
 8000c78:	0033      	movs	r3, r6
 8000c7a:	437b      	muls	r3, r7
 8000c7c:	469a      	mov	sl, r3
 8000c7e:	464b      	mov	r3, r9
 8000c80:	435d      	muls	r5, r3
 8000c82:	435f      	muls	r7, r3
 8000c84:	4643      	mov	r3, r8
 8000c86:	4455      	add	r5, sl
 8000c88:	0c18      	lsrs	r0, r3, #16
 8000c8a:	1940      	adds	r0, r0, r5
 8000c8c:	4582      	cmp	sl, r0
 8000c8e:	d903      	bls.n	8000c98 <__aeabi_dmul+0x218>
 8000c90:	2380      	movs	r3, #128	; 0x80
 8000c92:	025b      	lsls	r3, r3, #9
 8000c94:	469a      	mov	sl, r3
 8000c96:	4457      	add	r7, sl
 8000c98:	0c05      	lsrs	r5, r0, #16
 8000c9a:	19eb      	adds	r3, r5, r7
 8000c9c:	9305      	str	r3, [sp, #20]
 8000c9e:	4643      	mov	r3, r8
 8000ca0:	041d      	lsls	r5, r3, #16
 8000ca2:	0c2d      	lsrs	r5, r5, #16
 8000ca4:	0400      	lsls	r0, r0, #16
 8000ca6:	1940      	adds	r0, r0, r5
 8000ca8:	0c25      	lsrs	r5, r4, #16
 8000caa:	0424      	lsls	r4, r4, #16
 8000cac:	0c24      	lsrs	r4, r4, #16
 8000cae:	0027      	movs	r7, r4
 8000cb0:	4357      	muls	r7, r2
 8000cb2:	436a      	muls	r2, r5
 8000cb4:	4690      	mov	r8, r2
 8000cb6:	002a      	movs	r2, r5
 8000cb8:	0c3b      	lsrs	r3, r7, #16
 8000cba:	469a      	mov	sl, r3
 8000cbc:	434a      	muls	r2, r1
 8000cbe:	4361      	muls	r1, r4
 8000cc0:	4441      	add	r1, r8
 8000cc2:	4451      	add	r1, sl
 8000cc4:	4483      	add	fp, r0
 8000cc6:	4588      	cmp	r8, r1
 8000cc8:	d903      	bls.n	8000cd2 <__aeabi_dmul+0x252>
 8000cca:	2380      	movs	r3, #128	; 0x80
 8000ccc:	025b      	lsls	r3, r3, #9
 8000cce:	4698      	mov	r8, r3
 8000cd0:	4442      	add	r2, r8
 8000cd2:	043f      	lsls	r7, r7, #16
 8000cd4:	0c0b      	lsrs	r3, r1, #16
 8000cd6:	0c3f      	lsrs	r7, r7, #16
 8000cd8:	0409      	lsls	r1, r1, #16
 8000cda:	19c9      	adds	r1, r1, r7
 8000cdc:	0027      	movs	r7, r4
 8000cde:	4698      	mov	r8, r3
 8000ce0:	464b      	mov	r3, r9
 8000ce2:	4377      	muls	r7, r6
 8000ce4:	435c      	muls	r4, r3
 8000ce6:	436e      	muls	r6, r5
 8000ce8:	435d      	muls	r5, r3
 8000cea:	0c3b      	lsrs	r3, r7, #16
 8000cec:	4699      	mov	r9, r3
 8000cee:	19a4      	adds	r4, r4, r6
 8000cf0:	444c      	add	r4, r9
 8000cf2:	4442      	add	r2, r8
 8000cf4:	9503      	str	r5, [sp, #12]
 8000cf6:	42a6      	cmp	r6, r4
 8000cf8:	d904      	bls.n	8000d04 <__aeabi_dmul+0x284>
 8000cfa:	2380      	movs	r3, #128	; 0x80
 8000cfc:	025b      	lsls	r3, r3, #9
 8000cfe:	4698      	mov	r8, r3
 8000d00:	4445      	add	r5, r8
 8000d02:	9503      	str	r5, [sp, #12]
 8000d04:	9b02      	ldr	r3, [sp, #8]
 8000d06:	043f      	lsls	r7, r7, #16
 8000d08:	445b      	add	r3, fp
 8000d0a:	001e      	movs	r6, r3
 8000d0c:	4283      	cmp	r3, r0
 8000d0e:	4180      	sbcs	r0, r0
 8000d10:	0423      	lsls	r3, r4, #16
 8000d12:	4698      	mov	r8, r3
 8000d14:	9b05      	ldr	r3, [sp, #20]
 8000d16:	0c3f      	lsrs	r7, r7, #16
 8000d18:	4447      	add	r7, r8
 8000d1a:	4698      	mov	r8, r3
 8000d1c:	1876      	adds	r6, r6, r1
 8000d1e:	428e      	cmp	r6, r1
 8000d20:	4189      	sbcs	r1, r1
 8000d22:	4447      	add	r7, r8
 8000d24:	4240      	negs	r0, r0
 8000d26:	183d      	adds	r5, r7, r0
 8000d28:	46a8      	mov	r8, r5
 8000d2a:	4693      	mov	fp, r2
 8000d2c:	4249      	negs	r1, r1
 8000d2e:	468a      	mov	sl, r1
 8000d30:	44c3      	add	fp, r8
 8000d32:	429f      	cmp	r7, r3
 8000d34:	41bf      	sbcs	r7, r7
 8000d36:	4580      	cmp	r8, r0
 8000d38:	4180      	sbcs	r0, r0
 8000d3a:	9b03      	ldr	r3, [sp, #12]
 8000d3c:	44da      	add	sl, fp
 8000d3e:	4698      	mov	r8, r3
 8000d40:	4653      	mov	r3, sl
 8000d42:	4240      	negs	r0, r0
 8000d44:	427f      	negs	r7, r7
 8000d46:	4307      	orrs	r7, r0
 8000d48:	0c24      	lsrs	r4, r4, #16
 8000d4a:	4593      	cmp	fp, r2
 8000d4c:	4192      	sbcs	r2, r2
 8000d4e:	458a      	cmp	sl, r1
 8000d50:	4189      	sbcs	r1, r1
 8000d52:	193f      	adds	r7, r7, r4
 8000d54:	0ddc      	lsrs	r4, r3, #23
 8000d56:	9b04      	ldr	r3, [sp, #16]
 8000d58:	0275      	lsls	r5, r6, #9
 8000d5a:	431d      	orrs	r5, r3
 8000d5c:	1e68      	subs	r0, r5, #1
 8000d5e:	4185      	sbcs	r5, r0
 8000d60:	4653      	mov	r3, sl
 8000d62:	4252      	negs	r2, r2
 8000d64:	4249      	negs	r1, r1
 8000d66:	430a      	orrs	r2, r1
 8000d68:	18bf      	adds	r7, r7, r2
 8000d6a:	4447      	add	r7, r8
 8000d6c:	0df6      	lsrs	r6, r6, #23
 8000d6e:	027f      	lsls	r7, r7, #9
 8000d70:	4335      	orrs	r5, r6
 8000d72:	025a      	lsls	r2, r3, #9
 8000d74:	433c      	orrs	r4, r7
 8000d76:	4315      	orrs	r5, r2
 8000d78:	01fb      	lsls	r3, r7, #7
 8000d7a:	d400      	bmi.n	8000d7e <__aeabi_dmul+0x2fe>
 8000d7c:	e0c1      	b.n	8000f02 <__aeabi_dmul+0x482>
 8000d7e:	2101      	movs	r1, #1
 8000d80:	086a      	lsrs	r2, r5, #1
 8000d82:	400d      	ands	r5, r1
 8000d84:	4315      	orrs	r5, r2
 8000d86:	07e2      	lsls	r2, r4, #31
 8000d88:	4315      	orrs	r5, r2
 8000d8a:	0864      	lsrs	r4, r4, #1
 8000d8c:	4926      	ldr	r1, [pc, #152]	; (8000e28 <__aeabi_dmul+0x3a8>)
 8000d8e:	4461      	add	r1, ip
 8000d90:	2900      	cmp	r1, #0
 8000d92:	dd56      	ble.n	8000e42 <__aeabi_dmul+0x3c2>
 8000d94:	076b      	lsls	r3, r5, #29
 8000d96:	d009      	beq.n	8000dac <__aeabi_dmul+0x32c>
 8000d98:	220f      	movs	r2, #15
 8000d9a:	402a      	ands	r2, r5
 8000d9c:	2a04      	cmp	r2, #4
 8000d9e:	d005      	beq.n	8000dac <__aeabi_dmul+0x32c>
 8000da0:	1d2a      	adds	r2, r5, #4
 8000da2:	42aa      	cmp	r2, r5
 8000da4:	41ad      	sbcs	r5, r5
 8000da6:	426d      	negs	r5, r5
 8000da8:	1964      	adds	r4, r4, r5
 8000daa:	0015      	movs	r5, r2
 8000dac:	01e3      	lsls	r3, r4, #7
 8000dae:	d504      	bpl.n	8000dba <__aeabi_dmul+0x33a>
 8000db0:	2180      	movs	r1, #128	; 0x80
 8000db2:	4a1e      	ldr	r2, [pc, #120]	; (8000e2c <__aeabi_dmul+0x3ac>)
 8000db4:	00c9      	lsls	r1, r1, #3
 8000db6:	4014      	ands	r4, r2
 8000db8:	4461      	add	r1, ip
 8000dba:	4a1d      	ldr	r2, [pc, #116]	; (8000e30 <__aeabi_dmul+0x3b0>)
 8000dbc:	4291      	cmp	r1, r2
 8000dbe:	dd00      	ble.n	8000dc2 <__aeabi_dmul+0x342>
 8000dc0:	e724      	b.n	8000c0c <__aeabi_dmul+0x18c>
 8000dc2:	0762      	lsls	r2, r4, #29
 8000dc4:	08ed      	lsrs	r5, r5, #3
 8000dc6:	0264      	lsls	r4, r4, #9
 8000dc8:	0549      	lsls	r1, r1, #21
 8000dca:	4315      	orrs	r5, r2
 8000dcc:	0b24      	lsrs	r4, r4, #12
 8000dce:	0d4a      	lsrs	r2, r1, #21
 8000dd0:	e6c6      	b.n	8000b60 <__aeabi_dmul+0xe0>
 8000dd2:	9701      	str	r7, [sp, #4]
 8000dd4:	e6b8      	b.n	8000b48 <__aeabi_dmul+0xc8>
 8000dd6:	4a10      	ldr	r2, [pc, #64]	; (8000e18 <__aeabi_dmul+0x398>)
 8000dd8:	2003      	movs	r0, #3
 8000dda:	4694      	mov	ip, r2
 8000ddc:	4463      	add	r3, ip
 8000dde:	464a      	mov	r2, r9
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	2303      	movs	r3, #3
 8000de4:	431a      	orrs	r2, r3
 8000de6:	4691      	mov	r9, r2
 8000de8:	4652      	mov	r2, sl
 8000dea:	e68a      	b.n	8000b02 <__aeabi_dmul+0x82>
 8000dec:	4649      	mov	r1, r9
 8000dee:	2301      	movs	r3, #1
 8000df0:	4319      	orrs	r1, r3
 8000df2:	4689      	mov	r9, r1
 8000df4:	2600      	movs	r6, #0
 8000df6:	2001      	movs	r0, #1
 8000df8:	e683      	b.n	8000b02 <__aeabi_dmul+0x82>
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	9300      	str	r3, [sp, #0]
 8000dfe:	2303      	movs	r3, #3
 8000e00:	0005      	movs	r5, r0
 8000e02:	4691      	mov	r9, r2
 8000e04:	469b      	mov	fp, r3
 8000e06:	e65e      	b.n	8000ac6 <__aeabi_dmul+0x46>
 8000e08:	2304      	movs	r3, #4
 8000e0a:	4699      	mov	r9, r3
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	9300      	str	r3, [sp, #0]
 8000e10:	3301      	adds	r3, #1
 8000e12:	2400      	movs	r4, #0
 8000e14:	469b      	mov	fp, r3
 8000e16:	e656      	b.n	8000ac6 <__aeabi_dmul+0x46>
 8000e18:	000007ff 	.word	0x000007ff
 8000e1c:	fffffc01 	.word	0xfffffc01
 8000e20:	080036a0 	.word	0x080036a0
 8000e24:	fffffc0d 	.word	0xfffffc0d
 8000e28:	000003ff 	.word	0x000003ff
 8000e2c:	feffffff 	.word	0xfeffffff
 8000e30:	000007fe 	.word	0x000007fe
 8000e34:	2300      	movs	r3, #0
 8000e36:	2480      	movs	r4, #128	; 0x80
 8000e38:	2500      	movs	r5, #0
 8000e3a:	4a44      	ldr	r2, [pc, #272]	; (8000f4c <__aeabi_dmul+0x4cc>)
 8000e3c:	9301      	str	r3, [sp, #4]
 8000e3e:	0324      	lsls	r4, r4, #12
 8000e40:	e68e      	b.n	8000b60 <__aeabi_dmul+0xe0>
 8000e42:	2001      	movs	r0, #1
 8000e44:	1a40      	subs	r0, r0, r1
 8000e46:	2838      	cmp	r0, #56	; 0x38
 8000e48:	dd00      	ble.n	8000e4c <__aeabi_dmul+0x3cc>
 8000e4a:	e686      	b.n	8000b5a <__aeabi_dmul+0xda>
 8000e4c:	281f      	cmp	r0, #31
 8000e4e:	dd5b      	ble.n	8000f08 <__aeabi_dmul+0x488>
 8000e50:	221f      	movs	r2, #31
 8000e52:	0023      	movs	r3, r4
 8000e54:	4252      	negs	r2, r2
 8000e56:	1a51      	subs	r1, r2, r1
 8000e58:	40cb      	lsrs	r3, r1
 8000e5a:	0019      	movs	r1, r3
 8000e5c:	2820      	cmp	r0, #32
 8000e5e:	d003      	beq.n	8000e68 <__aeabi_dmul+0x3e8>
 8000e60:	4a3b      	ldr	r2, [pc, #236]	; (8000f50 <__aeabi_dmul+0x4d0>)
 8000e62:	4462      	add	r2, ip
 8000e64:	4094      	lsls	r4, r2
 8000e66:	4325      	orrs	r5, r4
 8000e68:	1e6a      	subs	r2, r5, #1
 8000e6a:	4195      	sbcs	r5, r2
 8000e6c:	002a      	movs	r2, r5
 8000e6e:	430a      	orrs	r2, r1
 8000e70:	2107      	movs	r1, #7
 8000e72:	000d      	movs	r5, r1
 8000e74:	2400      	movs	r4, #0
 8000e76:	4015      	ands	r5, r2
 8000e78:	4211      	tst	r1, r2
 8000e7a:	d05b      	beq.n	8000f34 <__aeabi_dmul+0x4b4>
 8000e7c:	210f      	movs	r1, #15
 8000e7e:	2400      	movs	r4, #0
 8000e80:	4011      	ands	r1, r2
 8000e82:	2904      	cmp	r1, #4
 8000e84:	d053      	beq.n	8000f2e <__aeabi_dmul+0x4ae>
 8000e86:	1d11      	adds	r1, r2, #4
 8000e88:	4291      	cmp	r1, r2
 8000e8a:	4192      	sbcs	r2, r2
 8000e8c:	4252      	negs	r2, r2
 8000e8e:	18a4      	adds	r4, r4, r2
 8000e90:	000a      	movs	r2, r1
 8000e92:	0223      	lsls	r3, r4, #8
 8000e94:	d54b      	bpl.n	8000f2e <__aeabi_dmul+0x4ae>
 8000e96:	2201      	movs	r2, #1
 8000e98:	2400      	movs	r4, #0
 8000e9a:	2500      	movs	r5, #0
 8000e9c:	e660      	b.n	8000b60 <__aeabi_dmul+0xe0>
 8000e9e:	2380      	movs	r3, #128	; 0x80
 8000ea0:	031b      	lsls	r3, r3, #12
 8000ea2:	421c      	tst	r4, r3
 8000ea4:	d009      	beq.n	8000eba <__aeabi_dmul+0x43a>
 8000ea6:	421e      	tst	r6, r3
 8000ea8:	d107      	bne.n	8000eba <__aeabi_dmul+0x43a>
 8000eaa:	4333      	orrs	r3, r6
 8000eac:	031c      	lsls	r4, r3, #12
 8000eae:	4643      	mov	r3, r8
 8000eb0:	0015      	movs	r5, r2
 8000eb2:	0b24      	lsrs	r4, r4, #12
 8000eb4:	4a25      	ldr	r2, [pc, #148]	; (8000f4c <__aeabi_dmul+0x4cc>)
 8000eb6:	9301      	str	r3, [sp, #4]
 8000eb8:	e652      	b.n	8000b60 <__aeabi_dmul+0xe0>
 8000eba:	2280      	movs	r2, #128	; 0x80
 8000ebc:	0312      	lsls	r2, r2, #12
 8000ebe:	4314      	orrs	r4, r2
 8000ec0:	0324      	lsls	r4, r4, #12
 8000ec2:	4a22      	ldr	r2, [pc, #136]	; (8000f4c <__aeabi_dmul+0x4cc>)
 8000ec4:	0b24      	lsrs	r4, r4, #12
 8000ec6:	9701      	str	r7, [sp, #4]
 8000ec8:	e64a      	b.n	8000b60 <__aeabi_dmul+0xe0>
 8000eca:	f000 fc4f 	bl	800176c <__clzsi2>
 8000ece:	0003      	movs	r3, r0
 8000ed0:	001a      	movs	r2, r3
 8000ed2:	3215      	adds	r2, #21
 8000ed4:	3020      	adds	r0, #32
 8000ed6:	2a1c      	cmp	r2, #28
 8000ed8:	dc00      	bgt.n	8000edc <__aeabi_dmul+0x45c>
 8000eda:	e684      	b.n	8000be6 <__aeabi_dmul+0x166>
 8000edc:	4656      	mov	r6, sl
 8000ede:	3b08      	subs	r3, #8
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	409e      	lsls	r6, r3
 8000ee4:	e689      	b.n	8000bfa <__aeabi_dmul+0x17a>
 8000ee6:	f000 fc41 	bl	800176c <__clzsi2>
 8000eea:	0001      	movs	r1, r0
 8000eec:	0002      	movs	r2, r0
 8000eee:	3115      	adds	r1, #21
 8000ef0:	3220      	adds	r2, #32
 8000ef2:	291c      	cmp	r1, #28
 8000ef4:	dc00      	bgt.n	8000ef8 <__aeabi_dmul+0x478>
 8000ef6:	e64e      	b.n	8000b96 <__aeabi_dmul+0x116>
 8000ef8:	0034      	movs	r4, r6
 8000efa:	3808      	subs	r0, #8
 8000efc:	2500      	movs	r5, #0
 8000efe:	4084      	lsls	r4, r0
 8000f00:	e653      	b.n	8000baa <__aeabi_dmul+0x12a>
 8000f02:	9b00      	ldr	r3, [sp, #0]
 8000f04:	469c      	mov	ip, r3
 8000f06:	e741      	b.n	8000d8c <__aeabi_dmul+0x30c>
 8000f08:	4912      	ldr	r1, [pc, #72]	; (8000f54 <__aeabi_dmul+0x4d4>)
 8000f0a:	0022      	movs	r2, r4
 8000f0c:	4461      	add	r1, ip
 8000f0e:	002e      	movs	r6, r5
 8000f10:	408d      	lsls	r5, r1
 8000f12:	408a      	lsls	r2, r1
 8000f14:	40c6      	lsrs	r6, r0
 8000f16:	1e69      	subs	r1, r5, #1
 8000f18:	418d      	sbcs	r5, r1
 8000f1a:	4332      	orrs	r2, r6
 8000f1c:	432a      	orrs	r2, r5
 8000f1e:	40c4      	lsrs	r4, r0
 8000f20:	0753      	lsls	r3, r2, #29
 8000f22:	d0b6      	beq.n	8000e92 <__aeabi_dmul+0x412>
 8000f24:	210f      	movs	r1, #15
 8000f26:	4011      	ands	r1, r2
 8000f28:	2904      	cmp	r1, #4
 8000f2a:	d1ac      	bne.n	8000e86 <__aeabi_dmul+0x406>
 8000f2c:	e7b1      	b.n	8000e92 <__aeabi_dmul+0x412>
 8000f2e:	0765      	lsls	r5, r4, #29
 8000f30:	0264      	lsls	r4, r4, #9
 8000f32:	0b24      	lsrs	r4, r4, #12
 8000f34:	08d2      	lsrs	r2, r2, #3
 8000f36:	4315      	orrs	r5, r2
 8000f38:	2200      	movs	r2, #0
 8000f3a:	e611      	b.n	8000b60 <__aeabi_dmul+0xe0>
 8000f3c:	2280      	movs	r2, #128	; 0x80
 8000f3e:	0312      	lsls	r2, r2, #12
 8000f40:	4314      	orrs	r4, r2
 8000f42:	0324      	lsls	r4, r4, #12
 8000f44:	4a01      	ldr	r2, [pc, #4]	; (8000f4c <__aeabi_dmul+0x4cc>)
 8000f46:	0b24      	lsrs	r4, r4, #12
 8000f48:	e60a      	b.n	8000b60 <__aeabi_dmul+0xe0>
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	000007ff 	.word	0x000007ff
 8000f50:	0000043e 	.word	0x0000043e
 8000f54:	0000041e 	.word	0x0000041e

08000f58 <__aeabi_dsub>:
 8000f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f5a:	4657      	mov	r7, sl
 8000f5c:	464e      	mov	r6, r9
 8000f5e:	4645      	mov	r5, r8
 8000f60:	46de      	mov	lr, fp
 8000f62:	0004      	movs	r4, r0
 8000f64:	b5e0      	push	{r5, r6, r7, lr}
 8000f66:	001f      	movs	r7, r3
 8000f68:	0010      	movs	r0, r2
 8000f6a:	030b      	lsls	r3, r1, #12
 8000f6c:	0f62      	lsrs	r2, r4, #29
 8000f6e:	004e      	lsls	r6, r1, #1
 8000f70:	0fcd      	lsrs	r5, r1, #31
 8000f72:	0a5b      	lsrs	r3, r3, #9
 8000f74:	0339      	lsls	r1, r7, #12
 8000f76:	4313      	orrs	r3, r2
 8000f78:	0a49      	lsrs	r1, r1, #9
 8000f7a:	00e2      	lsls	r2, r4, #3
 8000f7c:	0f44      	lsrs	r4, r0, #29
 8000f7e:	4321      	orrs	r1, r4
 8000f80:	4cc2      	ldr	r4, [pc, #776]	; (800128c <__aeabi_dsub+0x334>)
 8000f82:	4691      	mov	r9, r2
 8000f84:	4692      	mov	sl, r2
 8000f86:	00c0      	lsls	r0, r0, #3
 8000f88:	007a      	lsls	r2, r7, #1
 8000f8a:	4680      	mov	r8, r0
 8000f8c:	0d76      	lsrs	r6, r6, #21
 8000f8e:	0d52      	lsrs	r2, r2, #21
 8000f90:	0fff      	lsrs	r7, r7, #31
 8000f92:	42a2      	cmp	r2, r4
 8000f94:	d100      	bne.n	8000f98 <__aeabi_dsub+0x40>
 8000f96:	e0b4      	b.n	8001102 <__aeabi_dsub+0x1aa>
 8000f98:	2401      	movs	r4, #1
 8000f9a:	4067      	eors	r7, r4
 8000f9c:	46bb      	mov	fp, r7
 8000f9e:	42bd      	cmp	r5, r7
 8000fa0:	d100      	bne.n	8000fa4 <__aeabi_dsub+0x4c>
 8000fa2:	e088      	b.n	80010b6 <__aeabi_dsub+0x15e>
 8000fa4:	1ab4      	subs	r4, r6, r2
 8000fa6:	46a4      	mov	ip, r4
 8000fa8:	2c00      	cmp	r4, #0
 8000faa:	dc00      	bgt.n	8000fae <__aeabi_dsub+0x56>
 8000fac:	e0b2      	b.n	8001114 <__aeabi_dsub+0x1bc>
 8000fae:	2a00      	cmp	r2, #0
 8000fb0:	d100      	bne.n	8000fb4 <__aeabi_dsub+0x5c>
 8000fb2:	e0c5      	b.n	8001140 <__aeabi_dsub+0x1e8>
 8000fb4:	4ab5      	ldr	r2, [pc, #724]	; (800128c <__aeabi_dsub+0x334>)
 8000fb6:	4296      	cmp	r6, r2
 8000fb8:	d100      	bne.n	8000fbc <__aeabi_dsub+0x64>
 8000fba:	e28b      	b.n	80014d4 <__aeabi_dsub+0x57c>
 8000fbc:	2280      	movs	r2, #128	; 0x80
 8000fbe:	0412      	lsls	r2, r2, #16
 8000fc0:	4311      	orrs	r1, r2
 8000fc2:	4662      	mov	r2, ip
 8000fc4:	2a38      	cmp	r2, #56	; 0x38
 8000fc6:	dd00      	ble.n	8000fca <__aeabi_dsub+0x72>
 8000fc8:	e1a1      	b.n	800130e <__aeabi_dsub+0x3b6>
 8000fca:	2a1f      	cmp	r2, #31
 8000fcc:	dd00      	ble.n	8000fd0 <__aeabi_dsub+0x78>
 8000fce:	e216      	b.n	80013fe <__aeabi_dsub+0x4a6>
 8000fd0:	2720      	movs	r7, #32
 8000fd2:	000c      	movs	r4, r1
 8000fd4:	1abf      	subs	r7, r7, r2
 8000fd6:	40bc      	lsls	r4, r7
 8000fd8:	0002      	movs	r2, r0
 8000fda:	46a0      	mov	r8, r4
 8000fdc:	4664      	mov	r4, ip
 8000fde:	40b8      	lsls	r0, r7
 8000fe0:	40e2      	lsrs	r2, r4
 8000fe2:	4644      	mov	r4, r8
 8000fe4:	4314      	orrs	r4, r2
 8000fe6:	0002      	movs	r2, r0
 8000fe8:	1e50      	subs	r0, r2, #1
 8000fea:	4182      	sbcs	r2, r0
 8000fec:	4660      	mov	r0, ip
 8000fee:	40c1      	lsrs	r1, r0
 8000ff0:	4322      	orrs	r2, r4
 8000ff2:	1a5b      	subs	r3, r3, r1
 8000ff4:	4649      	mov	r1, r9
 8000ff6:	1a8c      	subs	r4, r1, r2
 8000ff8:	45a1      	cmp	r9, r4
 8000ffa:	4192      	sbcs	r2, r2
 8000ffc:	4252      	negs	r2, r2
 8000ffe:	1a9b      	subs	r3, r3, r2
 8001000:	4698      	mov	r8, r3
 8001002:	4643      	mov	r3, r8
 8001004:	021b      	lsls	r3, r3, #8
 8001006:	d400      	bmi.n	800100a <__aeabi_dsub+0xb2>
 8001008:	e117      	b.n	800123a <__aeabi_dsub+0x2e2>
 800100a:	4643      	mov	r3, r8
 800100c:	025b      	lsls	r3, r3, #9
 800100e:	0a5b      	lsrs	r3, r3, #9
 8001010:	4698      	mov	r8, r3
 8001012:	4643      	mov	r3, r8
 8001014:	2b00      	cmp	r3, #0
 8001016:	d100      	bne.n	800101a <__aeabi_dsub+0xc2>
 8001018:	e16c      	b.n	80012f4 <__aeabi_dsub+0x39c>
 800101a:	4640      	mov	r0, r8
 800101c:	f000 fba6 	bl	800176c <__clzsi2>
 8001020:	0002      	movs	r2, r0
 8001022:	3a08      	subs	r2, #8
 8001024:	2120      	movs	r1, #32
 8001026:	0020      	movs	r0, r4
 8001028:	4643      	mov	r3, r8
 800102a:	1a89      	subs	r1, r1, r2
 800102c:	4093      	lsls	r3, r2
 800102e:	40c8      	lsrs	r0, r1
 8001030:	4094      	lsls	r4, r2
 8001032:	4303      	orrs	r3, r0
 8001034:	4296      	cmp	r6, r2
 8001036:	dd00      	ble.n	800103a <__aeabi_dsub+0xe2>
 8001038:	e157      	b.n	80012ea <__aeabi_dsub+0x392>
 800103a:	1b96      	subs	r6, r2, r6
 800103c:	1c71      	adds	r1, r6, #1
 800103e:	291f      	cmp	r1, #31
 8001040:	dd00      	ble.n	8001044 <__aeabi_dsub+0xec>
 8001042:	e1cb      	b.n	80013dc <__aeabi_dsub+0x484>
 8001044:	2220      	movs	r2, #32
 8001046:	0018      	movs	r0, r3
 8001048:	0026      	movs	r6, r4
 800104a:	1a52      	subs	r2, r2, r1
 800104c:	4094      	lsls	r4, r2
 800104e:	4090      	lsls	r0, r2
 8001050:	40ce      	lsrs	r6, r1
 8001052:	40cb      	lsrs	r3, r1
 8001054:	1e62      	subs	r2, r4, #1
 8001056:	4194      	sbcs	r4, r2
 8001058:	4330      	orrs	r0, r6
 800105a:	4698      	mov	r8, r3
 800105c:	2600      	movs	r6, #0
 800105e:	4304      	orrs	r4, r0
 8001060:	0763      	lsls	r3, r4, #29
 8001062:	d009      	beq.n	8001078 <__aeabi_dsub+0x120>
 8001064:	230f      	movs	r3, #15
 8001066:	4023      	ands	r3, r4
 8001068:	2b04      	cmp	r3, #4
 800106a:	d005      	beq.n	8001078 <__aeabi_dsub+0x120>
 800106c:	1d23      	adds	r3, r4, #4
 800106e:	42a3      	cmp	r3, r4
 8001070:	41a4      	sbcs	r4, r4
 8001072:	4264      	negs	r4, r4
 8001074:	44a0      	add	r8, r4
 8001076:	001c      	movs	r4, r3
 8001078:	4643      	mov	r3, r8
 800107a:	021b      	lsls	r3, r3, #8
 800107c:	d400      	bmi.n	8001080 <__aeabi_dsub+0x128>
 800107e:	e0df      	b.n	8001240 <__aeabi_dsub+0x2e8>
 8001080:	4b82      	ldr	r3, [pc, #520]	; (800128c <__aeabi_dsub+0x334>)
 8001082:	3601      	adds	r6, #1
 8001084:	429e      	cmp	r6, r3
 8001086:	d100      	bne.n	800108a <__aeabi_dsub+0x132>
 8001088:	e0fb      	b.n	8001282 <__aeabi_dsub+0x32a>
 800108a:	4642      	mov	r2, r8
 800108c:	4b80      	ldr	r3, [pc, #512]	; (8001290 <__aeabi_dsub+0x338>)
 800108e:	08e4      	lsrs	r4, r4, #3
 8001090:	401a      	ands	r2, r3
 8001092:	0013      	movs	r3, r2
 8001094:	0571      	lsls	r1, r6, #21
 8001096:	0752      	lsls	r2, r2, #29
 8001098:	025b      	lsls	r3, r3, #9
 800109a:	4322      	orrs	r2, r4
 800109c:	0b1b      	lsrs	r3, r3, #12
 800109e:	0d49      	lsrs	r1, r1, #21
 80010a0:	0509      	lsls	r1, r1, #20
 80010a2:	07ed      	lsls	r5, r5, #31
 80010a4:	4319      	orrs	r1, r3
 80010a6:	4329      	orrs	r1, r5
 80010a8:	0010      	movs	r0, r2
 80010aa:	bcf0      	pop	{r4, r5, r6, r7}
 80010ac:	46bb      	mov	fp, r7
 80010ae:	46b2      	mov	sl, r6
 80010b0:	46a9      	mov	r9, r5
 80010b2:	46a0      	mov	r8, r4
 80010b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010b6:	1ab4      	subs	r4, r6, r2
 80010b8:	46a4      	mov	ip, r4
 80010ba:	2c00      	cmp	r4, #0
 80010bc:	dd58      	ble.n	8001170 <__aeabi_dsub+0x218>
 80010be:	2a00      	cmp	r2, #0
 80010c0:	d100      	bne.n	80010c4 <__aeabi_dsub+0x16c>
 80010c2:	e09e      	b.n	8001202 <__aeabi_dsub+0x2aa>
 80010c4:	4a71      	ldr	r2, [pc, #452]	; (800128c <__aeabi_dsub+0x334>)
 80010c6:	4296      	cmp	r6, r2
 80010c8:	d100      	bne.n	80010cc <__aeabi_dsub+0x174>
 80010ca:	e13b      	b.n	8001344 <__aeabi_dsub+0x3ec>
 80010cc:	2280      	movs	r2, #128	; 0x80
 80010ce:	0412      	lsls	r2, r2, #16
 80010d0:	4311      	orrs	r1, r2
 80010d2:	4662      	mov	r2, ip
 80010d4:	2a38      	cmp	r2, #56	; 0x38
 80010d6:	dd00      	ble.n	80010da <__aeabi_dsub+0x182>
 80010d8:	e0c1      	b.n	800125e <__aeabi_dsub+0x306>
 80010da:	2a1f      	cmp	r2, #31
 80010dc:	dc00      	bgt.n	80010e0 <__aeabi_dsub+0x188>
 80010de:	e1bb      	b.n	8001458 <__aeabi_dsub+0x500>
 80010e0:	000c      	movs	r4, r1
 80010e2:	3a20      	subs	r2, #32
 80010e4:	40d4      	lsrs	r4, r2
 80010e6:	0022      	movs	r2, r4
 80010e8:	4664      	mov	r4, ip
 80010ea:	2c20      	cmp	r4, #32
 80010ec:	d004      	beq.n	80010f8 <__aeabi_dsub+0x1a0>
 80010ee:	2740      	movs	r7, #64	; 0x40
 80010f0:	1b3f      	subs	r7, r7, r4
 80010f2:	40b9      	lsls	r1, r7
 80010f4:	4308      	orrs	r0, r1
 80010f6:	4680      	mov	r8, r0
 80010f8:	4644      	mov	r4, r8
 80010fa:	1e61      	subs	r1, r4, #1
 80010fc:	418c      	sbcs	r4, r1
 80010fe:	4314      	orrs	r4, r2
 8001100:	e0b1      	b.n	8001266 <__aeabi_dsub+0x30e>
 8001102:	000c      	movs	r4, r1
 8001104:	4304      	orrs	r4, r0
 8001106:	d02a      	beq.n	800115e <__aeabi_dsub+0x206>
 8001108:	46bb      	mov	fp, r7
 800110a:	42bd      	cmp	r5, r7
 800110c:	d02d      	beq.n	800116a <__aeabi_dsub+0x212>
 800110e:	4c61      	ldr	r4, [pc, #388]	; (8001294 <__aeabi_dsub+0x33c>)
 8001110:	46a4      	mov	ip, r4
 8001112:	44b4      	add	ip, r6
 8001114:	4664      	mov	r4, ip
 8001116:	2c00      	cmp	r4, #0
 8001118:	d05c      	beq.n	80011d4 <__aeabi_dsub+0x27c>
 800111a:	1b94      	subs	r4, r2, r6
 800111c:	46a4      	mov	ip, r4
 800111e:	2e00      	cmp	r6, #0
 8001120:	d000      	beq.n	8001124 <__aeabi_dsub+0x1cc>
 8001122:	e115      	b.n	8001350 <__aeabi_dsub+0x3f8>
 8001124:	464d      	mov	r5, r9
 8001126:	431d      	orrs	r5, r3
 8001128:	d100      	bne.n	800112c <__aeabi_dsub+0x1d4>
 800112a:	e1c3      	b.n	80014b4 <__aeabi_dsub+0x55c>
 800112c:	1e65      	subs	r5, r4, #1
 800112e:	2c01      	cmp	r4, #1
 8001130:	d100      	bne.n	8001134 <__aeabi_dsub+0x1dc>
 8001132:	e20c      	b.n	800154e <__aeabi_dsub+0x5f6>
 8001134:	4e55      	ldr	r6, [pc, #340]	; (800128c <__aeabi_dsub+0x334>)
 8001136:	42b4      	cmp	r4, r6
 8001138:	d100      	bne.n	800113c <__aeabi_dsub+0x1e4>
 800113a:	e1f8      	b.n	800152e <__aeabi_dsub+0x5d6>
 800113c:	46ac      	mov	ip, r5
 800113e:	e10e      	b.n	800135e <__aeabi_dsub+0x406>
 8001140:	000a      	movs	r2, r1
 8001142:	4302      	orrs	r2, r0
 8001144:	d100      	bne.n	8001148 <__aeabi_dsub+0x1f0>
 8001146:	e136      	b.n	80013b6 <__aeabi_dsub+0x45e>
 8001148:	0022      	movs	r2, r4
 800114a:	3a01      	subs	r2, #1
 800114c:	2c01      	cmp	r4, #1
 800114e:	d100      	bne.n	8001152 <__aeabi_dsub+0x1fa>
 8001150:	e1c6      	b.n	80014e0 <__aeabi_dsub+0x588>
 8001152:	4c4e      	ldr	r4, [pc, #312]	; (800128c <__aeabi_dsub+0x334>)
 8001154:	45a4      	cmp	ip, r4
 8001156:	d100      	bne.n	800115a <__aeabi_dsub+0x202>
 8001158:	e0f4      	b.n	8001344 <__aeabi_dsub+0x3ec>
 800115a:	4694      	mov	ip, r2
 800115c:	e731      	b.n	8000fc2 <__aeabi_dsub+0x6a>
 800115e:	2401      	movs	r4, #1
 8001160:	4067      	eors	r7, r4
 8001162:	46bb      	mov	fp, r7
 8001164:	42bd      	cmp	r5, r7
 8001166:	d000      	beq.n	800116a <__aeabi_dsub+0x212>
 8001168:	e71c      	b.n	8000fa4 <__aeabi_dsub+0x4c>
 800116a:	4c4a      	ldr	r4, [pc, #296]	; (8001294 <__aeabi_dsub+0x33c>)
 800116c:	46a4      	mov	ip, r4
 800116e:	44b4      	add	ip, r6
 8001170:	4664      	mov	r4, ip
 8001172:	2c00      	cmp	r4, #0
 8001174:	d100      	bne.n	8001178 <__aeabi_dsub+0x220>
 8001176:	e0cf      	b.n	8001318 <__aeabi_dsub+0x3c0>
 8001178:	1b94      	subs	r4, r2, r6
 800117a:	46a4      	mov	ip, r4
 800117c:	2e00      	cmp	r6, #0
 800117e:	d100      	bne.n	8001182 <__aeabi_dsub+0x22a>
 8001180:	e15c      	b.n	800143c <__aeabi_dsub+0x4e4>
 8001182:	4e42      	ldr	r6, [pc, #264]	; (800128c <__aeabi_dsub+0x334>)
 8001184:	42b2      	cmp	r2, r6
 8001186:	d100      	bne.n	800118a <__aeabi_dsub+0x232>
 8001188:	e1ec      	b.n	8001564 <__aeabi_dsub+0x60c>
 800118a:	2680      	movs	r6, #128	; 0x80
 800118c:	0436      	lsls	r6, r6, #16
 800118e:	4333      	orrs	r3, r6
 8001190:	4664      	mov	r4, ip
 8001192:	2c38      	cmp	r4, #56	; 0x38
 8001194:	dd00      	ble.n	8001198 <__aeabi_dsub+0x240>
 8001196:	e1b3      	b.n	8001500 <__aeabi_dsub+0x5a8>
 8001198:	2c1f      	cmp	r4, #31
 800119a:	dd00      	ble.n	800119e <__aeabi_dsub+0x246>
 800119c:	e238      	b.n	8001610 <__aeabi_dsub+0x6b8>
 800119e:	2620      	movs	r6, #32
 80011a0:	1b36      	subs	r6, r6, r4
 80011a2:	001c      	movs	r4, r3
 80011a4:	40b4      	lsls	r4, r6
 80011a6:	464f      	mov	r7, r9
 80011a8:	46a0      	mov	r8, r4
 80011aa:	4664      	mov	r4, ip
 80011ac:	40e7      	lsrs	r7, r4
 80011ae:	4644      	mov	r4, r8
 80011b0:	433c      	orrs	r4, r7
 80011b2:	464f      	mov	r7, r9
 80011b4:	40b7      	lsls	r7, r6
 80011b6:	003e      	movs	r6, r7
 80011b8:	1e77      	subs	r7, r6, #1
 80011ba:	41be      	sbcs	r6, r7
 80011bc:	4334      	orrs	r4, r6
 80011be:	4666      	mov	r6, ip
 80011c0:	40f3      	lsrs	r3, r6
 80011c2:	18c9      	adds	r1, r1, r3
 80011c4:	1824      	adds	r4, r4, r0
 80011c6:	4284      	cmp	r4, r0
 80011c8:	419b      	sbcs	r3, r3
 80011ca:	425b      	negs	r3, r3
 80011cc:	4698      	mov	r8, r3
 80011ce:	0016      	movs	r6, r2
 80011d0:	4488      	add	r8, r1
 80011d2:	e04e      	b.n	8001272 <__aeabi_dsub+0x31a>
 80011d4:	4a30      	ldr	r2, [pc, #192]	; (8001298 <__aeabi_dsub+0x340>)
 80011d6:	1c74      	adds	r4, r6, #1
 80011d8:	4214      	tst	r4, r2
 80011da:	d000      	beq.n	80011de <__aeabi_dsub+0x286>
 80011dc:	e0d6      	b.n	800138c <__aeabi_dsub+0x434>
 80011de:	464a      	mov	r2, r9
 80011e0:	431a      	orrs	r2, r3
 80011e2:	2e00      	cmp	r6, #0
 80011e4:	d000      	beq.n	80011e8 <__aeabi_dsub+0x290>
 80011e6:	e15b      	b.n	80014a0 <__aeabi_dsub+0x548>
 80011e8:	2a00      	cmp	r2, #0
 80011ea:	d100      	bne.n	80011ee <__aeabi_dsub+0x296>
 80011ec:	e1a5      	b.n	800153a <__aeabi_dsub+0x5e2>
 80011ee:	000a      	movs	r2, r1
 80011f0:	4302      	orrs	r2, r0
 80011f2:	d000      	beq.n	80011f6 <__aeabi_dsub+0x29e>
 80011f4:	e1bb      	b.n	800156e <__aeabi_dsub+0x616>
 80011f6:	464a      	mov	r2, r9
 80011f8:	0759      	lsls	r1, r3, #29
 80011fa:	08d2      	lsrs	r2, r2, #3
 80011fc:	430a      	orrs	r2, r1
 80011fe:	08db      	lsrs	r3, r3, #3
 8001200:	e027      	b.n	8001252 <__aeabi_dsub+0x2fa>
 8001202:	000a      	movs	r2, r1
 8001204:	4302      	orrs	r2, r0
 8001206:	d100      	bne.n	800120a <__aeabi_dsub+0x2b2>
 8001208:	e174      	b.n	80014f4 <__aeabi_dsub+0x59c>
 800120a:	0022      	movs	r2, r4
 800120c:	3a01      	subs	r2, #1
 800120e:	2c01      	cmp	r4, #1
 8001210:	d005      	beq.n	800121e <__aeabi_dsub+0x2c6>
 8001212:	4c1e      	ldr	r4, [pc, #120]	; (800128c <__aeabi_dsub+0x334>)
 8001214:	45a4      	cmp	ip, r4
 8001216:	d100      	bne.n	800121a <__aeabi_dsub+0x2c2>
 8001218:	e094      	b.n	8001344 <__aeabi_dsub+0x3ec>
 800121a:	4694      	mov	ip, r2
 800121c:	e759      	b.n	80010d2 <__aeabi_dsub+0x17a>
 800121e:	4448      	add	r0, r9
 8001220:	4548      	cmp	r0, r9
 8001222:	4192      	sbcs	r2, r2
 8001224:	185b      	adds	r3, r3, r1
 8001226:	4698      	mov	r8, r3
 8001228:	0004      	movs	r4, r0
 800122a:	4252      	negs	r2, r2
 800122c:	4490      	add	r8, r2
 800122e:	4643      	mov	r3, r8
 8001230:	2602      	movs	r6, #2
 8001232:	021b      	lsls	r3, r3, #8
 8001234:	d500      	bpl.n	8001238 <__aeabi_dsub+0x2e0>
 8001236:	e0c4      	b.n	80013c2 <__aeabi_dsub+0x46a>
 8001238:	3e01      	subs	r6, #1
 800123a:	0763      	lsls	r3, r4, #29
 800123c:	d000      	beq.n	8001240 <__aeabi_dsub+0x2e8>
 800123e:	e711      	b.n	8001064 <__aeabi_dsub+0x10c>
 8001240:	4643      	mov	r3, r8
 8001242:	46b4      	mov	ip, r6
 8001244:	0759      	lsls	r1, r3, #29
 8001246:	08e2      	lsrs	r2, r4, #3
 8001248:	430a      	orrs	r2, r1
 800124a:	08db      	lsrs	r3, r3, #3
 800124c:	490f      	ldr	r1, [pc, #60]	; (800128c <__aeabi_dsub+0x334>)
 800124e:	458c      	cmp	ip, r1
 8001250:	d040      	beq.n	80012d4 <__aeabi_dsub+0x37c>
 8001252:	4661      	mov	r1, ip
 8001254:	031b      	lsls	r3, r3, #12
 8001256:	0549      	lsls	r1, r1, #21
 8001258:	0b1b      	lsrs	r3, r3, #12
 800125a:	0d49      	lsrs	r1, r1, #21
 800125c:	e720      	b.n	80010a0 <__aeabi_dsub+0x148>
 800125e:	4301      	orrs	r1, r0
 8001260:	000c      	movs	r4, r1
 8001262:	1e61      	subs	r1, r4, #1
 8001264:	418c      	sbcs	r4, r1
 8001266:	444c      	add	r4, r9
 8001268:	454c      	cmp	r4, r9
 800126a:	4192      	sbcs	r2, r2
 800126c:	4252      	negs	r2, r2
 800126e:	4690      	mov	r8, r2
 8001270:	4498      	add	r8, r3
 8001272:	4643      	mov	r3, r8
 8001274:	021b      	lsls	r3, r3, #8
 8001276:	d5e0      	bpl.n	800123a <__aeabi_dsub+0x2e2>
 8001278:	4b04      	ldr	r3, [pc, #16]	; (800128c <__aeabi_dsub+0x334>)
 800127a:	3601      	adds	r6, #1
 800127c:	429e      	cmp	r6, r3
 800127e:	d000      	beq.n	8001282 <__aeabi_dsub+0x32a>
 8001280:	e09f      	b.n	80013c2 <__aeabi_dsub+0x46a>
 8001282:	0031      	movs	r1, r6
 8001284:	2300      	movs	r3, #0
 8001286:	2200      	movs	r2, #0
 8001288:	e70a      	b.n	80010a0 <__aeabi_dsub+0x148>
 800128a:	46c0      	nop			; (mov r8, r8)
 800128c:	000007ff 	.word	0x000007ff
 8001290:	ff7fffff 	.word	0xff7fffff
 8001294:	fffff801 	.word	0xfffff801
 8001298:	000007fe 	.word	0x000007fe
 800129c:	2a00      	cmp	r2, #0
 800129e:	d100      	bne.n	80012a2 <__aeabi_dsub+0x34a>
 80012a0:	e160      	b.n	8001564 <__aeabi_dsub+0x60c>
 80012a2:	000a      	movs	r2, r1
 80012a4:	4302      	orrs	r2, r0
 80012a6:	d04d      	beq.n	8001344 <__aeabi_dsub+0x3ec>
 80012a8:	464a      	mov	r2, r9
 80012aa:	075c      	lsls	r4, r3, #29
 80012ac:	08d2      	lsrs	r2, r2, #3
 80012ae:	4322      	orrs	r2, r4
 80012b0:	2480      	movs	r4, #128	; 0x80
 80012b2:	08db      	lsrs	r3, r3, #3
 80012b4:	0324      	lsls	r4, r4, #12
 80012b6:	4223      	tst	r3, r4
 80012b8:	d007      	beq.n	80012ca <__aeabi_dsub+0x372>
 80012ba:	08ce      	lsrs	r6, r1, #3
 80012bc:	4226      	tst	r6, r4
 80012be:	d104      	bne.n	80012ca <__aeabi_dsub+0x372>
 80012c0:	465d      	mov	r5, fp
 80012c2:	0033      	movs	r3, r6
 80012c4:	08c2      	lsrs	r2, r0, #3
 80012c6:	0749      	lsls	r1, r1, #29
 80012c8:	430a      	orrs	r2, r1
 80012ca:	0f51      	lsrs	r1, r2, #29
 80012cc:	00d2      	lsls	r2, r2, #3
 80012ce:	08d2      	lsrs	r2, r2, #3
 80012d0:	0749      	lsls	r1, r1, #29
 80012d2:	430a      	orrs	r2, r1
 80012d4:	0011      	movs	r1, r2
 80012d6:	4319      	orrs	r1, r3
 80012d8:	d100      	bne.n	80012dc <__aeabi_dsub+0x384>
 80012da:	e1c8      	b.n	800166e <__aeabi_dsub+0x716>
 80012dc:	2180      	movs	r1, #128	; 0x80
 80012de:	0309      	lsls	r1, r1, #12
 80012e0:	430b      	orrs	r3, r1
 80012e2:	031b      	lsls	r3, r3, #12
 80012e4:	49d5      	ldr	r1, [pc, #852]	; (800163c <__aeabi_dsub+0x6e4>)
 80012e6:	0b1b      	lsrs	r3, r3, #12
 80012e8:	e6da      	b.n	80010a0 <__aeabi_dsub+0x148>
 80012ea:	49d5      	ldr	r1, [pc, #852]	; (8001640 <__aeabi_dsub+0x6e8>)
 80012ec:	1ab6      	subs	r6, r6, r2
 80012ee:	400b      	ands	r3, r1
 80012f0:	4698      	mov	r8, r3
 80012f2:	e6b5      	b.n	8001060 <__aeabi_dsub+0x108>
 80012f4:	0020      	movs	r0, r4
 80012f6:	f000 fa39 	bl	800176c <__clzsi2>
 80012fa:	0002      	movs	r2, r0
 80012fc:	3218      	adds	r2, #24
 80012fe:	2a1f      	cmp	r2, #31
 8001300:	dc00      	bgt.n	8001304 <__aeabi_dsub+0x3ac>
 8001302:	e68f      	b.n	8001024 <__aeabi_dsub+0xcc>
 8001304:	0023      	movs	r3, r4
 8001306:	3808      	subs	r0, #8
 8001308:	4083      	lsls	r3, r0
 800130a:	2400      	movs	r4, #0
 800130c:	e692      	b.n	8001034 <__aeabi_dsub+0xdc>
 800130e:	4308      	orrs	r0, r1
 8001310:	0002      	movs	r2, r0
 8001312:	1e50      	subs	r0, r2, #1
 8001314:	4182      	sbcs	r2, r0
 8001316:	e66d      	b.n	8000ff4 <__aeabi_dsub+0x9c>
 8001318:	4cca      	ldr	r4, [pc, #808]	; (8001644 <__aeabi_dsub+0x6ec>)
 800131a:	1c72      	adds	r2, r6, #1
 800131c:	4222      	tst	r2, r4
 800131e:	d000      	beq.n	8001322 <__aeabi_dsub+0x3ca>
 8001320:	e0ad      	b.n	800147e <__aeabi_dsub+0x526>
 8001322:	464a      	mov	r2, r9
 8001324:	431a      	orrs	r2, r3
 8001326:	2e00      	cmp	r6, #0
 8001328:	d1b8      	bne.n	800129c <__aeabi_dsub+0x344>
 800132a:	2a00      	cmp	r2, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_dsub+0x3d8>
 800132e:	e158      	b.n	80015e2 <__aeabi_dsub+0x68a>
 8001330:	000a      	movs	r2, r1
 8001332:	4302      	orrs	r2, r0
 8001334:	d000      	beq.n	8001338 <__aeabi_dsub+0x3e0>
 8001336:	e159      	b.n	80015ec <__aeabi_dsub+0x694>
 8001338:	464a      	mov	r2, r9
 800133a:	0759      	lsls	r1, r3, #29
 800133c:	08d2      	lsrs	r2, r2, #3
 800133e:	430a      	orrs	r2, r1
 8001340:	08db      	lsrs	r3, r3, #3
 8001342:	e786      	b.n	8001252 <__aeabi_dsub+0x2fa>
 8001344:	464a      	mov	r2, r9
 8001346:	0759      	lsls	r1, r3, #29
 8001348:	08d2      	lsrs	r2, r2, #3
 800134a:	430a      	orrs	r2, r1
 800134c:	08db      	lsrs	r3, r3, #3
 800134e:	e7c1      	b.n	80012d4 <__aeabi_dsub+0x37c>
 8001350:	4dba      	ldr	r5, [pc, #744]	; (800163c <__aeabi_dsub+0x6e4>)
 8001352:	42aa      	cmp	r2, r5
 8001354:	d100      	bne.n	8001358 <__aeabi_dsub+0x400>
 8001356:	e11e      	b.n	8001596 <__aeabi_dsub+0x63e>
 8001358:	2580      	movs	r5, #128	; 0x80
 800135a:	042d      	lsls	r5, r5, #16
 800135c:	432b      	orrs	r3, r5
 800135e:	4664      	mov	r4, ip
 8001360:	2c38      	cmp	r4, #56	; 0x38
 8001362:	dc5d      	bgt.n	8001420 <__aeabi_dsub+0x4c8>
 8001364:	2c1f      	cmp	r4, #31
 8001366:	dd00      	ble.n	800136a <__aeabi_dsub+0x412>
 8001368:	e0d0      	b.n	800150c <__aeabi_dsub+0x5b4>
 800136a:	2520      	movs	r5, #32
 800136c:	4667      	mov	r7, ip
 800136e:	1b2d      	subs	r5, r5, r4
 8001370:	464e      	mov	r6, r9
 8001372:	001c      	movs	r4, r3
 8001374:	40fe      	lsrs	r6, r7
 8001376:	40ac      	lsls	r4, r5
 8001378:	4334      	orrs	r4, r6
 800137a:	464e      	mov	r6, r9
 800137c:	40ae      	lsls	r6, r5
 800137e:	0035      	movs	r5, r6
 8001380:	40fb      	lsrs	r3, r7
 8001382:	1e6e      	subs	r6, r5, #1
 8001384:	41b5      	sbcs	r5, r6
 8001386:	1ac9      	subs	r1, r1, r3
 8001388:	432c      	orrs	r4, r5
 800138a:	e04e      	b.n	800142a <__aeabi_dsub+0x4d2>
 800138c:	464a      	mov	r2, r9
 800138e:	1a14      	subs	r4, r2, r0
 8001390:	45a1      	cmp	r9, r4
 8001392:	4192      	sbcs	r2, r2
 8001394:	4252      	negs	r2, r2
 8001396:	4690      	mov	r8, r2
 8001398:	1a5f      	subs	r7, r3, r1
 800139a:	003a      	movs	r2, r7
 800139c:	4647      	mov	r7, r8
 800139e:	1bd2      	subs	r2, r2, r7
 80013a0:	4690      	mov	r8, r2
 80013a2:	0212      	lsls	r2, r2, #8
 80013a4:	d500      	bpl.n	80013a8 <__aeabi_dsub+0x450>
 80013a6:	e08b      	b.n	80014c0 <__aeabi_dsub+0x568>
 80013a8:	4642      	mov	r2, r8
 80013aa:	4322      	orrs	r2, r4
 80013ac:	d000      	beq.n	80013b0 <__aeabi_dsub+0x458>
 80013ae:	e630      	b.n	8001012 <__aeabi_dsub+0xba>
 80013b0:	2300      	movs	r3, #0
 80013b2:	2500      	movs	r5, #0
 80013b4:	e74d      	b.n	8001252 <__aeabi_dsub+0x2fa>
 80013b6:	464a      	mov	r2, r9
 80013b8:	0759      	lsls	r1, r3, #29
 80013ba:	08d2      	lsrs	r2, r2, #3
 80013bc:	430a      	orrs	r2, r1
 80013be:	08db      	lsrs	r3, r3, #3
 80013c0:	e744      	b.n	800124c <__aeabi_dsub+0x2f4>
 80013c2:	4642      	mov	r2, r8
 80013c4:	4b9e      	ldr	r3, [pc, #632]	; (8001640 <__aeabi_dsub+0x6e8>)
 80013c6:	0861      	lsrs	r1, r4, #1
 80013c8:	401a      	ands	r2, r3
 80013ca:	0013      	movs	r3, r2
 80013cc:	2201      	movs	r2, #1
 80013ce:	4014      	ands	r4, r2
 80013d0:	430c      	orrs	r4, r1
 80013d2:	07da      	lsls	r2, r3, #31
 80013d4:	085b      	lsrs	r3, r3, #1
 80013d6:	4698      	mov	r8, r3
 80013d8:	4314      	orrs	r4, r2
 80013da:	e641      	b.n	8001060 <__aeabi_dsub+0x108>
 80013dc:	001a      	movs	r2, r3
 80013de:	3e1f      	subs	r6, #31
 80013e0:	40f2      	lsrs	r2, r6
 80013e2:	0016      	movs	r6, r2
 80013e4:	2920      	cmp	r1, #32
 80013e6:	d003      	beq.n	80013f0 <__aeabi_dsub+0x498>
 80013e8:	2240      	movs	r2, #64	; 0x40
 80013ea:	1a51      	subs	r1, r2, r1
 80013ec:	408b      	lsls	r3, r1
 80013ee:	431c      	orrs	r4, r3
 80013f0:	1e62      	subs	r2, r4, #1
 80013f2:	4194      	sbcs	r4, r2
 80013f4:	2300      	movs	r3, #0
 80013f6:	4334      	orrs	r4, r6
 80013f8:	4698      	mov	r8, r3
 80013fa:	2600      	movs	r6, #0
 80013fc:	e71d      	b.n	800123a <__aeabi_dsub+0x2e2>
 80013fe:	000c      	movs	r4, r1
 8001400:	3a20      	subs	r2, #32
 8001402:	40d4      	lsrs	r4, r2
 8001404:	0022      	movs	r2, r4
 8001406:	4664      	mov	r4, ip
 8001408:	2c20      	cmp	r4, #32
 800140a:	d004      	beq.n	8001416 <__aeabi_dsub+0x4be>
 800140c:	2740      	movs	r7, #64	; 0x40
 800140e:	1b3f      	subs	r7, r7, r4
 8001410:	40b9      	lsls	r1, r7
 8001412:	4308      	orrs	r0, r1
 8001414:	4680      	mov	r8, r0
 8001416:	4644      	mov	r4, r8
 8001418:	1e61      	subs	r1, r4, #1
 800141a:	418c      	sbcs	r4, r1
 800141c:	4322      	orrs	r2, r4
 800141e:	e5e9      	b.n	8000ff4 <__aeabi_dsub+0x9c>
 8001420:	464c      	mov	r4, r9
 8001422:	4323      	orrs	r3, r4
 8001424:	001c      	movs	r4, r3
 8001426:	1e63      	subs	r3, r4, #1
 8001428:	419c      	sbcs	r4, r3
 800142a:	1b04      	subs	r4, r0, r4
 800142c:	42a0      	cmp	r0, r4
 800142e:	419b      	sbcs	r3, r3
 8001430:	425b      	negs	r3, r3
 8001432:	1acb      	subs	r3, r1, r3
 8001434:	4698      	mov	r8, r3
 8001436:	465d      	mov	r5, fp
 8001438:	0016      	movs	r6, r2
 800143a:	e5e2      	b.n	8001002 <__aeabi_dsub+0xaa>
 800143c:	464e      	mov	r6, r9
 800143e:	431e      	orrs	r6, r3
 8001440:	d100      	bne.n	8001444 <__aeabi_dsub+0x4ec>
 8001442:	e0ae      	b.n	80015a2 <__aeabi_dsub+0x64a>
 8001444:	1e66      	subs	r6, r4, #1
 8001446:	2c01      	cmp	r4, #1
 8001448:	d100      	bne.n	800144c <__aeabi_dsub+0x4f4>
 800144a:	e0fd      	b.n	8001648 <__aeabi_dsub+0x6f0>
 800144c:	4f7b      	ldr	r7, [pc, #492]	; (800163c <__aeabi_dsub+0x6e4>)
 800144e:	42bc      	cmp	r4, r7
 8001450:	d100      	bne.n	8001454 <__aeabi_dsub+0x4fc>
 8001452:	e107      	b.n	8001664 <__aeabi_dsub+0x70c>
 8001454:	46b4      	mov	ip, r6
 8001456:	e69b      	b.n	8001190 <__aeabi_dsub+0x238>
 8001458:	4664      	mov	r4, ip
 800145a:	2220      	movs	r2, #32
 800145c:	1b12      	subs	r2, r2, r4
 800145e:	000c      	movs	r4, r1
 8001460:	4094      	lsls	r4, r2
 8001462:	0007      	movs	r7, r0
 8001464:	4090      	lsls	r0, r2
 8001466:	46a0      	mov	r8, r4
 8001468:	4664      	mov	r4, ip
 800146a:	1e42      	subs	r2, r0, #1
 800146c:	4190      	sbcs	r0, r2
 800146e:	4662      	mov	r2, ip
 8001470:	40e7      	lsrs	r7, r4
 8001472:	4644      	mov	r4, r8
 8001474:	40d1      	lsrs	r1, r2
 8001476:	433c      	orrs	r4, r7
 8001478:	4304      	orrs	r4, r0
 800147a:	185b      	adds	r3, r3, r1
 800147c:	e6f3      	b.n	8001266 <__aeabi_dsub+0x30e>
 800147e:	4c6f      	ldr	r4, [pc, #444]	; (800163c <__aeabi_dsub+0x6e4>)
 8001480:	42a2      	cmp	r2, r4
 8001482:	d100      	bne.n	8001486 <__aeabi_dsub+0x52e>
 8001484:	e0d5      	b.n	8001632 <__aeabi_dsub+0x6da>
 8001486:	4448      	add	r0, r9
 8001488:	185b      	adds	r3, r3, r1
 800148a:	4548      	cmp	r0, r9
 800148c:	4189      	sbcs	r1, r1
 800148e:	4249      	negs	r1, r1
 8001490:	185b      	adds	r3, r3, r1
 8001492:	07dc      	lsls	r4, r3, #31
 8001494:	0840      	lsrs	r0, r0, #1
 8001496:	085b      	lsrs	r3, r3, #1
 8001498:	4698      	mov	r8, r3
 800149a:	0016      	movs	r6, r2
 800149c:	4304      	orrs	r4, r0
 800149e:	e6cc      	b.n	800123a <__aeabi_dsub+0x2e2>
 80014a0:	2a00      	cmp	r2, #0
 80014a2:	d000      	beq.n	80014a6 <__aeabi_dsub+0x54e>
 80014a4:	e082      	b.n	80015ac <__aeabi_dsub+0x654>
 80014a6:	000a      	movs	r2, r1
 80014a8:	4302      	orrs	r2, r0
 80014aa:	d140      	bne.n	800152e <__aeabi_dsub+0x5d6>
 80014ac:	2380      	movs	r3, #128	; 0x80
 80014ae:	2500      	movs	r5, #0
 80014b0:	031b      	lsls	r3, r3, #12
 80014b2:	e713      	b.n	80012dc <__aeabi_dsub+0x384>
 80014b4:	074b      	lsls	r3, r1, #29
 80014b6:	08c2      	lsrs	r2, r0, #3
 80014b8:	431a      	orrs	r2, r3
 80014ba:	465d      	mov	r5, fp
 80014bc:	08cb      	lsrs	r3, r1, #3
 80014be:	e6c5      	b.n	800124c <__aeabi_dsub+0x2f4>
 80014c0:	464a      	mov	r2, r9
 80014c2:	1a84      	subs	r4, r0, r2
 80014c4:	42a0      	cmp	r0, r4
 80014c6:	4192      	sbcs	r2, r2
 80014c8:	1acb      	subs	r3, r1, r3
 80014ca:	4252      	negs	r2, r2
 80014cc:	1a9b      	subs	r3, r3, r2
 80014ce:	4698      	mov	r8, r3
 80014d0:	465d      	mov	r5, fp
 80014d2:	e59e      	b.n	8001012 <__aeabi_dsub+0xba>
 80014d4:	464a      	mov	r2, r9
 80014d6:	0759      	lsls	r1, r3, #29
 80014d8:	08d2      	lsrs	r2, r2, #3
 80014da:	430a      	orrs	r2, r1
 80014dc:	08db      	lsrs	r3, r3, #3
 80014de:	e6f9      	b.n	80012d4 <__aeabi_dsub+0x37c>
 80014e0:	464a      	mov	r2, r9
 80014e2:	1a14      	subs	r4, r2, r0
 80014e4:	45a1      	cmp	r9, r4
 80014e6:	4192      	sbcs	r2, r2
 80014e8:	1a5b      	subs	r3, r3, r1
 80014ea:	4252      	negs	r2, r2
 80014ec:	1a9b      	subs	r3, r3, r2
 80014ee:	4698      	mov	r8, r3
 80014f0:	2601      	movs	r6, #1
 80014f2:	e586      	b.n	8001002 <__aeabi_dsub+0xaa>
 80014f4:	464a      	mov	r2, r9
 80014f6:	0759      	lsls	r1, r3, #29
 80014f8:	08d2      	lsrs	r2, r2, #3
 80014fa:	430a      	orrs	r2, r1
 80014fc:	08db      	lsrs	r3, r3, #3
 80014fe:	e6a5      	b.n	800124c <__aeabi_dsub+0x2f4>
 8001500:	464c      	mov	r4, r9
 8001502:	4323      	orrs	r3, r4
 8001504:	001c      	movs	r4, r3
 8001506:	1e63      	subs	r3, r4, #1
 8001508:	419c      	sbcs	r4, r3
 800150a:	e65b      	b.n	80011c4 <__aeabi_dsub+0x26c>
 800150c:	4665      	mov	r5, ip
 800150e:	001e      	movs	r6, r3
 8001510:	3d20      	subs	r5, #32
 8001512:	40ee      	lsrs	r6, r5
 8001514:	2c20      	cmp	r4, #32
 8001516:	d005      	beq.n	8001524 <__aeabi_dsub+0x5cc>
 8001518:	2540      	movs	r5, #64	; 0x40
 800151a:	1b2d      	subs	r5, r5, r4
 800151c:	40ab      	lsls	r3, r5
 800151e:	464c      	mov	r4, r9
 8001520:	431c      	orrs	r4, r3
 8001522:	46a2      	mov	sl, r4
 8001524:	4654      	mov	r4, sl
 8001526:	1e63      	subs	r3, r4, #1
 8001528:	419c      	sbcs	r4, r3
 800152a:	4334      	orrs	r4, r6
 800152c:	e77d      	b.n	800142a <__aeabi_dsub+0x4d2>
 800152e:	074b      	lsls	r3, r1, #29
 8001530:	08c2      	lsrs	r2, r0, #3
 8001532:	431a      	orrs	r2, r3
 8001534:	465d      	mov	r5, fp
 8001536:	08cb      	lsrs	r3, r1, #3
 8001538:	e6cc      	b.n	80012d4 <__aeabi_dsub+0x37c>
 800153a:	000a      	movs	r2, r1
 800153c:	4302      	orrs	r2, r0
 800153e:	d100      	bne.n	8001542 <__aeabi_dsub+0x5ea>
 8001540:	e736      	b.n	80013b0 <__aeabi_dsub+0x458>
 8001542:	074b      	lsls	r3, r1, #29
 8001544:	08c2      	lsrs	r2, r0, #3
 8001546:	431a      	orrs	r2, r3
 8001548:	465d      	mov	r5, fp
 800154a:	08cb      	lsrs	r3, r1, #3
 800154c:	e681      	b.n	8001252 <__aeabi_dsub+0x2fa>
 800154e:	464a      	mov	r2, r9
 8001550:	1a84      	subs	r4, r0, r2
 8001552:	42a0      	cmp	r0, r4
 8001554:	4192      	sbcs	r2, r2
 8001556:	1acb      	subs	r3, r1, r3
 8001558:	4252      	negs	r2, r2
 800155a:	1a9b      	subs	r3, r3, r2
 800155c:	4698      	mov	r8, r3
 800155e:	465d      	mov	r5, fp
 8001560:	2601      	movs	r6, #1
 8001562:	e54e      	b.n	8001002 <__aeabi_dsub+0xaa>
 8001564:	074b      	lsls	r3, r1, #29
 8001566:	08c2      	lsrs	r2, r0, #3
 8001568:	431a      	orrs	r2, r3
 800156a:	08cb      	lsrs	r3, r1, #3
 800156c:	e6b2      	b.n	80012d4 <__aeabi_dsub+0x37c>
 800156e:	464a      	mov	r2, r9
 8001570:	1a14      	subs	r4, r2, r0
 8001572:	45a1      	cmp	r9, r4
 8001574:	4192      	sbcs	r2, r2
 8001576:	1a5f      	subs	r7, r3, r1
 8001578:	4252      	negs	r2, r2
 800157a:	1aba      	subs	r2, r7, r2
 800157c:	4690      	mov	r8, r2
 800157e:	0212      	lsls	r2, r2, #8
 8001580:	d56b      	bpl.n	800165a <__aeabi_dsub+0x702>
 8001582:	464a      	mov	r2, r9
 8001584:	1a84      	subs	r4, r0, r2
 8001586:	42a0      	cmp	r0, r4
 8001588:	4192      	sbcs	r2, r2
 800158a:	1acb      	subs	r3, r1, r3
 800158c:	4252      	negs	r2, r2
 800158e:	1a9b      	subs	r3, r3, r2
 8001590:	4698      	mov	r8, r3
 8001592:	465d      	mov	r5, fp
 8001594:	e564      	b.n	8001060 <__aeabi_dsub+0x108>
 8001596:	074b      	lsls	r3, r1, #29
 8001598:	08c2      	lsrs	r2, r0, #3
 800159a:	431a      	orrs	r2, r3
 800159c:	465d      	mov	r5, fp
 800159e:	08cb      	lsrs	r3, r1, #3
 80015a0:	e698      	b.n	80012d4 <__aeabi_dsub+0x37c>
 80015a2:	074b      	lsls	r3, r1, #29
 80015a4:	08c2      	lsrs	r2, r0, #3
 80015a6:	431a      	orrs	r2, r3
 80015a8:	08cb      	lsrs	r3, r1, #3
 80015aa:	e64f      	b.n	800124c <__aeabi_dsub+0x2f4>
 80015ac:	000a      	movs	r2, r1
 80015ae:	4302      	orrs	r2, r0
 80015b0:	d090      	beq.n	80014d4 <__aeabi_dsub+0x57c>
 80015b2:	464a      	mov	r2, r9
 80015b4:	075c      	lsls	r4, r3, #29
 80015b6:	08d2      	lsrs	r2, r2, #3
 80015b8:	4314      	orrs	r4, r2
 80015ba:	2280      	movs	r2, #128	; 0x80
 80015bc:	08db      	lsrs	r3, r3, #3
 80015be:	0312      	lsls	r2, r2, #12
 80015c0:	4213      	tst	r3, r2
 80015c2:	d008      	beq.n	80015d6 <__aeabi_dsub+0x67e>
 80015c4:	08ce      	lsrs	r6, r1, #3
 80015c6:	4216      	tst	r6, r2
 80015c8:	d105      	bne.n	80015d6 <__aeabi_dsub+0x67e>
 80015ca:	08c0      	lsrs	r0, r0, #3
 80015cc:	0749      	lsls	r1, r1, #29
 80015ce:	4308      	orrs	r0, r1
 80015d0:	0004      	movs	r4, r0
 80015d2:	465d      	mov	r5, fp
 80015d4:	0033      	movs	r3, r6
 80015d6:	0f61      	lsrs	r1, r4, #29
 80015d8:	00e2      	lsls	r2, r4, #3
 80015da:	0749      	lsls	r1, r1, #29
 80015dc:	08d2      	lsrs	r2, r2, #3
 80015de:	430a      	orrs	r2, r1
 80015e0:	e678      	b.n	80012d4 <__aeabi_dsub+0x37c>
 80015e2:	074b      	lsls	r3, r1, #29
 80015e4:	08c2      	lsrs	r2, r0, #3
 80015e6:	431a      	orrs	r2, r3
 80015e8:	08cb      	lsrs	r3, r1, #3
 80015ea:	e632      	b.n	8001252 <__aeabi_dsub+0x2fa>
 80015ec:	4448      	add	r0, r9
 80015ee:	185b      	adds	r3, r3, r1
 80015f0:	4548      	cmp	r0, r9
 80015f2:	4192      	sbcs	r2, r2
 80015f4:	4698      	mov	r8, r3
 80015f6:	4252      	negs	r2, r2
 80015f8:	4490      	add	r8, r2
 80015fa:	4643      	mov	r3, r8
 80015fc:	0004      	movs	r4, r0
 80015fe:	021b      	lsls	r3, r3, #8
 8001600:	d400      	bmi.n	8001604 <__aeabi_dsub+0x6ac>
 8001602:	e61a      	b.n	800123a <__aeabi_dsub+0x2e2>
 8001604:	4642      	mov	r2, r8
 8001606:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <__aeabi_dsub+0x6e8>)
 8001608:	2601      	movs	r6, #1
 800160a:	401a      	ands	r2, r3
 800160c:	4690      	mov	r8, r2
 800160e:	e614      	b.n	800123a <__aeabi_dsub+0x2e2>
 8001610:	4666      	mov	r6, ip
 8001612:	001f      	movs	r7, r3
 8001614:	3e20      	subs	r6, #32
 8001616:	40f7      	lsrs	r7, r6
 8001618:	2c20      	cmp	r4, #32
 800161a:	d005      	beq.n	8001628 <__aeabi_dsub+0x6d0>
 800161c:	2640      	movs	r6, #64	; 0x40
 800161e:	1b36      	subs	r6, r6, r4
 8001620:	40b3      	lsls	r3, r6
 8001622:	464c      	mov	r4, r9
 8001624:	431c      	orrs	r4, r3
 8001626:	46a2      	mov	sl, r4
 8001628:	4654      	mov	r4, sl
 800162a:	1e63      	subs	r3, r4, #1
 800162c:	419c      	sbcs	r4, r3
 800162e:	433c      	orrs	r4, r7
 8001630:	e5c8      	b.n	80011c4 <__aeabi_dsub+0x26c>
 8001632:	0011      	movs	r1, r2
 8001634:	2300      	movs	r3, #0
 8001636:	2200      	movs	r2, #0
 8001638:	e532      	b.n	80010a0 <__aeabi_dsub+0x148>
 800163a:	46c0      	nop			; (mov r8, r8)
 800163c:	000007ff 	.word	0x000007ff
 8001640:	ff7fffff 	.word	0xff7fffff
 8001644:	000007fe 	.word	0x000007fe
 8001648:	464a      	mov	r2, r9
 800164a:	1814      	adds	r4, r2, r0
 800164c:	4284      	cmp	r4, r0
 800164e:	4192      	sbcs	r2, r2
 8001650:	185b      	adds	r3, r3, r1
 8001652:	4698      	mov	r8, r3
 8001654:	4252      	negs	r2, r2
 8001656:	4490      	add	r8, r2
 8001658:	e5e9      	b.n	800122e <__aeabi_dsub+0x2d6>
 800165a:	4642      	mov	r2, r8
 800165c:	4322      	orrs	r2, r4
 800165e:	d100      	bne.n	8001662 <__aeabi_dsub+0x70a>
 8001660:	e6a6      	b.n	80013b0 <__aeabi_dsub+0x458>
 8001662:	e5ea      	b.n	800123a <__aeabi_dsub+0x2e2>
 8001664:	074b      	lsls	r3, r1, #29
 8001666:	08c2      	lsrs	r2, r0, #3
 8001668:	431a      	orrs	r2, r3
 800166a:	08cb      	lsrs	r3, r1, #3
 800166c:	e632      	b.n	80012d4 <__aeabi_dsub+0x37c>
 800166e:	2200      	movs	r2, #0
 8001670:	4901      	ldr	r1, [pc, #4]	; (8001678 <__aeabi_dsub+0x720>)
 8001672:	0013      	movs	r3, r2
 8001674:	e514      	b.n	80010a0 <__aeabi_dsub+0x148>
 8001676:	46c0      	nop			; (mov r8, r8)
 8001678:	000007ff 	.word	0x000007ff

0800167c <__aeabi_i2d>:
 800167c:	b570      	push	{r4, r5, r6, lr}
 800167e:	2800      	cmp	r0, #0
 8001680:	d016      	beq.n	80016b0 <__aeabi_i2d+0x34>
 8001682:	17c3      	asrs	r3, r0, #31
 8001684:	18c5      	adds	r5, r0, r3
 8001686:	405d      	eors	r5, r3
 8001688:	0fc4      	lsrs	r4, r0, #31
 800168a:	0028      	movs	r0, r5
 800168c:	f000 f86e 	bl	800176c <__clzsi2>
 8001690:	4a11      	ldr	r2, [pc, #68]	; (80016d8 <__aeabi_i2d+0x5c>)
 8001692:	1a12      	subs	r2, r2, r0
 8001694:	280a      	cmp	r0, #10
 8001696:	dc16      	bgt.n	80016c6 <__aeabi_i2d+0x4a>
 8001698:	0003      	movs	r3, r0
 800169a:	002e      	movs	r6, r5
 800169c:	3315      	adds	r3, #21
 800169e:	409e      	lsls	r6, r3
 80016a0:	230b      	movs	r3, #11
 80016a2:	1a18      	subs	r0, r3, r0
 80016a4:	40c5      	lsrs	r5, r0
 80016a6:	0553      	lsls	r3, r2, #21
 80016a8:	032d      	lsls	r5, r5, #12
 80016aa:	0b2d      	lsrs	r5, r5, #12
 80016ac:	0d5b      	lsrs	r3, r3, #21
 80016ae:	e003      	b.n	80016b8 <__aeabi_i2d+0x3c>
 80016b0:	2400      	movs	r4, #0
 80016b2:	2300      	movs	r3, #0
 80016b4:	2500      	movs	r5, #0
 80016b6:	2600      	movs	r6, #0
 80016b8:	051b      	lsls	r3, r3, #20
 80016ba:	432b      	orrs	r3, r5
 80016bc:	07e4      	lsls	r4, r4, #31
 80016be:	4323      	orrs	r3, r4
 80016c0:	0030      	movs	r0, r6
 80016c2:	0019      	movs	r1, r3
 80016c4:	bd70      	pop	{r4, r5, r6, pc}
 80016c6:	380b      	subs	r0, #11
 80016c8:	4085      	lsls	r5, r0
 80016ca:	0553      	lsls	r3, r2, #21
 80016cc:	032d      	lsls	r5, r5, #12
 80016ce:	2600      	movs	r6, #0
 80016d0:	0b2d      	lsrs	r5, r5, #12
 80016d2:	0d5b      	lsrs	r3, r3, #21
 80016d4:	e7f0      	b.n	80016b8 <__aeabi_i2d+0x3c>
 80016d6:	46c0      	nop			; (mov r8, r8)
 80016d8:	0000041e 	.word	0x0000041e

080016dc <__aeabi_f2d>:
 80016dc:	b570      	push	{r4, r5, r6, lr}
 80016de:	0043      	lsls	r3, r0, #1
 80016e0:	0246      	lsls	r6, r0, #9
 80016e2:	0fc4      	lsrs	r4, r0, #31
 80016e4:	20fe      	movs	r0, #254	; 0xfe
 80016e6:	0e1b      	lsrs	r3, r3, #24
 80016e8:	1c59      	adds	r1, r3, #1
 80016ea:	0a75      	lsrs	r5, r6, #9
 80016ec:	4208      	tst	r0, r1
 80016ee:	d00c      	beq.n	800170a <__aeabi_f2d+0x2e>
 80016f0:	22e0      	movs	r2, #224	; 0xe0
 80016f2:	0092      	lsls	r2, r2, #2
 80016f4:	4694      	mov	ip, r2
 80016f6:	076d      	lsls	r5, r5, #29
 80016f8:	0b36      	lsrs	r6, r6, #12
 80016fa:	4463      	add	r3, ip
 80016fc:	051b      	lsls	r3, r3, #20
 80016fe:	4333      	orrs	r3, r6
 8001700:	07e4      	lsls	r4, r4, #31
 8001702:	4323      	orrs	r3, r4
 8001704:	0028      	movs	r0, r5
 8001706:	0019      	movs	r1, r3
 8001708:	bd70      	pop	{r4, r5, r6, pc}
 800170a:	2b00      	cmp	r3, #0
 800170c:	d114      	bne.n	8001738 <__aeabi_f2d+0x5c>
 800170e:	2d00      	cmp	r5, #0
 8001710:	d01b      	beq.n	800174a <__aeabi_f2d+0x6e>
 8001712:	0028      	movs	r0, r5
 8001714:	f000 f82a 	bl	800176c <__clzsi2>
 8001718:	280a      	cmp	r0, #10
 800171a:	dc1c      	bgt.n	8001756 <__aeabi_f2d+0x7a>
 800171c:	230b      	movs	r3, #11
 800171e:	002a      	movs	r2, r5
 8001720:	1a1b      	subs	r3, r3, r0
 8001722:	40da      	lsrs	r2, r3
 8001724:	0003      	movs	r3, r0
 8001726:	3315      	adds	r3, #21
 8001728:	409d      	lsls	r5, r3
 800172a:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <__aeabi_f2d+0x88>)
 800172c:	0312      	lsls	r2, r2, #12
 800172e:	1a1b      	subs	r3, r3, r0
 8001730:	055b      	lsls	r3, r3, #21
 8001732:	0b16      	lsrs	r6, r2, #12
 8001734:	0d5b      	lsrs	r3, r3, #21
 8001736:	e7e1      	b.n	80016fc <__aeabi_f2d+0x20>
 8001738:	2d00      	cmp	r5, #0
 800173a:	d009      	beq.n	8001750 <__aeabi_f2d+0x74>
 800173c:	0b32      	lsrs	r2, r6, #12
 800173e:	2680      	movs	r6, #128	; 0x80
 8001740:	0336      	lsls	r6, r6, #12
 8001742:	4b09      	ldr	r3, [pc, #36]	; (8001768 <__aeabi_f2d+0x8c>)
 8001744:	076d      	lsls	r5, r5, #29
 8001746:	4316      	orrs	r6, r2
 8001748:	e7d8      	b.n	80016fc <__aeabi_f2d+0x20>
 800174a:	2300      	movs	r3, #0
 800174c:	2600      	movs	r6, #0
 800174e:	e7d5      	b.n	80016fc <__aeabi_f2d+0x20>
 8001750:	2600      	movs	r6, #0
 8001752:	4b05      	ldr	r3, [pc, #20]	; (8001768 <__aeabi_f2d+0x8c>)
 8001754:	e7d2      	b.n	80016fc <__aeabi_f2d+0x20>
 8001756:	0003      	movs	r3, r0
 8001758:	002a      	movs	r2, r5
 800175a:	3b0b      	subs	r3, #11
 800175c:	409a      	lsls	r2, r3
 800175e:	2500      	movs	r5, #0
 8001760:	e7e3      	b.n	800172a <__aeabi_f2d+0x4e>
 8001762:	46c0      	nop			; (mov r8, r8)
 8001764:	00000389 	.word	0x00000389
 8001768:	000007ff 	.word	0x000007ff

0800176c <__clzsi2>:
 800176c:	211c      	movs	r1, #28
 800176e:	2301      	movs	r3, #1
 8001770:	041b      	lsls	r3, r3, #16
 8001772:	4298      	cmp	r0, r3
 8001774:	d301      	bcc.n	800177a <__clzsi2+0xe>
 8001776:	0c00      	lsrs	r0, r0, #16
 8001778:	3910      	subs	r1, #16
 800177a:	0a1b      	lsrs	r3, r3, #8
 800177c:	4298      	cmp	r0, r3
 800177e:	d301      	bcc.n	8001784 <__clzsi2+0x18>
 8001780:	0a00      	lsrs	r0, r0, #8
 8001782:	3908      	subs	r1, #8
 8001784:	091b      	lsrs	r3, r3, #4
 8001786:	4298      	cmp	r0, r3
 8001788:	d301      	bcc.n	800178e <__clzsi2+0x22>
 800178a:	0900      	lsrs	r0, r0, #4
 800178c:	3904      	subs	r1, #4
 800178e:	a202      	add	r2, pc, #8	; (adr r2, 8001798 <__clzsi2+0x2c>)
 8001790:	5c10      	ldrb	r0, [r2, r0]
 8001792:	1840      	adds	r0, r0, r1
 8001794:	4770      	bx	lr
 8001796:	46c0      	nop			; (mov r8, r8)
 8001798:	02020304 	.word	0x02020304
 800179c:	01010101 	.word	0x01010101
	...

080017a8 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017ae:	1d3b      	adds	r3, r7, #4
 80017b0:	0018      	movs	r0, r3
 80017b2:	230c      	movs	r3, #12
 80017b4:	001a      	movs	r2, r3
 80017b6:	2100      	movs	r1, #0
 80017b8:	f001 fefe 	bl	80035b8 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80017bc:	4b32      	ldr	r3, [pc, #200]	; (8001888 <MX_ADC_Init+0xe0>)
 80017be:	4a33      	ldr	r2, [pc, #204]	; (800188c <MX_ADC_Init+0xe4>)
 80017c0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80017c2:	4b31      	ldr	r3, [pc, #196]	; (8001888 <MX_ADC_Init+0xe0>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80017c8:	4b2f      	ldr	r3, [pc, #188]	; (8001888 <MX_ADC_Init+0xe0>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017ce:	4b2e      	ldr	r3, [pc, #184]	; (8001888 <MX_ADC_Init+0xe0>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80017d4:	4b2c      	ldr	r3, [pc, #176]	; (8001888 <MX_ADC_Init+0xe0>)
 80017d6:	2201      	movs	r2, #1
 80017d8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017da:	4b2b      	ldr	r3, [pc, #172]	; (8001888 <MX_ADC_Init+0xe0>)
 80017dc:	2204      	movs	r2, #4
 80017de:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80017e0:	4b29      	ldr	r3, [pc, #164]	; (8001888 <MX_ADC_Init+0xe0>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80017e6:	4b28      	ldr	r3, [pc, #160]	; (8001888 <MX_ADC_Init+0xe0>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80017ec:	4b26      	ldr	r3, [pc, #152]	; (8001888 <MX_ADC_Init+0xe0>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80017f2:	4b25      	ldr	r3, [pc, #148]	; (8001888 <MX_ADC_Init+0xe0>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017f8:	4b23      	ldr	r3, [pc, #140]	; (8001888 <MX_ADC_Init+0xe0>)
 80017fa:	22c2      	movs	r2, #194	; 0xc2
 80017fc:	32ff      	adds	r2, #255	; 0xff
 80017fe:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001800:	4b21      	ldr	r3, [pc, #132]	; (8001888 <MX_ADC_Init+0xe0>)
 8001802:	2200      	movs	r2, #0
 8001804:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001806:	4b20      	ldr	r3, [pc, #128]	; (8001888 <MX_ADC_Init+0xe0>)
 8001808:	2224      	movs	r2, #36	; 0x24
 800180a:	2100      	movs	r1, #0
 800180c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800180e:	4b1e      	ldr	r3, [pc, #120]	; (8001888 <MX_ADC_Init+0xe0>)
 8001810:	2200      	movs	r2, #0
 8001812:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001814:	4b1c      	ldr	r3, [pc, #112]	; (8001888 <MX_ADC_Init+0xe0>)
 8001816:	0018      	movs	r0, r3
 8001818:	f000 fbd0 	bl	8001fbc <HAL_ADC_Init>
 800181c:	1e03      	subs	r3, r0, #0
 800181e:	d001      	beq.n	8001824 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8001820:	f000 f954 	bl	8001acc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001824:	1d3b      	adds	r3, r7, #4
 8001826:	2201      	movs	r2, #1
 8001828:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800182a:	1d3b      	adds	r3, r7, #4
 800182c:	2280      	movs	r2, #128	; 0x80
 800182e:	0152      	lsls	r2, r2, #5
 8001830:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	2203      	movs	r2, #3
 8001836:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001838:	1d3a      	adds	r2, r7, #4
 800183a:	4b13      	ldr	r3, [pc, #76]	; (8001888 <MX_ADC_Init+0xe0>)
 800183c:	0011      	movs	r1, r2
 800183e:	0018      	movs	r0, r3
 8001840:	f000 fdf4 	bl	800242c <HAL_ADC_ConfigChannel>
 8001844:	1e03      	subs	r3, r0, #0
 8001846:	d001      	beq.n	800184c <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8001848:	f000 f940 	bl	8001acc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800184c:	1d3b      	adds	r3, r7, #4
 800184e:	2202      	movs	r2, #2
 8001850:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001852:	1d3a      	adds	r2, r7, #4
 8001854:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <MX_ADC_Init+0xe0>)
 8001856:	0011      	movs	r1, r2
 8001858:	0018      	movs	r0, r3
 800185a:	f000 fde7 	bl	800242c <HAL_ADC_ConfigChannel>
 800185e:	1e03      	subs	r3, r0, #0
 8001860:	d001      	beq.n	8001866 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8001862:	f000 f933 	bl	8001acc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	2211      	movs	r2, #17
 800186a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800186c:	1d3a      	adds	r2, r7, #4
 800186e:	4b06      	ldr	r3, [pc, #24]	; (8001888 <MX_ADC_Init+0xe0>)
 8001870:	0011      	movs	r1, r2
 8001872:	0018      	movs	r0, r3
 8001874:	f000 fdda 	bl	800242c <HAL_ADC_ConfigChannel>
 8001878:	1e03      	subs	r3, r0, #0
 800187a:	d001      	beq.n	8001880 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 800187c:	f000 f926 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001880:	46c0      	nop			; (mov r8, r8)
 8001882:	46bd      	mov	sp, r7
 8001884:	b004      	add	sp, #16
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20000040 	.word	0x20000040
 800188c:	40012400 	.word	0x40012400

08001890 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001890:	b590      	push	{r4, r7, lr}
 8001892:	b08b      	sub	sp, #44	; 0x2c
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	2414      	movs	r4, #20
 800189a:	193b      	adds	r3, r7, r4
 800189c:	0018      	movs	r0, r3
 800189e:	2314      	movs	r3, #20
 80018a0:	001a      	movs	r2, r3
 80018a2:	2100      	movs	r1, #0
 80018a4:	f001 fe88 	bl	80035b8 <memset>
  if(adcHandle->Instance==ADC1)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a19      	ldr	r2, [pc, #100]	; (8001914 <HAL_ADC_MspInit+0x84>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d12b      	bne.n	800190a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018b2:	4b19      	ldr	r3, [pc, #100]	; (8001918 <HAL_ADC_MspInit+0x88>)
 80018b4:	699a      	ldr	r2, [r3, #24]
 80018b6:	4b18      	ldr	r3, [pc, #96]	; (8001918 <HAL_ADC_MspInit+0x88>)
 80018b8:	2180      	movs	r1, #128	; 0x80
 80018ba:	0089      	lsls	r1, r1, #2
 80018bc:	430a      	orrs	r2, r1
 80018be:	619a      	str	r2, [r3, #24]
 80018c0:	4b15      	ldr	r3, [pc, #84]	; (8001918 <HAL_ADC_MspInit+0x88>)
 80018c2:	699a      	ldr	r2, [r3, #24]
 80018c4:	2380      	movs	r3, #128	; 0x80
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4013      	ands	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ce:	4b12      	ldr	r3, [pc, #72]	; (8001918 <HAL_ADC_MspInit+0x88>)
 80018d0:	695a      	ldr	r2, [r3, #20]
 80018d2:	4b11      	ldr	r3, [pc, #68]	; (8001918 <HAL_ADC_MspInit+0x88>)
 80018d4:	2180      	movs	r1, #128	; 0x80
 80018d6:	0289      	lsls	r1, r1, #10
 80018d8:	430a      	orrs	r2, r1
 80018da:	615a      	str	r2, [r3, #20]
 80018dc:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <HAL_ADC_MspInit+0x88>)
 80018de:	695a      	ldr	r2, [r3, #20]
 80018e0:	2380      	movs	r3, #128	; 0x80
 80018e2:	029b      	lsls	r3, r3, #10
 80018e4:	4013      	ands	r3, r2
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80018ea:	193b      	adds	r3, r7, r4
 80018ec:	2206      	movs	r2, #6
 80018ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018f0:	193b      	adds	r3, r7, r4
 80018f2:	2203      	movs	r2, #3
 80018f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	193b      	adds	r3, r7, r4
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fc:	193a      	adds	r2, r7, r4
 80018fe:	2390      	movs	r3, #144	; 0x90
 8001900:	05db      	lsls	r3, r3, #23
 8001902:	0011      	movs	r1, r2
 8001904:	0018      	movs	r0, r3
 8001906:	f001 f867 	bl	80029d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800190a:	46c0      	nop			; (mov r8, r8)
 800190c:	46bd      	mov	sp, r7
 800190e:	b00b      	add	sp, #44	; 0x2c
 8001910:	bd90      	pop	{r4, r7, pc}
 8001912:	46c0      	nop			; (mov r8, r8)
 8001914:	40012400 	.word	0x40012400
 8001918:	40021000 	.word	0x40021000

0800191c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001922:	1d3b      	adds	r3, r7, #4
 8001924:	0018      	movs	r0, r3
 8001926:	2314      	movs	r3, #20
 8001928:	001a      	movs	r2, r3
 800192a:	2100      	movs	r1, #0
 800192c:	f001 fe44 	bl	80035b8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001930:	4b16      	ldr	r3, [pc, #88]	; (800198c <MX_GPIO_Init+0x70>)
 8001932:	695a      	ldr	r2, [r3, #20]
 8001934:	4b15      	ldr	r3, [pc, #84]	; (800198c <MX_GPIO_Init+0x70>)
 8001936:	2180      	movs	r1, #128	; 0x80
 8001938:	0289      	lsls	r1, r1, #10
 800193a:	430a      	orrs	r2, r1
 800193c:	615a      	str	r2, [r3, #20]
 800193e:	4b13      	ldr	r3, [pc, #76]	; (800198c <MX_GPIO_Init+0x70>)
 8001940:	695a      	ldr	r2, [r3, #20]
 8001942:	2380      	movs	r3, #128	; 0x80
 8001944:	029b      	lsls	r3, r3, #10
 8001946:	4013      	ands	r3, r2
 8001948:	603b      	str	r3, [r7, #0]
 800194a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GAS_Sensor_switch_Pin|GPIO_PIN_11, GPIO_PIN_RESET);
 800194c:	2382      	movs	r3, #130	; 0x82
 800194e:	0119      	lsls	r1, r3, #4
 8001950:	2390      	movs	r3, #144	; 0x90
 8001952:	05db      	lsls	r3, r3, #23
 8001954:	2200      	movs	r2, #0
 8001956:	0018      	movs	r0, r3
 8001958:	f001 f9ae 	bl	8002cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PA11 */
  GPIO_InitStruct.Pin = GAS_Sensor_switch_Pin|GPIO_PIN_11;
 800195c:	1d3b      	adds	r3, r7, #4
 800195e:	2282      	movs	r2, #130	; 0x82
 8001960:	0112      	lsls	r2, r2, #4
 8001962:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001964:	1d3b      	adds	r3, r7, #4
 8001966:	2201      	movs	r2, #1
 8001968:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	1d3b      	adds	r3, r7, #4
 800196c:	2200      	movs	r2, #0
 800196e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001970:	1d3b      	adds	r3, r7, #4
 8001972:	2200      	movs	r2, #0
 8001974:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001976:	1d3a      	adds	r2, r7, #4
 8001978:	2390      	movs	r3, #144	; 0x90
 800197a:	05db      	lsls	r3, r3, #23
 800197c:	0011      	movs	r1, r2
 800197e:	0018      	movs	r0, r3
 8001980:	f001 f82a 	bl	80029d8 <HAL_GPIO_Init>

}
 8001984:	46c0      	nop			; (mov r8, r8)
 8001986:	46bd      	mov	sp, r7
 8001988:	b006      	add	sp, #24
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40021000 	.word	0x40021000

08001990 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001996:	f000 fa89 	bl	8001eac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800199a:	f000 f847 	bl	8001a2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800199e:	f7ff ffbd 	bl	800191c <MX_GPIO_Init>
  MX_ADC_Init();
 80019a2:	f7ff ff01 	bl	80017a8 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
//  HAL_ADC_Start(&hadc);
  volatile uint32_t val = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
  volatile double temp = 0;
 80019aa:	2200      	movs	r2, #0
 80019ac:	2300      	movs	r3, #0
 80019ae:	60ba      	str	r2, [r7, #8]
 80019b0:	60fb      	str	r3, [r7, #12]
  volatile double temp2 = 0;
 80019b2:	2200      	movs	r2, #0
 80019b4:	2300      	movs	r3, #0
 80019b6:	603a      	str	r2, [r7, #0]
 80019b8:	607b      	str	r3, [r7, #4]
  HAL_ADCEx_Calibration_Start(&hadc);
 80019ba:	4b1a      	ldr	r3, [pc, #104]	; (8001a24 <main+0x94>)
 80019bc:	0018      	movs	r0, r3
 80019be:	f000 feaf 	bl	8002720 <HAL_ADCEx_Calibration_Start>
  init_sensors();
 80019c2:	f000 f889 	bl	8001ad8 <init_sensors>
  {
//	  VREF
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  measure(GAS);
 80019c6:	2001      	movs	r0, #1
 80019c8:	f000 f8e6 	bl	8001b98 <measure>
	  HAL_Delay(10000);
 80019cc:	4b16      	ldr	r3, [pc, #88]	; (8001a28 <main+0x98>)
 80019ce:	0018      	movs	r0, r3
 80019d0:	f000 fad0 	bl	8001f74 <HAL_Delay>
	  measure(TEMP);
 80019d4:	2000      	movs	r0, #0
 80019d6:	f000 f8df 	bl	8001b98 <measure>
	  HAL_Delay(10000);
 80019da:	4b13      	ldr	r3, [pc, #76]	; (8001a28 <main+0x98>)
 80019dc:	0018      	movs	r0, r3
 80019de:	f000 fac9 	bl	8001f74 <HAL_Delay>
	  measure(TEMP);
 80019e2:	2000      	movs	r0, #0
 80019e4:	f000 f8d8 	bl	8001b98 <measure>
	  HAL_Delay(10000);
 80019e8:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <main+0x98>)
 80019ea:	0018      	movs	r0, r3
 80019ec:	f000 fac2 	bl	8001f74 <HAL_Delay>
	  measure(GAS);
 80019f0:	2001      	movs	r0, #1
 80019f2:	f000 f8d1 	bl	8001b98 <measure>
	  HAL_Delay(1000);
 80019f6:	23fa      	movs	r3, #250	; 0xfa
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	0018      	movs	r0, r3
 80019fc:	f000 faba 	bl	8001f74 <HAL_Delay>
	  measure(GAS);
 8001a00:	2001      	movs	r0, #1
 8001a02:	f000 f8c9 	bl	8001b98 <measure>
	  HAL_Delay(1000);
 8001a06:	23fa      	movs	r3, #250	; 0xfa
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	f000 fab2 	bl	8001f74 <HAL_Delay>
	  measure(GAS);
 8001a10:	2001      	movs	r0, #1
 8001a12:	f000 f8c1 	bl	8001b98 <measure>
	  HAL_Delay(1000);
 8001a16:	23fa      	movs	r3, #250	; 0xfa
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	f000 faaa 	bl	8001f74 <HAL_Delay>
	  measure(GAS);
 8001a20:	e7d1      	b.n	80019c6 <main+0x36>
 8001a22:	46c0      	nop			; (mov r8, r8)
 8001a24:	20000040 	.word	0x20000040
 8001a28:	00002710 	.word	0x00002710

08001a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a2c:	b590      	push	{r4, r7, lr}
 8001a2e:	b091      	sub	sp, #68	; 0x44
 8001a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a32:	2410      	movs	r4, #16
 8001a34:	193b      	adds	r3, r7, r4
 8001a36:	0018      	movs	r0, r3
 8001a38:	2330      	movs	r3, #48	; 0x30
 8001a3a:	001a      	movs	r2, r3
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	f001 fdbb 	bl	80035b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a42:	003b      	movs	r3, r7
 8001a44:	0018      	movs	r0, r3
 8001a46:	2310      	movs	r3, #16
 8001a48:	001a      	movs	r2, r3
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	f001 fdb4 	bl	80035b8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8001a50:	0021      	movs	r1, r4
 8001a52:	187b      	adds	r3, r7, r1
 8001a54:	2212      	movs	r2, #18
 8001a56:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a58:	187b      	adds	r3, r7, r1
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001a5e:	187b      	adds	r3, r7, r1
 8001a60:	2201      	movs	r2, #1
 8001a62:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a64:	187b      	adds	r3, r7, r1
 8001a66:	2210      	movs	r2, #16
 8001a68:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001a6a:	187b      	adds	r3, r7, r1
 8001a6c:	2210      	movs	r2, #16
 8001a6e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a70:	187b      	adds	r3, r7, r1
 8001a72:	2202      	movs	r2, #2
 8001a74:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a76:	187b      	adds	r3, r7, r1
 8001a78:	2200      	movs	r2, #0
 8001a7a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001a7c:	187b      	adds	r3, r7, r1
 8001a7e:	22a0      	movs	r2, #160	; 0xa0
 8001a80:	0392      	lsls	r2, r2, #14
 8001a82:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001a84:	187b      	adds	r3, r7, r1
 8001a86:	2200      	movs	r2, #0
 8001a88:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a8a:	187b      	adds	r3, r7, r1
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	f001 f931 	bl	8002cf4 <HAL_RCC_OscConfig>
 8001a92:	1e03      	subs	r3, r0, #0
 8001a94:	d001      	beq.n	8001a9a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001a96:	f000 f819 	bl	8001acc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a9a:	003b      	movs	r3, r7
 8001a9c:	2207      	movs	r2, #7
 8001a9e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aa0:	003b      	movs	r3, r7
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aa6:	003b      	movs	r3, r7
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001aac:	003b      	movs	r3, r7
 8001aae:	2200      	movs	r2, #0
 8001ab0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ab2:	003b      	movs	r3, r7
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	f001 fc36 	bl	8003328 <HAL_RCC_ClockConfig>
 8001abc:	1e03      	subs	r3, r0, #0
 8001abe:	d001      	beq.n	8001ac4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001ac0:	f000 f804 	bl	8001acc <Error_Handler>
  }
}
 8001ac4:	46c0      	nop			; (mov r8, r8)
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	b011      	add	sp, #68	; 0x44
 8001aca:	bd90      	pop	{r4, r7, pc}

08001acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ad0:	b672      	cpsid	i
}
 8001ad2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ad4:	e7fe      	b.n	8001ad4 <Error_Handler+0x8>
	...

08001ad8 <init_sensors>:
GAS_SENSOR gas_sensor;

double V_REF = 0;


void init_sensors(){
 8001ad8:	b5b0      	push	{r4, r5, r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
	uint16_t ref_val;
//	double vdda;

	//ADC calibration

	HAL_ADCEx_Calibration_Start(&hadc);
 8001ade:	4b25      	ldr	r3, [pc, #148]	; (8001b74 <init_sensors+0x9c>)
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	f000 fe1d 	bl	8002720 <HAL_ADCEx_Calibration_Start>
	  ADC1->CHSELR = ADC_CHSELR_CHANNEL(ADC_CHANNEL_VREF);
 8001ae6:	4b24      	ldr	r3, [pc, #144]	; (8001b78 <init_sensors+0xa0>)
 8001ae8:	2280      	movs	r2, #128	; 0x80
 8001aea:	0292      	lsls	r2, r2, #10
 8001aec:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_ADC_Start(&hadc);
 8001aee:	4b21      	ldr	r3, [pc, #132]	; (8001b74 <init_sensors+0x9c>)
 8001af0:	0018      	movs	r0, r3
 8001af2:	f000 fba3 	bl	800223c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc, 10000);
 8001af6:	4a21      	ldr	r2, [pc, #132]	; (8001b7c <init_sensors+0xa4>)
 8001af8:	4b1e      	ldr	r3, [pc, #120]	; (8001b74 <init_sensors+0x9c>)
 8001afa:	0011      	movs	r1, r2
 8001afc:	0018      	movs	r0, r3
 8001afe:	f000 fbf1 	bl	80022e4 <HAL_ADC_PollForConversion>
	  ref_val = HAL_ADC_GetValue(&hadc);
 8001b02:	4b1c      	ldr	r3, [pc, #112]	; (8001b74 <init_sensors+0x9c>)
 8001b04:	0018      	movs	r0, r3
 8001b06:	f000 fc85 	bl	8002414 <HAL_ADC_GetValue>
 8001b0a:	0002      	movs	r2, r0
 8001b0c:	1dbb      	adds	r3, r7, #6
 8001b0e:	801a      	strh	r2, [r3, #0]
	  V_REF = 3.3 *(*VREFINT_CAL_ADDR) /ref_val;
 8001b10:	4b1b      	ldr	r3, [pc, #108]	; (8001b80 <init_sensors+0xa8>)
 8001b12:	881b      	ldrh	r3, [r3, #0]
 8001b14:	0018      	movs	r0, r3
 8001b16:	f7ff fdb1 	bl	800167c <__aeabi_i2d>
 8001b1a:	4a1a      	ldr	r2, [pc, #104]	; (8001b84 <init_sensors+0xac>)
 8001b1c:	4b1a      	ldr	r3, [pc, #104]	; (8001b88 <init_sensors+0xb0>)
 8001b1e:	f7fe ffaf 	bl	8000a80 <__aeabi_dmul>
 8001b22:	0002      	movs	r2, r0
 8001b24:	000b      	movs	r3, r1
 8001b26:	0014      	movs	r4, r2
 8001b28:	001d      	movs	r5, r3
 8001b2a:	1dbb      	adds	r3, r7, #6
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	0018      	movs	r0, r3
 8001b30:	f7ff fda4 	bl	800167c <__aeabi_i2d>
 8001b34:	0002      	movs	r2, r0
 8001b36:	000b      	movs	r3, r1
 8001b38:	0020      	movs	r0, r4
 8001b3a:	0029      	movs	r1, r5
 8001b3c:	f7fe fcb8 	bl	80004b0 <__aeabi_ddiv>
 8001b40:	0002      	movs	r2, r0
 8001b42:	000b      	movs	r3, r1
 8001b44:	4911      	ldr	r1, [pc, #68]	; (8001b8c <init_sensors+0xb4>)
 8001b46:	600a      	str	r2, [r1, #0]
 8001b48:	604b      	str	r3, [r1, #4]

	//Initialization of gas sensor
	gas_sensor.adc_channel = ADC_CHANNEL_GAS;
 8001b4a:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <init_sensors+0xb8>)
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,1);
 8001b50:	2390      	movs	r3, #144	; 0x90
 8001b52:	05db      	lsls	r3, r3, #23
 8001b54:	2201      	movs	r2, #1
 8001b56:	2120      	movs	r1, #32
 8001b58:	0018      	movs	r0, r3
 8001b5a:	f001 f8ad 	bl	8002cb8 <HAL_GPIO_WritePin>

	//Initialization of temperature sensor
	temp_sensor.adc_channel = ADC_CHANNEL_TEMP;
 8001b5e:	4b0d      	ldr	r3, [pc, #52]	; (8001b94 <init_sensors+0xbc>)
 8001b60:	2201      	movs	r2, #1
 8001b62:	801a      	strh	r2, [r3, #0]
	temp_sensor.updated = 0;
 8001b64:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <init_sensors+0xbc>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	711a      	strb	r2, [r3, #4]
}
 8001b6a:	46c0      	nop			; (mov r8, r8)
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	b002      	add	sp, #8
 8001b70:	bdb0      	pop	{r4, r5, r7, pc}
 8001b72:	46c0      	nop			; (mov r8, r8)
 8001b74:	20000040 	.word	0x20000040
 8001b78:	40012400 	.word	0x40012400
 8001b7c:	00002710 	.word	0x00002710
 8001b80:	1ffff7ba 	.word	0x1ffff7ba
 8001b84:	66666666 	.word	0x66666666
 8001b88:	400a6666 	.word	0x400a6666
 8001b8c:	20000030 	.word	0x20000030
 8001b90:	20000080 	.word	0x20000080
 8001b94:	20000090 	.word	0x20000090

08001b98 <measure>:

void measure(sensor_t sensor){
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	0002      	movs	r2, r0
 8001ba0:	1dfb      	adds	r3, r7, #7
 8001ba2:	701a      	strb	r2, [r3, #0]

	switch(sensor){
 8001ba4:	1dfb      	adds	r3, r7, #7
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d035      	beq.n	8001c18 <measure+0x80>
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d156      	bne.n	8001c5e <measure+0xc6>
		case GAS:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,0);
 8001bb0:	2390      	movs	r3, #144	; 0x90
 8001bb2:	05db      	lsls	r3, r3, #23
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	2120      	movs	r1, #32
 8001bb8:	0018      	movs	r0, r3
 8001bba:	f001 f87d 	bl	8002cb8 <HAL_GPIO_WritePin>
			HAL_Delay(50);
 8001bbe:	2032      	movs	r0, #50	; 0x32
 8001bc0:	f000 f9d8 	bl	8001f74 <HAL_Delay>
			ADC1->CHSELR = ADC_CHSELR_CHANNEL(gas_sensor.adc_channel);
 8001bc4:	4b28      	ldr	r3, [pc, #160]	; (8001c68 <measure+0xd0>)
 8001bc6:	881b      	ldrh	r3, [r3, #0]
 8001bc8:	0019      	movs	r1, r3
 8001bca:	4b28      	ldr	r3, [pc, #160]	; (8001c6c <measure+0xd4>)
 8001bcc:	2201      	movs	r2, #1
 8001bce:	408a      	lsls	r2, r1
 8001bd0:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_ADC_Start(&hadc);
 8001bd2:	4b27      	ldr	r3, [pc, #156]	; (8001c70 <measure+0xd8>)
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	f000 fb31 	bl	800223c <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc, 10000);
 8001bda:	4a26      	ldr	r2, [pc, #152]	; (8001c74 <measure+0xdc>)
 8001bdc:	4b24      	ldr	r3, [pc, #144]	; (8001c70 <measure+0xd8>)
 8001bde:	0011      	movs	r1, r2
 8001be0:	0018      	movs	r0, r3
 8001be2:	f000 fb7f 	bl	80022e4 <HAL_ADC_PollForConversion>
			write_sens_raw(sensor,HAL_ADC_GetValue(&hadc));
 8001be6:	4b22      	ldr	r3, [pc, #136]	; (8001c70 <measure+0xd8>)
 8001be8:	0018      	movs	r0, r3
 8001bea:	f000 fc13 	bl	8002414 <HAL_ADC_GetValue>
 8001bee:	0003      	movs	r3, r0
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	1dfb      	adds	r3, r7, #7
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	0011      	movs	r1, r2
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	f000 f8c5 	bl	8001d88 <write_sens_raw>
			calculate(sensor);
 8001bfe:	1dfb      	adds	r3, r7, #7
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	0018      	movs	r0, r3
 8001c04:	f000 f83a 	bl	8001c7c <calculate>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,1);
 8001c08:	2390      	movs	r3, #144	; 0x90
 8001c0a:	05db      	lsls	r3, r3, #23
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	2120      	movs	r1, #32
 8001c10:	0018      	movs	r0, r3
 8001c12:	f001 f851 	bl	8002cb8 <HAL_GPIO_WritePin>
			break;
 8001c16:	e022      	b.n	8001c5e <measure+0xc6>
		case TEMP:
			ADC1->CHSELR = ADC_CHSELR_CHANNEL(temp_sensor.adc_channel);
 8001c18:	4b17      	ldr	r3, [pc, #92]	; (8001c78 <measure+0xe0>)
 8001c1a:	881b      	ldrh	r3, [r3, #0]
 8001c1c:	0019      	movs	r1, r3
 8001c1e:	4b13      	ldr	r3, [pc, #76]	; (8001c6c <measure+0xd4>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	408a      	lsls	r2, r1
 8001c24:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_ADC_Start(&hadc);
 8001c26:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <measure+0xd8>)
 8001c28:	0018      	movs	r0, r3
 8001c2a:	f000 fb07 	bl	800223c <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc, 10000);
 8001c2e:	4a11      	ldr	r2, [pc, #68]	; (8001c74 <measure+0xdc>)
 8001c30:	4b0f      	ldr	r3, [pc, #60]	; (8001c70 <measure+0xd8>)
 8001c32:	0011      	movs	r1, r2
 8001c34:	0018      	movs	r0, r3
 8001c36:	f000 fb55 	bl	80022e4 <HAL_ADC_PollForConversion>
			write_sens_raw(sensor,HAL_ADC_GetValue(&hadc));
 8001c3a:	4b0d      	ldr	r3, [pc, #52]	; (8001c70 <measure+0xd8>)
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	f000 fbe9 	bl	8002414 <HAL_ADC_GetValue>
 8001c42:	0003      	movs	r3, r0
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	1dfb      	adds	r3, r7, #7
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	0011      	movs	r1, r2
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	f000 f89b 	bl	8001d88 <write_sens_raw>
			calculate(sensor);
 8001c52:	1dfb      	adds	r3, r7, #7
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	0018      	movs	r0, r3
 8001c58:	f000 f810 	bl	8001c7c <calculate>
			break;
 8001c5c:	46c0      	nop			; (mov r8, r8)
	}

}
 8001c5e:	46c0      	nop			; (mov r8, r8)
 8001c60:	46bd      	mov	sp, r7
 8001c62:	b002      	add	sp, #8
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	46c0      	nop			; (mov r8, r8)
 8001c68:	20000080 	.word	0x20000080
 8001c6c:	40012400 	.word	0x40012400
 8001c70:	20000040 	.word	0x20000040
 8001c74:	00002710 	.word	0x00002710
 8001c78:	20000090 	.word	0x20000090

08001c7c <calculate>:


void calculate(sensor_t sensor){
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	0002      	movs	r2, r0
 8001c84:	1dfb      	adds	r3, r7, #7
 8001c86:	701a      	strb	r2, [r3, #0]
	static double temp = 0;
	switch(sensor){
 8001c88:	1dfb      	adds	r3, r7, #7
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d01a      	beq.n	8001cc6 <calculate+0x4a>
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d15c      	bne.n	8001d4e <calculate+0xd2>
		case GAS:
			temp = ((float)gas_sensor.raw_val/(float)ADC_RES_VAL)*V_REF;
 8001c94:	4b30      	ldr	r3, [pc, #192]	; (8001d58 <calculate+0xdc>)
 8001c96:	885b      	ldrh	r3, [r3, #2]
 8001c98:	0018      	movs	r0, r3
 8001c9a:	f7fe fbcd 	bl	8000438 <__aeabi_ui2f>
 8001c9e:	1c03      	adds	r3, r0, #0
 8001ca0:	492e      	ldr	r1, [pc, #184]	; (8001d5c <calculate+0xe0>)
 8001ca2:	1c18      	adds	r0, r3, #0
 8001ca4:	f7fe fabc 	bl	8000220 <__aeabi_fdiv>
 8001ca8:	1c03      	adds	r3, r0, #0
 8001caa:	1c18      	adds	r0, r3, #0
 8001cac:	f7ff fd16 	bl	80016dc <__aeabi_f2d>
 8001cb0:	4b2b      	ldr	r3, [pc, #172]	; (8001d60 <calculate+0xe4>)
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f7fe fee3 	bl	8000a80 <__aeabi_dmul>
 8001cba:	0002      	movs	r2, r0
 8001cbc:	000b      	movs	r3, r1
 8001cbe:	4929      	ldr	r1, [pc, #164]	; (8001d64 <calculate+0xe8>)
 8001cc0:	600a      	str	r2, [r1, #0]
 8001cc2:	604b      	str	r3, [r1, #4]
			break;
 8001cc4:	e043      	b.n	8001d4e <calculate+0xd2>
		case TEMP:
			if(temp_sensor.updated){
 8001cc6:	4b28      	ldr	r3, [pc, #160]	; (8001d68 <calculate+0xec>)
 8001cc8:	791b      	ldrb	r3, [r3, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d03e      	beq.n	8001d4c <calculate+0xd0>

								//  a * R1 + b
				temp = ((float)temp_sensor.raw_val/(float)ADC_RES_VAL)*V_REF;
 8001cce:	4b26      	ldr	r3, [pc, #152]	; (8001d68 <calculate+0xec>)
 8001cd0:	885b      	ldrh	r3, [r3, #2]
 8001cd2:	0018      	movs	r0, r3
 8001cd4:	f7fe fbb0 	bl	8000438 <__aeabi_ui2f>
 8001cd8:	1c03      	adds	r3, r0, #0
 8001cda:	4920      	ldr	r1, [pc, #128]	; (8001d5c <calculate+0xe0>)
 8001cdc:	1c18      	adds	r0, r3, #0
 8001cde:	f7fe fa9f 	bl	8000220 <__aeabi_fdiv>
 8001ce2:	1c03      	adds	r3, r0, #0
 8001ce4:	1c18      	adds	r0, r3, #0
 8001ce6:	f7ff fcf9 	bl	80016dc <__aeabi_f2d>
 8001cea:	4b1d      	ldr	r3, [pc, #116]	; (8001d60 <calculate+0xe4>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f7fe fec6 	bl	8000a80 <__aeabi_dmul>
 8001cf4:	0002      	movs	r2, r0
 8001cf6:	000b      	movs	r3, r1
 8001cf8:	491a      	ldr	r1, [pc, #104]	; (8001d64 <calculate+0xe8>)
 8001cfa:	600a      	str	r2, [r1, #0]
 8001cfc:	604b      	str	r3, [r1, #4]
				temp_sensor.temp = A_REG_GAS*((RES_x_VOL_TEMP)/(temp)-(double)DIV_RES_TEMP)+B_REG_TEMP;
 8001cfe:	4b19      	ldr	r3, [pc, #100]	; (8001d64 <calculate+0xe8>)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	4819      	ldr	r0, [pc, #100]	; (8001d6c <calculate+0xf0>)
 8001d06:	491a      	ldr	r1, [pc, #104]	; (8001d70 <calculate+0xf4>)
 8001d08:	f7fe fbd2 	bl	80004b0 <__aeabi_ddiv>
 8001d0c:	0002      	movs	r2, r0
 8001d0e:	000b      	movs	r3, r1
 8001d10:	0010      	movs	r0, r2
 8001d12:	0019      	movs	r1, r3
 8001d14:	2200      	movs	r2, #0
 8001d16:	4b17      	ldr	r3, [pc, #92]	; (8001d74 <calculate+0xf8>)
 8001d18:	f7ff f91e 	bl	8000f58 <__aeabi_dsub>
 8001d1c:	0002      	movs	r2, r0
 8001d1e:	000b      	movs	r3, r1
 8001d20:	0010      	movs	r0, r2
 8001d22:	0019      	movs	r1, r3
 8001d24:	4a14      	ldr	r2, [pc, #80]	; (8001d78 <calculate+0xfc>)
 8001d26:	4b15      	ldr	r3, [pc, #84]	; (8001d7c <calculate+0x100>)
 8001d28:	f7fe feaa 	bl	8000a80 <__aeabi_dmul>
 8001d2c:	0002      	movs	r2, r0
 8001d2e:	000b      	movs	r3, r1
 8001d30:	0010      	movs	r0, r2
 8001d32:	0019      	movs	r1, r3
 8001d34:	4a12      	ldr	r2, [pc, #72]	; (8001d80 <calculate+0x104>)
 8001d36:	4b13      	ldr	r3, [pc, #76]	; (8001d84 <calculate+0x108>)
 8001d38:	f7ff f90e 	bl	8000f58 <__aeabi_dsub>
 8001d3c:	0002      	movs	r2, r0
 8001d3e:	000b      	movs	r3, r1
 8001d40:	4909      	ldr	r1, [pc, #36]	; (8001d68 <calculate+0xec>)
 8001d42:	608a      	str	r2, [r1, #8]
 8001d44:	60cb      	str	r3, [r1, #12]
				temp_sensor.updated = 0;
 8001d46:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <calculate+0xec>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	711a      	strb	r2, [r3, #4]
			}
			break;
 8001d4c:	46c0      	nop			; (mov r8, r8)
	}
}
 8001d4e:	46c0      	nop			; (mov r8, r8)
 8001d50:	46bd      	mov	sp, r7
 8001d52:	b002      	add	sp, #8
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	46c0      	nop			; (mov r8, r8)
 8001d58:	20000080 	.word	0x20000080
 8001d5c:	457ff000 	.word	0x457ff000
 8001d60:	20000030 	.word	0x20000030
 8001d64:	20000038 	.word	0x20000038
 8001d68:	20000090 	.word	0x20000090
 8001d6c:	cccccccd 	.word	0xcccccccd
 8001d70:	40dd5fcc 	.word	0x40dd5fcc
 8001d74:	40c37400 	.word	0x40c37400
 8001d78:	d0c5d5b8 	.word	0xd0c5d5b8
 8001d7c:	3fb03b5e 	.word	0x3fb03b5e
 8001d80:	70a3d70a 	.word	0x70a3d70a
 8001d84:	40599a3d 	.word	0x40599a3d

08001d88 <write_sens_raw>:
			return temp_sensor.temp;
			break;
	}
}

void write_sens_raw(sensor_t sensor, uint16_t raw_val){
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	0002      	movs	r2, r0
 8001d90:	1dfb      	adds	r3, r7, #7
 8001d92:	701a      	strb	r2, [r3, #0]
 8001d94:	1d3b      	adds	r3, r7, #4
 8001d96:	1c0a      	adds	r2, r1, #0
 8001d98:	801a      	strh	r2, [r3, #0]
	switch(sensor){
 8001d9a:	1dfb      	adds	r3, r7, #7
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d009      	beq.n	8001db6 <write_sens_raw+0x2e>
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d10f      	bne.n	8001dc6 <write_sens_raw+0x3e>
		case GAS:
			gas_sensor.raw_val = raw_val;
 8001da6:	4b0a      	ldr	r3, [pc, #40]	; (8001dd0 <write_sens_raw+0x48>)
 8001da8:	1d3a      	adds	r2, r7, #4
 8001daa:	8812      	ldrh	r2, [r2, #0]
 8001dac:	805a      	strh	r2, [r3, #2]
			gas_sensor.updated = 1;
 8001dae:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <write_sens_raw+0x48>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	711a      	strb	r2, [r3, #4]
			break;
 8001db4:	e007      	b.n	8001dc6 <write_sens_raw+0x3e>
		case TEMP:
			temp_sensor.raw_val = raw_val;
 8001db6:	4b07      	ldr	r3, [pc, #28]	; (8001dd4 <write_sens_raw+0x4c>)
 8001db8:	1d3a      	adds	r2, r7, #4
 8001dba:	8812      	ldrh	r2, [r2, #0]
 8001dbc:	805a      	strh	r2, [r3, #2]
			temp_sensor.updated = 1;
 8001dbe:	4b05      	ldr	r3, [pc, #20]	; (8001dd4 <write_sens_raw+0x4c>)
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	711a      	strb	r2, [r3, #4]
			break;
 8001dc4:	46c0      	nop			; (mov r8, r8)
	}
}
 8001dc6:	46c0      	nop			; (mov r8, r8)
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	b002      	add	sp, #8
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	46c0      	nop			; (mov r8, r8)
 8001dd0:	20000080 	.word	0x20000080
 8001dd4:	20000090 	.word	0x20000090

08001dd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dde:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <HAL_MspInit+0x44>)
 8001de0:	699a      	ldr	r2, [r3, #24]
 8001de2:	4b0e      	ldr	r3, [pc, #56]	; (8001e1c <HAL_MspInit+0x44>)
 8001de4:	2101      	movs	r1, #1
 8001de6:	430a      	orrs	r2, r1
 8001de8:	619a      	str	r2, [r3, #24]
 8001dea:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <HAL_MspInit+0x44>)
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	2201      	movs	r2, #1
 8001df0:	4013      	ands	r3, r2
 8001df2:	607b      	str	r3, [r7, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001df6:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <HAL_MspInit+0x44>)
 8001df8:	69da      	ldr	r2, [r3, #28]
 8001dfa:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <HAL_MspInit+0x44>)
 8001dfc:	2180      	movs	r1, #128	; 0x80
 8001dfe:	0549      	lsls	r1, r1, #21
 8001e00:	430a      	orrs	r2, r1
 8001e02:	61da      	str	r2, [r3, #28]
 8001e04:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <HAL_MspInit+0x44>)
 8001e06:	69da      	ldr	r2, [r3, #28]
 8001e08:	2380      	movs	r3, #128	; 0x80
 8001e0a:	055b      	lsls	r3, r3, #21
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	603b      	str	r3, [r7, #0]
 8001e10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e12:	46c0      	nop			; (mov r8, r8)
 8001e14:	46bd      	mov	sp, r7
 8001e16:	b002      	add	sp, #8
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	46c0      	nop			; (mov r8, r8)
 8001e1c:	40021000 	.word	0x40021000

08001e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e24:	e7fe      	b.n	8001e24 <NMI_Handler+0x4>

08001e26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e2a:	e7fe      	b.n	8001e2a <HardFault_Handler+0x4>

08001e2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001e30:	46c0      	nop			; (mov r8, r8)
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e3a:	46c0      	nop			; (mov r8, r8)
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e44:	f000 f87a 	bl	8001f3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e48:	46c0      	nop			; (mov r8, r8)
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001e52:	46c0      	nop			; (mov r8, r8)
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e58:	480d      	ldr	r0, [pc, #52]	; (8001e90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e5a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e5c:	f7ff fff7 	bl	8001e4e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e60:	480c      	ldr	r0, [pc, #48]	; (8001e94 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e62:	490d      	ldr	r1, [pc, #52]	; (8001e98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e64:	4a0d      	ldr	r2, [pc, #52]	; (8001e9c <LoopForever+0xe>)
  movs r3, #0
 8001e66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e68:	e002      	b.n	8001e70 <LoopCopyDataInit>

08001e6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e6e:	3304      	adds	r3, #4

08001e70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e74:	d3f9      	bcc.n	8001e6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e76:	4a0a      	ldr	r2, [pc, #40]	; (8001ea0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e78:	4c0a      	ldr	r4, [pc, #40]	; (8001ea4 <LoopForever+0x16>)
  movs r3, #0
 8001e7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e7c:	e001      	b.n	8001e82 <LoopFillZerobss>

08001e7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e80:	3204      	adds	r2, #4

08001e82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e84:	d3fb      	bcc.n	8001e7e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001e86:	f001 fb73 	bl	8003570 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e8a:	f7ff fd81 	bl	8001990 <main>

08001e8e <LoopForever>:

LoopForever:
    b LoopForever
 8001e8e:	e7fe      	b.n	8001e8e <LoopForever>
  ldr   r0, =_estack
 8001e90:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001e94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e98:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001e9c:	08003718 	.word	0x08003718
  ldr r2, =_sbss
 8001ea0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001ea4:	200000a4 	.word	0x200000a4

08001ea8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ea8:	e7fe      	b.n	8001ea8 <ADC1_IRQHandler>
	...

08001eac <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001eb0:	4b07      	ldr	r3, [pc, #28]	; (8001ed0 <HAL_Init+0x24>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_Init+0x24>)
 8001eb6:	2110      	movs	r1, #16
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001ebc:	2003      	movs	r0, #3
 8001ebe:	f000 f809 	bl	8001ed4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ec2:	f7ff ff89 	bl	8001dd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	0018      	movs	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	46c0      	nop			; (mov r8, r8)
 8001ed0:	40022000 	.word	0x40022000

08001ed4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ed4:	b590      	push	{r4, r7, lr}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001edc:	4b14      	ldr	r3, [pc, #80]	; (8001f30 <HAL_InitTick+0x5c>)
 8001ede:	681c      	ldr	r4, [r3, #0]
 8001ee0:	4b14      	ldr	r3, [pc, #80]	; (8001f34 <HAL_InitTick+0x60>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	0019      	movs	r1, r3
 8001ee6:	23fa      	movs	r3, #250	; 0xfa
 8001ee8:	0098      	lsls	r0, r3, #2
 8001eea:	f7fe f90d 	bl	8000108 <__udivsi3>
 8001eee:	0003      	movs	r3, r0
 8001ef0:	0019      	movs	r1, r3
 8001ef2:	0020      	movs	r0, r4
 8001ef4:	f7fe f908 	bl	8000108 <__udivsi3>
 8001ef8:	0003      	movs	r3, r0
 8001efa:	0018      	movs	r0, r3
 8001efc:	f000 fd5f 	bl	80029be <HAL_SYSTICK_Config>
 8001f00:	1e03      	subs	r3, r0, #0
 8001f02:	d001      	beq.n	8001f08 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e00f      	b.n	8001f28 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b03      	cmp	r3, #3
 8001f0c:	d80b      	bhi.n	8001f26 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	2301      	movs	r3, #1
 8001f12:	425b      	negs	r3, r3
 8001f14:	2200      	movs	r2, #0
 8001f16:	0018      	movs	r0, r3
 8001f18:	f000 fd3c 	bl	8002994 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f1c:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <HAL_InitTick+0x64>)
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001f22:	2300      	movs	r3, #0
 8001f24:	e000      	b.n	8001f28 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
}
 8001f28:	0018      	movs	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	b003      	add	sp, #12
 8001f2e:	bd90      	pop	{r4, r7, pc}
 8001f30:	20000000 	.word	0x20000000
 8001f34:	20000008 	.word	0x20000008
 8001f38:	20000004 	.word	0x20000004

08001f3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f40:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <HAL_IncTick+0x1c>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	001a      	movs	r2, r3
 8001f46:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <HAL_IncTick+0x20>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	18d2      	adds	r2, r2, r3
 8001f4c:	4b03      	ldr	r3, [pc, #12]	; (8001f5c <HAL_IncTick+0x20>)
 8001f4e:	601a      	str	r2, [r3, #0]
}
 8001f50:	46c0      	nop			; (mov r8, r8)
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	20000008 	.word	0x20000008
 8001f5c:	200000a0 	.word	0x200000a0

08001f60 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  return uwTick;
 8001f64:	4b02      	ldr	r3, [pc, #8]	; (8001f70 <HAL_GetTick+0x10>)
 8001f66:	681b      	ldr	r3, [r3, #0]
}
 8001f68:	0018      	movs	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	46c0      	nop			; (mov r8, r8)
 8001f70:	200000a0 	.word	0x200000a0

08001f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f7c:	f7ff fff0 	bl	8001f60 <HAL_GetTick>
 8001f80:	0003      	movs	r3, r0
 8001f82:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	d005      	beq.n	8001f9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f8e:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <HAL_Delay+0x44>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	001a      	movs	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	189b      	adds	r3, r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001f9a:	46c0      	nop			; (mov r8, r8)
 8001f9c:	f7ff ffe0 	bl	8001f60 <HAL_GetTick>
 8001fa0:	0002      	movs	r2, r0
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d8f7      	bhi.n	8001f9c <HAL_Delay+0x28>
  {
  }
}
 8001fac:	46c0      	nop			; (mov r8, r8)
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	b004      	add	sp, #16
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	46c0      	nop			; (mov r8, r8)
 8001fb8:	20000008 	.word	0x20000008

08001fbc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fc4:	230f      	movs	r3, #15
 8001fc6:	18fb      	adds	r3, r7, r3
 8001fc8:	2200      	movs	r2, #0
 8001fca:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e125      	b.n	8002226 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d10a      	bne.n	8001ff8 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2234      	movs	r2, #52	; 0x34
 8001fec:	2100      	movs	r1, #0
 8001fee:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	f7ff fc4c 	bl	8001890 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ffc:	2210      	movs	r2, #16
 8001ffe:	4013      	ands	r3, r2
 8002000:	d000      	beq.n	8002004 <HAL_ADC_Init+0x48>
 8002002:	e103      	b.n	800220c <HAL_ADC_Init+0x250>
 8002004:	230f      	movs	r3, #15
 8002006:	18fb      	adds	r3, r7, r3
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d000      	beq.n	8002010 <HAL_ADC_Init+0x54>
 800200e:	e0fd      	b.n	800220c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	2204      	movs	r2, #4
 8002018:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800201a:	d000      	beq.n	800201e <HAL_ADC_Init+0x62>
 800201c:	e0f6      	b.n	800220c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002022:	4a83      	ldr	r2, [pc, #524]	; (8002230 <HAL_ADC_Init+0x274>)
 8002024:	4013      	ands	r3, r2
 8002026:	2202      	movs	r2, #2
 8002028:	431a      	orrs	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	2203      	movs	r2, #3
 8002036:	4013      	ands	r3, r2
 8002038:	2b01      	cmp	r3, #1
 800203a:	d112      	bne.n	8002062 <HAL_ADC_Init+0xa6>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2201      	movs	r2, #1
 8002044:	4013      	ands	r3, r2
 8002046:	2b01      	cmp	r3, #1
 8002048:	d009      	beq.n	800205e <HAL_ADC_Init+0xa2>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68da      	ldr	r2, [r3, #12]
 8002050:	2380      	movs	r3, #128	; 0x80
 8002052:	021b      	lsls	r3, r3, #8
 8002054:	401a      	ands	r2, r3
 8002056:	2380      	movs	r3, #128	; 0x80
 8002058:	021b      	lsls	r3, r3, #8
 800205a:	429a      	cmp	r2, r3
 800205c:	d101      	bne.n	8002062 <HAL_ADC_Init+0xa6>
 800205e:	2301      	movs	r3, #1
 8002060:	e000      	b.n	8002064 <HAL_ADC_Init+0xa8>
 8002062:	2300      	movs	r3, #0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d116      	bne.n	8002096 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	2218      	movs	r2, #24
 8002070:	4393      	bics	r3, r2
 8002072:	0019      	movs	r1, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	430a      	orrs	r2, r1
 800207e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	0899      	lsrs	r1, r3, #2
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	430a      	orrs	r2, r1
 8002094:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4964      	ldr	r1, [pc, #400]	; (8002234 <HAL_ADC_Init+0x278>)
 80020a2:	400a      	ands	r2, r1
 80020a4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	7e1b      	ldrb	r3, [r3, #24]
 80020aa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	7e5b      	ldrb	r3, [r3, #25]
 80020b0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80020b2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	7e9b      	ldrb	r3, [r3, #26]
 80020b8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80020ba:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d002      	beq.n	80020ca <HAL_ADC_Init+0x10e>
 80020c4:	2380      	movs	r3, #128	; 0x80
 80020c6:	015b      	lsls	r3, r3, #5
 80020c8:	e000      	b.n	80020cc <HAL_ADC_Init+0x110>
 80020ca:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80020cc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80020d2:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d101      	bne.n	80020e0 <HAL_ADC_Init+0x124>
 80020dc:	2304      	movs	r3, #4
 80020de:	e000      	b.n	80020e2 <HAL_ADC_Init+0x126>
 80020e0:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80020e2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2124      	movs	r1, #36	; 0x24
 80020e8:	5c5b      	ldrb	r3, [r3, r1]
 80020ea:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80020ec:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	7edb      	ldrb	r3, [r3, #27]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d115      	bne.n	8002128 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	7e9b      	ldrb	r3, [r3, #26]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d105      	bne.n	8002110 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	2280      	movs	r2, #128	; 0x80
 8002108:	0252      	lsls	r2, r2, #9
 800210a:	4313      	orrs	r3, r2
 800210c:	60bb      	str	r3, [r7, #8]
 800210e:	e00b      	b.n	8002128 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002114:	2220      	movs	r2, #32
 8002116:	431a      	orrs	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002120:	2201      	movs	r2, #1
 8002122:	431a      	orrs	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	69da      	ldr	r2, [r3, #28]
 800212c:	23c2      	movs	r3, #194	; 0xc2
 800212e:	33ff      	adds	r3, #255	; 0xff
 8002130:	429a      	cmp	r2, r3
 8002132:	d007      	beq.n	8002144 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800213c:	4313      	orrs	r3, r2
 800213e:	68ba      	ldr	r2, [r7, #8]
 8002140:	4313      	orrs	r3, r2
 8002142:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68d9      	ldr	r1, [r3, #12]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68ba      	ldr	r2, [r7, #8]
 8002150:	430a      	orrs	r2, r1
 8002152:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002158:	2380      	movs	r3, #128	; 0x80
 800215a:	055b      	lsls	r3, r3, #21
 800215c:	429a      	cmp	r2, r3
 800215e:	d01b      	beq.n	8002198 <HAL_ADC_Init+0x1dc>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002164:	2b01      	cmp	r3, #1
 8002166:	d017      	beq.n	8002198 <HAL_ADC_Init+0x1dc>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216c:	2b02      	cmp	r3, #2
 800216e:	d013      	beq.n	8002198 <HAL_ADC_Init+0x1dc>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002174:	2b03      	cmp	r3, #3
 8002176:	d00f      	beq.n	8002198 <HAL_ADC_Init+0x1dc>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217c:	2b04      	cmp	r3, #4
 800217e:	d00b      	beq.n	8002198 <HAL_ADC_Init+0x1dc>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002184:	2b05      	cmp	r3, #5
 8002186:	d007      	beq.n	8002198 <HAL_ADC_Init+0x1dc>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218c:	2b06      	cmp	r3, #6
 800218e:	d003      	beq.n	8002198 <HAL_ADC_Init+0x1dc>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002194:	2b07      	cmp	r3, #7
 8002196:	d112      	bne.n	80021be <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	695a      	ldr	r2, [r3, #20]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2107      	movs	r1, #7
 80021a4:	438a      	bics	r2, r1
 80021a6:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6959      	ldr	r1, [r3, #20]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b2:	2207      	movs	r2, #7
 80021b4:	401a      	ands	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	430a      	orrs	r2, r1
 80021bc:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	4a1c      	ldr	r2, [pc, #112]	; (8002238 <HAL_ADC_Init+0x27c>)
 80021c6:	4013      	ands	r3, r2
 80021c8:	68ba      	ldr	r2, [r7, #8]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d10b      	bne.n	80021e6 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d8:	2203      	movs	r2, #3
 80021da:	4393      	bics	r3, r2
 80021dc:	2201      	movs	r2, #1
 80021de:	431a      	orrs	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80021e4:	e01c      	b.n	8002220 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ea:	2212      	movs	r2, #18
 80021ec:	4393      	bics	r3, r2
 80021ee:	2210      	movs	r2, #16
 80021f0:	431a      	orrs	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021fa:	2201      	movs	r2, #1
 80021fc:	431a      	orrs	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002202:	230f      	movs	r3, #15
 8002204:	18fb      	adds	r3, r7, r3
 8002206:	2201      	movs	r2, #1
 8002208:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800220a:	e009      	b.n	8002220 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002210:	2210      	movs	r2, #16
 8002212:	431a      	orrs	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002218:	230f      	movs	r3, #15
 800221a:	18fb      	adds	r3, r7, r3
 800221c:	2201      	movs	r2, #1
 800221e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002220:	230f      	movs	r3, #15
 8002222:	18fb      	adds	r3, r7, r3
 8002224:	781b      	ldrb	r3, [r3, #0]
}
 8002226:	0018      	movs	r0, r3
 8002228:	46bd      	mov	sp, r7
 800222a:	b004      	add	sp, #16
 800222c:	bd80      	pop	{r7, pc}
 800222e:	46c0      	nop			; (mov r8, r8)
 8002230:	fffffefd 	.word	0xfffffefd
 8002234:	fffe0219 	.word	0xfffe0219
 8002238:	833fffe7 	.word	0x833fffe7

0800223c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800223c:	b590      	push	{r4, r7, lr}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002244:	230f      	movs	r3, #15
 8002246:	18fb      	adds	r3, r7, r3
 8002248:	2200      	movs	r2, #0
 800224a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	2204      	movs	r2, #4
 8002254:	4013      	ands	r3, r2
 8002256:	d138      	bne.n	80022ca <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2234      	movs	r2, #52	; 0x34
 800225c:	5c9b      	ldrb	r3, [r3, r2]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d101      	bne.n	8002266 <HAL_ADC_Start+0x2a>
 8002262:	2302      	movs	r3, #2
 8002264:	e038      	b.n	80022d8 <HAL_ADC_Start+0x9c>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2234      	movs	r2, #52	; 0x34
 800226a:	2101      	movs	r1, #1
 800226c:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	7e5b      	ldrb	r3, [r3, #25]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d007      	beq.n	8002286 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002276:	230f      	movs	r3, #15
 8002278:	18fc      	adds	r4, r7, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	0018      	movs	r0, r3
 800227e:	f000 f9cb 	bl	8002618 <ADC_Enable>
 8002282:	0003      	movs	r3, r0
 8002284:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002286:	230f      	movs	r3, #15
 8002288:	18fb      	adds	r3, r7, r3
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d120      	bne.n	80022d2 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002294:	4a12      	ldr	r2, [pc, #72]	; (80022e0 <HAL_ADC_Start+0xa4>)
 8002296:	4013      	ands	r3, r2
 8002298:	2280      	movs	r2, #128	; 0x80
 800229a:	0052      	lsls	r2, r2, #1
 800229c:	431a      	orrs	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2234      	movs	r2, #52	; 0x34
 80022ac:	2100      	movs	r1, #0
 80022ae:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	221c      	movs	r2, #28
 80022b6:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	689a      	ldr	r2, [r3, #8]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2104      	movs	r1, #4
 80022c4:	430a      	orrs	r2, r1
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	e003      	b.n	80022d2 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80022ca:	230f      	movs	r3, #15
 80022cc:	18fb      	adds	r3, r7, r3
 80022ce:	2202      	movs	r2, #2
 80022d0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80022d2:	230f      	movs	r3, #15
 80022d4:	18fb      	adds	r3, r7, r3
 80022d6:	781b      	ldrb	r3, [r3, #0]
}
 80022d8:	0018      	movs	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	b005      	add	sp, #20
 80022de:	bd90      	pop	{r4, r7, pc}
 80022e0:	fffff0fe 	.word	0xfffff0fe

080022e4 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	2b08      	cmp	r3, #8
 80022f4:	d102      	bne.n	80022fc <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80022f6:	2308      	movs	r3, #8
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	e014      	b.n	8002326 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	2201      	movs	r2, #1
 8002304:	4013      	ands	r3, r2
 8002306:	2b01      	cmp	r3, #1
 8002308:	d10b      	bne.n	8002322 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230e:	2220      	movs	r2, #32
 8002310:	431a      	orrs	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2234      	movs	r2, #52	; 0x34
 800231a:	2100      	movs	r1, #0
 800231c:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e071      	b.n	8002406 <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002322:	230c      	movs	r3, #12
 8002324:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002326:	f7ff fe1b 	bl	8001f60 <HAL_GetTick>
 800232a:	0003      	movs	r3, r0
 800232c:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800232e:	e01f      	b.n	8002370 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	3301      	adds	r3, #1
 8002334:	d01c      	beq.n	8002370 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d007      	beq.n	800234c <HAL_ADC_PollForConversion+0x68>
 800233c:	f7ff fe10 	bl	8001f60 <HAL_GetTick>
 8002340:	0002      	movs	r2, r0
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	429a      	cmp	r2, r3
 800234a:	d211      	bcs.n	8002370 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	4013      	ands	r3, r2
 8002356:	d10b      	bne.n	8002370 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800235c:	2204      	movs	r2, #4
 800235e:	431a      	orrs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2234      	movs	r2, #52	; 0x34
 8002368:	2100      	movs	r1, #0
 800236a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e04a      	b.n	8002406 <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	4013      	ands	r3, r2
 800237a:	d0d9      	beq.n	8002330 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002380:	2280      	movs	r2, #128	; 0x80
 8002382:	0092      	lsls	r2, r2, #2
 8002384:	431a      	orrs	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68da      	ldr	r2, [r3, #12]
 8002390:	23c0      	movs	r3, #192	; 0xc0
 8002392:	011b      	lsls	r3, r3, #4
 8002394:	4013      	ands	r3, r2
 8002396:	d12d      	bne.n	80023f4 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800239c:	2b00      	cmp	r3, #0
 800239e:	d129      	bne.n	80023f4 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2208      	movs	r2, #8
 80023a8:	4013      	ands	r3, r2
 80023aa:	2b08      	cmp	r3, #8
 80023ac:	d122      	bne.n	80023f4 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	2204      	movs	r2, #4
 80023b6:	4013      	ands	r3, r2
 80023b8:	d110      	bne.n	80023dc <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	685a      	ldr	r2, [r3, #4]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	210c      	movs	r1, #12
 80023c6:	438a      	bics	r2, r1
 80023c8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ce:	4a10      	ldr	r2, [pc, #64]	; (8002410 <HAL_ADC_PollForConversion+0x12c>)
 80023d0:	4013      	ands	r3, r2
 80023d2:	2201      	movs	r2, #1
 80023d4:	431a      	orrs	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	639a      	str	r2, [r3, #56]	; 0x38
 80023da:	e00b      	b.n	80023f4 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e0:	2220      	movs	r2, #32
 80023e2:	431a      	orrs	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ec:	2201      	movs	r2, #1
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	7e1b      	ldrb	r3, [r3, #24]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d103      	bne.n	8002404 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	220c      	movs	r2, #12
 8002402:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	0018      	movs	r0, r3
 8002408:	46bd      	mov	sp, r7
 800240a:	b004      	add	sp, #16
 800240c:	bd80      	pop	{r7, pc}
 800240e:	46c0      	nop			; (mov r8, r8)
 8002410:	fffffefe 	.word	0xfffffefe

08002414 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002422:	0018      	movs	r0, r3
 8002424:	46bd      	mov	sp, r7
 8002426:	b002      	add	sp, #8
 8002428:	bd80      	pop	{r7, pc}
	...

0800242c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002436:	230f      	movs	r3, #15
 8002438:	18fb      	adds	r3, r7, r3
 800243a:	2200      	movs	r2, #0
 800243c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800243e:	2300      	movs	r3, #0
 8002440:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002446:	2380      	movs	r3, #128	; 0x80
 8002448:	055b      	lsls	r3, r3, #21
 800244a:	429a      	cmp	r2, r3
 800244c:	d011      	beq.n	8002472 <HAL_ADC_ConfigChannel+0x46>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002452:	2b01      	cmp	r3, #1
 8002454:	d00d      	beq.n	8002472 <HAL_ADC_ConfigChannel+0x46>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245a:	2b02      	cmp	r3, #2
 800245c:	d009      	beq.n	8002472 <HAL_ADC_ConfigChannel+0x46>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002462:	2b03      	cmp	r3, #3
 8002464:	d005      	beq.n	8002472 <HAL_ADC_ConfigChannel+0x46>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246a:	2b04      	cmp	r3, #4
 800246c:	d001      	beq.n	8002472 <HAL_ADC_ConfigChannel+0x46>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2234      	movs	r2, #52	; 0x34
 8002476:	5c9b      	ldrb	r3, [r3, r2]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d101      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x54>
 800247c:	2302      	movs	r3, #2
 800247e:	e0bb      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x1cc>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2234      	movs	r2, #52	; 0x34
 8002484:	2101      	movs	r1, #1
 8002486:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	2204      	movs	r2, #4
 8002490:	4013      	ands	r3, r2
 8002492:	d000      	beq.n	8002496 <HAL_ADC_ConfigChannel+0x6a>
 8002494:	e09f      	b.n	80025d6 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	4a59      	ldr	r2, [pc, #356]	; (8002600 <HAL_ADC_ConfigChannel+0x1d4>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d100      	bne.n	80024a2 <HAL_ADC_ConfigChannel+0x76>
 80024a0:	e077      	b.n	8002592 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2201      	movs	r2, #1
 80024ae:	409a      	lsls	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	430a      	orrs	r2, r1
 80024b6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024bc:	2380      	movs	r3, #128	; 0x80
 80024be:	055b      	lsls	r3, r3, #21
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d037      	beq.n	8002534 <HAL_ADC_ConfigChannel+0x108>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d033      	beq.n	8002534 <HAL_ADC_ConfigChannel+0x108>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d02f      	beq.n	8002534 <HAL_ADC_ConfigChannel+0x108>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d8:	2b03      	cmp	r3, #3
 80024da:	d02b      	beq.n	8002534 <HAL_ADC_ConfigChannel+0x108>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e0:	2b04      	cmp	r3, #4
 80024e2:	d027      	beq.n	8002534 <HAL_ADC_ConfigChannel+0x108>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e8:	2b05      	cmp	r3, #5
 80024ea:	d023      	beq.n	8002534 <HAL_ADC_ConfigChannel+0x108>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f0:	2b06      	cmp	r3, #6
 80024f2:	d01f      	beq.n	8002534 <HAL_ADC_ConfigChannel+0x108>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f8:	2b07      	cmp	r3, #7
 80024fa:	d01b      	beq.n	8002534 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	2107      	movs	r1, #7
 8002508:	400b      	ands	r3, r1
 800250a:	429a      	cmp	r2, r3
 800250c:	d012      	beq.n	8002534 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	695a      	ldr	r2, [r3, #20]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2107      	movs	r1, #7
 800251a:	438a      	bics	r2, r1
 800251c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6959      	ldr	r1, [r3, #20]
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	2207      	movs	r2, #7
 800252a:	401a      	ands	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	430a      	orrs	r2, r1
 8002532:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2b10      	cmp	r3, #16
 800253a:	d003      	beq.n	8002544 <HAL_ADC_ConfigChannel+0x118>
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2b11      	cmp	r3, #17
 8002542:	d152      	bne.n	80025ea <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002544:	4b2f      	ldr	r3, [pc, #188]	; (8002604 <HAL_ADC_ConfigChannel+0x1d8>)
 8002546:	6819      	ldr	r1, [r3, #0]
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2b10      	cmp	r3, #16
 800254e:	d102      	bne.n	8002556 <HAL_ADC_ConfigChannel+0x12a>
 8002550:	2380      	movs	r3, #128	; 0x80
 8002552:	041b      	lsls	r3, r3, #16
 8002554:	e001      	b.n	800255a <HAL_ADC_ConfigChannel+0x12e>
 8002556:	2380      	movs	r3, #128	; 0x80
 8002558:	03db      	lsls	r3, r3, #15
 800255a:	4a2a      	ldr	r2, [pc, #168]	; (8002604 <HAL_ADC_ConfigChannel+0x1d8>)
 800255c:	430b      	orrs	r3, r1
 800255e:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b10      	cmp	r3, #16
 8002566:	d140      	bne.n	80025ea <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002568:	4b27      	ldr	r3, [pc, #156]	; (8002608 <HAL_ADC_ConfigChannel+0x1dc>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4927      	ldr	r1, [pc, #156]	; (800260c <HAL_ADC_ConfigChannel+0x1e0>)
 800256e:	0018      	movs	r0, r3
 8002570:	f7fd fdca 	bl	8000108 <__udivsi3>
 8002574:	0003      	movs	r3, r0
 8002576:	001a      	movs	r2, r3
 8002578:	0013      	movs	r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	189b      	adds	r3, r3, r2
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002582:	e002      	b.n	800258a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	3b01      	subs	r3, #1
 8002588:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d1f9      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x158>
 8002590:	e02b      	b.n	80025ea <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2101      	movs	r1, #1
 800259e:	4099      	lsls	r1, r3
 80025a0:	000b      	movs	r3, r1
 80025a2:	43d9      	mvns	r1, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	400a      	ands	r2, r1
 80025aa:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b10      	cmp	r3, #16
 80025b2:	d003      	beq.n	80025bc <HAL_ADC_ConfigChannel+0x190>
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2b11      	cmp	r3, #17
 80025ba:	d116      	bne.n	80025ea <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80025bc:	4b11      	ldr	r3, [pc, #68]	; (8002604 <HAL_ADC_ConfigChannel+0x1d8>)
 80025be:	6819      	ldr	r1, [r3, #0]
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b10      	cmp	r3, #16
 80025c6:	d101      	bne.n	80025cc <HAL_ADC_ConfigChannel+0x1a0>
 80025c8:	4a11      	ldr	r2, [pc, #68]	; (8002610 <HAL_ADC_ConfigChannel+0x1e4>)
 80025ca:	e000      	b.n	80025ce <HAL_ADC_ConfigChannel+0x1a2>
 80025cc:	4a11      	ldr	r2, [pc, #68]	; (8002614 <HAL_ADC_ConfigChannel+0x1e8>)
 80025ce:	4b0d      	ldr	r3, [pc, #52]	; (8002604 <HAL_ADC_ConfigChannel+0x1d8>)
 80025d0:	400a      	ands	r2, r1
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	e009      	b.n	80025ea <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025da:	2220      	movs	r2, #32
 80025dc:	431a      	orrs	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80025e2:	230f      	movs	r3, #15
 80025e4:	18fb      	adds	r3, r7, r3
 80025e6:	2201      	movs	r2, #1
 80025e8:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2234      	movs	r2, #52	; 0x34
 80025ee:	2100      	movs	r1, #0
 80025f0:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80025f2:	230f      	movs	r3, #15
 80025f4:	18fb      	adds	r3, r7, r3
 80025f6:	781b      	ldrb	r3, [r3, #0]
}
 80025f8:	0018      	movs	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	b004      	add	sp, #16
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	00001001 	.word	0x00001001
 8002604:	40012708 	.word	0x40012708
 8002608:	20000000 	.word	0x20000000
 800260c:	000f4240 	.word	0x000f4240
 8002610:	ff7fffff 	.word	0xff7fffff
 8002614:	ffbfffff 	.word	0xffbfffff

08002618 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002620:	2300      	movs	r3, #0
 8002622:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002624:	2300      	movs	r3, #0
 8002626:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	2203      	movs	r2, #3
 8002630:	4013      	ands	r3, r2
 8002632:	2b01      	cmp	r3, #1
 8002634:	d112      	bne.n	800265c <ADC_Enable+0x44>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2201      	movs	r2, #1
 800263e:	4013      	ands	r3, r2
 8002640:	2b01      	cmp	r3, #1
 8002642:	d009      	beq.n	8002658 <ADC_Enable+0x40>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68da      	ldr	r2, [r3, #12]
 800264a:	2380      	movs	r3, #128	; 0x80
 800264c:	021b      	lsls	r3, r3, #8
 800264e:	401a      	ands	r2, r3
 8002650:	2380      	movs	r3, #128	; 0x80
 8002652:	021b      	lsls	r3, r3, #8
 8002654:	429a      	cmp	r2, r3
 8002656:	d101      	bne.n	800265c <ADC_Enable+0x44>
 8002658:	2301      	movs	r3, #1
 800265a:	e000      	b.n	800265e <ADC_Enable+0x46>
 800265c:	2300      	movs	r3, #0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d152      	bne.n	8002708 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	4a2a      	ldr	r2, [pc, #168]	; (8002714 <ADC_Enable+0xfc>)
 800266a:	4013      	ands	r3, r2
 800266c:	d00d      	beq.n	800268a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002672:	2210      	movs	r2, #16
 8002674:	431a      	orrs	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267e:	2201      	movs	r2, #1
 8002680:	431a      	orrs	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e03f      	b.n	800270a <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2101      	movs	r1, #1
 8002696:	430a      	orrs	r2, r1
 8002698:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800269a:	4b1f      	ldr	r3, [pc, #124]	; (8002718 <ADC_Enable+0x100>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	491f      	ldr	r1, [pc, #124]	; (800271c <ADC_Enable+0x104>)
 80026a0:	0018      	movs	r0, r3
 80026a2:	f7fd fd31 	bl	8000108 <__udivsi3>
 80026a6:	0003      	movs	r3, r0
 80026a8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80026aa:	e002      	b.n	80026b2 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1f9      	bne.n	80026ac <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80026b8:	f7ff fc52 	bl	8001f60 <HAL_GetTick>
 80026bc:	0003      	movs	r3, r0
 80026be:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80026c0:	e01b      	b.n	80026fa <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026c2:	f7ff fc4d 	bl	8001f60 <HAL_GetTick>
 80026c6:	0002      	movs	r2, r0
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d914      	bls.n	80026fa <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2201      	movs	r2, #1
 80026d8:	4013      	ands	r3, r2
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d00d      	beq.n	80026fa <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e2:	2210      	movs	r2, #16
 80026e4:	431a      	orrs	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ee:	2201      	movs	r2, #1
 80026f0:	431a      	orrs	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e007      	b.n	800270a <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2201      	movs	r2, #1
 8002702:	4013      	ands	r3, r2
 8002704:	2b01      	cmp	r3, #1
 8002706:	d1dc      	bne.n	80026c2 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	0018      	movs	r0, r3
 800270c:	46bd      	mov	sp, r7
 800270e:	b004      	add	sp, #16
 8002710:	bd80      	pop	{r7, pc}
 8002712:	46c0      	nop			; (mov r8, r8)
 8002714:	80000017 	.word	0x80000017
 8002718:	20000000 	.word	0x20000000
 800271c:	000f4240 	.word	0x000f4240

08002720 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002728:	2317      	movs	r3, #23
 800272a:	18fb      	adds	r3, r7, r3
 800272c:	2200      	movs	r2, #0
 800272e:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8002730:	2300      	movs	r3, #0
 8002732:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8002734:	2300      	movs	r3, #0
 8002736:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2234      	movs	r2, #52	; 0x34
 800273c:	5c9b      	ldrb	r3, [r3, r2]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d101      	bne.n	8002746 <HAL_ADCEx_Calibration_Start+0x26>
 8002742:	2302      	movs	r3, #2
 8002744:	e08d      	b.n	8002862 <HAL_ADCEx_Calibration_Start+0x142>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2234      	movs	r2, #52	; 0x34
 800274a:	2101      	movs	r1, #1
 800274c:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	2203      	movs	r2, #3
 8002756:	4013      	ands	r3, r2
 8002758:	2b01      	cmp	r3, #1
 800275a:	d112      	bne.n	8002782 <HAL_ADCEx_Calibration_Start+0x62>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2201      	movs	r2, #1
 8002764:	4013      	ands	r3, r2
 8002766:	2b01      	cmp	r3, #1
 8002768:	d009      	beq.n	800277e <HAL_ADCEx_Calibration_Start+0x5e>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68da      	ldr	r2, [r3, #12]
 8002770:	2380      	movs	r3, #128	; 0x80
 8002772:	021b      	lsls	r3, r3, #8
 8002774:	401a      	ands	r2, r3
 8002776:	2380      	movs	r3, #128	; 0x80
 8002778:	021b      	lsls	r3, r3, #8
 800277a:	429a      	cmp	r2, r3
 800277c:	d101      	bne.n	8002782 <HAL_ADCEx_Calibration_Start+0x62>
 800277e:	2301      	movs	r3, #1
 8002780:	e000      	b.n	8002784 <HAL_ADCEx_Calibration_Start+0x64>
 8002782:	2300      	movs	r3, #0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d15b      	bne.n	8002840 <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278c:	4a37      	ldr	r2, [pc, #220]	; (800286c <HAL_ADCEx_Calibration_Start+0x14c>)
 800278e:	4013      	ands	r3, r2
 8002790:	2202      	movs	r2, #2
 8002792:	431a      	orrs	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	2203      	movs	r2, #3
 80027a0:	4013      	ands	r3, r2
 80027a2:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68da      	ldr	r2, [r3, #12]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2103      	movs	r1, #3
 80027b0:	438a      	bics	r2, r1
 80027b2:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689a      	ldr	r2, [r3, #8]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2180      	movs	r1, #128	; 0x80
 80027c0:	0609      	lsls	r1, r1, #24
 80027c2:	430a      	orrs	r2, r1
 80027c4:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80027c6:	f7ff fbcb 	bl	8001f60 <HAL_GetTick>
 80027ca:	0003      	movs	r3, r0
 80027cc:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80027ce:	e01d      	b.n	800280c <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80027d0:	f7ff fbc6 	bl	8001f60 <HAL_GetTick>
 80027d4:	0002      	movs	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d916      	bls.n	800280c <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	0fdb      	lsrs	r3, r3, #31
 80027e6:	07da      	lsls	r2, r3, #31
 80027e8:	2380      	movs	r3, #128	; 0x80
 80027ea:	061b      	lsls	r3, r3, #24
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d10d      	bne.n	800280c <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f4:	2212      	movs	r2, #18
 80027f6:	4393      	bics	r3, r2
 80027f8:	2210      	movs	r2, #16
 80027fa:	431a      	orrs	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2234      	movs	r2, #52	; 0x34
 8002804:	2100      	movs	r1, #0
 8002806:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e02a      	b.n	8002862 <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	0fdb      	lsrs	r3, r3, #31
 8002814:	07da      	lsls	r2, r3, #31
 8002816:	2380      	movs	r3, #128	; 0x80
 8002818:	061b      	lsls	r3, r3, #24
 800281a:	429a      	cmp	r2, r3
 800281c:	d0d8      	beq.n	80027d0 <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68d9      	ldr	r1, [r3, #12]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	430a      	orrs	r2, r1
 800282c:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002832:	2203      	movs	r2, #3
 8002834:	4393      	bics	r3, r2
 8002836:	2201      	movs	r2, #1
 8002838:	431a      	orrs	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	639a      	str	r2, [r3, #56]	; 0x38
 800283e:	e009      	b.n	8002854 <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002844:	2220      	movs	r2, #32
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800284c:	2317      	movs	r3, #23
 800284e:	18fb      	adds	r3, r7, r3
 8002850:	2201      	movs	r2, #1
 8002852:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2234      	movs	r2, #52	; 0x34
 8002858:	2100      	movs	r1, #0
 800285a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800285c:	2317      	movs	r3, #23
 800285e:	18fb      	adds	r3, r7, r3
 8002860:	781b      	ldrb	r3, [r3, #0]
}
 8002862:	0018      	movs	r0, r3
 8002864:	46bd      	mov	sp, r7
 8002866:	b006      	add	sp, #24
 8002868:	bd80      	pop	{r7, pc}
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	fffffefd 	.word	0xfffffefd

08002870 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002870:	b590      	push	{r4, r7, lr}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	0002      	movs	r2, r0
 8002878:	6039      	str	r1, [r7, #0]
 800287a:	1dfb      	adds	r3, r7, #7
 800287c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800287e:	1dfb      	adds	r3, r7, #7
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	2b7f      	cmp	r3, #127	; 0x7f
 8002884:	d828      	bhi.n	80028d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002886:	4a2f      	ldr	r2, [pc, #188]	; (8002944 <__NVIC_SetPriority+0xd4>)
 8002888:	1dfb      	adds	r3, r7, #7
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	b25b      	sxtb	r3, r3
 800288e:	089b      	lsrs	r3, r3, #2
 8002890:	33c0      	adds	r3, #192	; 0xc0
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	589b      	ldr	r3, [r3, r2]
 8002896:	1dfa      	adds	r2, r7, #7
 8002898:	7812      	ldrb	r2, [r2, #0]
 800289a:	0011      	movs	r1, r2
 800289c:	2203      	movs	r2, #3
 800289e:	400a      	ands	r2, r1
 80028a0:	00d2      	lsls	r2, r2, #3
 80028a2:	21ff      	movs	r1, #255	; 0xff
 80028a4:	4091      	lsls	r1, r2
 80028a6:	000a      	movs	r2, r1
 80028a8:	43d2      	mvns	r2, r2
 80028aa:	401a      	ands	r2, r3
 80028ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	019b      	lsls	r3, r3, #6
 80028b2:	22ff      	movs	r2, #255	; 0xff
 80028b4:	401a      	ands	r2, r3
 80028b6:	1dfb      	adds	r3, r7, #7
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	0018      	movs	r0, r3
 80028bc:	2303      	movs	r3, #3
 80028be:	4003      	ands	r3, r0
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028c4:	481f      	ldr	r0, [pc, #124]	; (8002944 <__NVIC_SetPriority+0xd4>)
 80028c6:	1dfb      	adds	r3, r7, #7
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	b25b      	sxtb	r3, r3
 80028cc:	089b      	lsrs	r3, r3, #2
 80028ce:	430a      	orrs	r2, r1
 80028d0:	33c0      	adds	r3, #192	; 0xc0
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80028d6:	e031      	b.n	800293c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028d8:	4a1b      	ldr	r2, [pc, #108]	; (8002948 <__NVIC_SetPriority+0xd8>)
 80028da:	1dfb      	adds	r3, r7, #7
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	0019      	movs	r1, r3
 80028e0:	230f      	movs	r3, #15
 80028e2:	400b      	ands	r3, r1
 80028e4:	3b08      	subs	r3, #8
 80028e6:	089b      	lsrs	r3, r3, #2
 80028e8:	3306      	adds	r3, #6
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	18d3      	adds	r3, r2, r3
 80028ee:	3304      	adds	r3, #4
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	1dfa      	adds	r2, r7, #7
 80028f4:	7812      	ldrb	r2, [r2, #0]
 80028f6:	0011      	movs	r1, r2
 80028f8:	2203      	movs	r2, #3
 80028fa:	400a      	ands	r2, r1
 80028fc:	00d2      	lsls	r2, r2, #3
 80028fe:	21ff      	movs	r1, #255	; 0xff
 8002900:	4091      	lsls	r1, r2
 8002902:	000a      	movs	r2, r1
 8002904:	43d2      	mvns	r2, r2
 8002906:	401a      	ands	r2, r3
 8002908:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	019b      	lsls	r3, r3, #6
 800290e:	22ff      	movs	r2, #255	; 0xff
 8002910:	401a      	ands	r2, r3
 8002912:	1dfb      	adds	r3, r7, #7
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	0018      	movs	r0, r3
 8002918:	2303      	movs	r3, #3
 800291a:	4003      	ands	r3, r0
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002920:	4809      	ldr	r0, [pc, #36]	; (8002948 <__NVIC_SetPriority+0xd8>)
 8002922:	1dfb      	adds	r3, r7, #7
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	001c      	movs	r4, r3
 8002928:	230f      	movs	r3, #15
 800292a:	4023      	ands	r3, r4
 800292c:	3b08      	subs	r3, #8
 800292e:	089b      	lsrs	r3, r3, #2
 8002930:	430a      	orrs	r2, r1
 8002932:	3306      	adds	r3, #6
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	18c3      	adds	r3, r0, r3
 8002938:	3304      	adds	r3, #4
 800293a:	601a      	str	r2, [r3, #0]
}
 800293c:	46c0      	nop			; (mov r8, r8)
 800293e:	46bd      	mov	sp, r7
 8002940:	b003      	add	sp, #12
 8002942:	bd90      	pop	{r4, r7, pc}
 8002944:	e000e100 	.word	0xe000e100
 8002948:	e000ed00 	.word	0xe000ed00

0800294c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	1e5a      	subs	r2, r3, #1
 8002958:	2380      	movs	r3, #128	; 0x80
 800295a:	045b      	lsls	r3, r3, #17
 800295c:	429a      	cmp	r2, r3
 800295e:	d301      	bcc.n	8002964 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002960:	2301      	movs	r3, #1
 8002962:	e010      	b.n	8002986 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002964:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <SysTick_Config+0x44>)
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	3a01      	subs	r2, #1
 800296a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800296c:	2301      	movs	r3, #1
 800296e:	425b      	negs	r3, r3
 8002970:	2103      	movs	r1, #3
 8002972:	0018      	movs	r0, r3
 8002974:	f7ff ff7c 	bl	8002870 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002978:	4b05      	ldr	r3, [pc, #20]	; (8002990 <SysTick_Config+0x44>)
 800297a:	2200      	movs	r2, #0
 800297c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800297e:	4b04      	ldr	r3, [pc, #16]	; (8002990 <SysTick_Config+0x44>)
 8002980:	2207      	movs	r2, #7
 8002982:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002984:	2300      	movs	r3, #0
}
 8002986:	0018      	movs	r0, r3
 8002988:	46bd      	mov	sp, r7
 800298a:	b002      	add	sp, #8
 800298c:	bd80      	pop	{r7, pc}
 800298e:	46c0      	nop			; (mov r8, r8)
 8002990:	e000e010 	.word	0xe000e010

08002994 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	60b9      	str	r1, [r7, #8]
 800299c:	607a      	str	r2, [r7, #4]
 800299e:	210f      	movs	r1, #15
 80029a0:	187b      	adds	r3, r7, r1
 80029a2:	1c02      	adds	r2, r0, #0
 80029a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80029a6:	68ba      	ldr	r2, [r7, #8]
 80029a8:	187b      	adds	r3, r7, r1
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	b25b      	sxtb	r3, r3
 80029ae:	0011      	movs	r1, r2
 80029b0:	0018      	movs	r0, r3
 80029b2:	f7ff ff5d 	bl	8002870 <__NVIC_SetPriority>
}
 80029b6:	46c0      	nop			; (mov r8, r8)
 80029b8:	46bd      	mov	sp, r7
 80029ba:	b004      	add	sp, #16
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b082      	sub	sp, #8
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	0018      	movs	r0, r3
 80029ca:	f7ff ffbf 	bl	800294c <SysTick_Config>
 80029ce:	0003      	movs	r3, r0
}
 80029d0:	0018      	movs	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	b002      	add	sp, #8
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029e2:	2300      	movs	r3, #0
 80029e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029e6:	e14f      	b.n	8002c88 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2101      	movs	r1, #1
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	4091      	lsls	r1, r2
 80029f2:	000a      	movs	r2, r1
 80029f4:	4013      	ands	r3, r2
 80029f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d100      	bne.n	8002a00 <HAL_GPIO_Init+0x28>
 80029fe:	e140      	b.n	8002c82 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2203      	movs	r2, #3
 8002a06:	4013      	ands	r3, r2
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d005      	beq.n	8002a18 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	2203      	movs	r2, #3
 8002a12:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d130      	bne.n	8002a7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	2203      	movs	r2, #3
 8002a24:	409a      	lsls	r2, r3
 8002a26:	0013      	movs	r3, r2
 8002a28:	43da      	mvns	r2, r3
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	68da      	ldr	r2, [r3, #12]
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	409a      	lsls	r2, r3
 8002a3a:	0013      	movs	r3, r2
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a4e:	2201      	movs	r2, #1
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	409a      	lsls	r2, r3
 8002a54:	0013      	movs	r3, r2
 8002a56:	43da      	mvns	r2, r3
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	091b      	lsrs	r3, r3, #4
 8002a64:	2201      	movs	r2, #1
 8002a66:	401a      	ands	r2, r3
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	409a      	lsls	r2, r3
 8002a6c:	0013      	movs	r3, r2
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2203      	movs	r2, #3
 8002a80:	4013      	ands	r3, r2
 8002a82:	2b03      	cmp	r3, #3
 8002a84:	d017      	beq.n	8002ab6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	2203      	movs	r2, #3
 8002a92:	409a      	lsls	r2, r3
 8002a94:	0013      	movs	r3, r2
 8002a96:	43da      	mvns	r2, r3
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	689a      	ldr	r2, [r3, #8]
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	409a      	lsls	r2, r3
 8002aa8:	0013      	movs	r3, r2
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2203      	movs	r2, #3
 8002abc:	4013      	ands	r3, r2
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d123      	bne.n	8002b0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	08da      	lsrs	r2, r3, #3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	3208      	adds	r2, #8
 8002aca:	0092      	lsls	r2, r2, #2
 8002acc:	58d3      	ldr	r3, [r2, r3]
 8002ace:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	2207      	movs	r2, #7
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	220f      	movs	r2, #15
 8002ada:	409a      	lsls	r2, r3
 8002adc:	0013      	movs	r3, r2
 8002ade:	43da      	mvns	r2, r3
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	691a      	ldr	r2, [r3, #16]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	2107      	movs	r1, #7
 8002aee:	400b      	ands	r3, r1
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	409a      	lsls	r2, r3
 8002af4:	0013      	movs	r3, r2
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	08da      	lsrs	r2, r3, #3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3208      	adds	r2, #8
 8002b04:	0092      	lsls	r2, r2, #2
 8002b06:	6939      	ldr	r1, [r7, #16]
 8002b08:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	2203      	movs	r2, #3
 8002b16:	409a      	lsls	r2, r3
 8002b18:	0013      	movs	r3, r2
 8002b1a:	43da      	mvns	r2, r3
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2203      	movs	r2, #3
 8002b28:	401a      	ands	r2, r3
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	409a      	lsls	r2, r3
 8002b30:	0013      	movs	r3, r2
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	23c0      	movs	r3, #192	; 0xc0
 8002b44:	029b      	lsls	r3, r3, #10
 8002b46:	4013      	ands	r3, r2
 8002b48:	d100      	bne.n	8002b4c <HAL_GPIO_Init+0x174>
 8002b4a:	e09a      	b.n	8002c82 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b4c:	4b54      	ldr	r3, [pc, #336]	; (8002ca0 <HAL_GPIO_Init+0x2c8>)
 8002b4e:	699a      	ldr	r2, [r3, #24]
 8002b50:	4b53      	ldr	r3, [pc, #332]	; (8002ca0 <HAL_GPIO_Init+0x2c8>)
 8002b52:	2101      	movs	r1, #1
 8002b54:	430a      	orrs	r2, r1
 8002b56:	619a      	str	r2, [r3, #24]
 8002b58:	4b51      	ldr	r3, [pc, #324]	; (8002ca0 <HAL_GPIO_Init+0x2c8>)
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	4013      	ands	r3, r2
 8002b60:	60bb      	str	r3, [r7, #8]
 8002b62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b64:	4a4f      	ldr	r2, [pc, #316]	; (8002ca4 <HAL_GPIO_Init+0x2cc>)
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	089b      	lsrs	r3, r3, #2
 8002b6a:	3302      	adds	r3, #2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	589b      	ldr	r3, [r3, r2]
 8002b70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	2203      	movs	r2, #3
 8002b76:	4013      	ands	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	220f      	movs	r2, #15
 8002b7c:	409a      	lsls	r2, r3
 8002b7e:	0013      	movs	r3, r2
 8002b80:	43da      	mvns	r2, r3
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	4013      	ands	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	2390      	movs	r3, #144	; 0x90
 8002b8c:	05db      	lsls	r3, r3, #23
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d013      	beq.n	8002bba <HAL_GPIO_Init+0x1e2>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a44      	ldr	r2, [pc, #272]	; (8002ca8 <HAL_GPIO_Init+0x2d0>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d00d      	beq.n	8002bb6 <HAL_GPIO_Init+0x1de>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a43      	ldr	r2, [pc, #268]	; (8002cac <HAL_GPIO_Init+0x2d4>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d007      	beq.n	8002bb2 <HAL_GPIO_Init+0x1da>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a42      	ldr	r2, [pc, #264]	; (8002cb0 <HAL_GPIO_Init+0x2d8>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d101      	bne.n	8002bae <HAL_GPIO_Init+0x1d6>
 8002baa:	2303      	movs	r3, #3
 8002bac:	e006      	b.n	8002bbc <HAL_GPIO_Init+0x1e4>
 8002bae:	2305      	movs	r3, #5
 8002bb0:	e004      	b.n	8002bbc <HAL_GPIO_Init+0x1e4>
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	e002      	b.n	8002bbc <HAL_GPIO_Init+0x1e4>
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e000      	b.n	8002bbc <HAL_GPIO_Init+0x1e4>
 8002bba:	2300      	movs	r3, #0
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	2103      	movs	r1, #3
 8002bc0:	400a      	ands	r2, r1
 8002bc2:	0092      	lsls	r2, r2, #2
 8002bc4:	4093      	lsls	r3, r2
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002bcc:	4935      	ldr	r1, [pc, #212]	; (8002ca4 <HAL_GPIO_Init+0x2cc>)
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	089b      	lsrs	r3, r3, #2
 8002bd2:	3302      	adds	r3, #2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bda:	4b36      	ldr	r3, [pc, #216]	; (8002cb4 <HAL_GPIO_Init+0x2dc>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	43da      	mvns	r2, r3
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	4013      	ands	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	2380      	movs	r3, #128	; 0x80
 8002bf0:	035b      	lsls	r3, r3, #13
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	d003      	beq.n	8002bfe <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002bfe:	4b2d      	ldr	r3, [pc, #180]	; (8002cb4 <HAL_GPIO_Init+0x2dc>)
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002c04:	4b2b      	ldr	r3, [pc, #172]	; (8002cb4 <HAL_GPIO_Init+0x2dc>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	43da      	mvns	r2, r3
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	4013      	ands	r3, r2
 8002c12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685a      	ldr	r2, [r3, #4]
 8002c18:	2380      	movs	r3, #128	; 0x80
 8002c1a:	039b      	lsls	r3, r3, #14
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	d003      	beq.n	8002c28 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002c28:	4b22      	ldr	r3, [pc, #136]	; (8002cb4 <HAL_GPIO_Init+0x2dc>)
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002c2e:	4b21      	ldr	r3, [pc, #132]	; (8002cb4 <HAL_GPIO_Init+0x2dc>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	43da      	mvns	r2, r3
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685a      	ldr	r2, [r3, #4]
 8002c42:	2380      	movs	r3, #128	; 0x80
 8002c44:	029b      	lsls	r3, r3, #10
 8002c46:	4013      	ands	r3, r2
 8002c48:	d003      	beq.n	8002c52 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002c52:	4b18      	ldr	r3, [pc, #96]	; (8002cb4 <HAL_GPIO_Init+0x2dc>)
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002c58:	4b16      	ldr	r3, [pc, #88]	; (8002cb4 <HAL_GPIO_Init+0x2dc>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	43da      	mvns	r2, r3
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	4013      	ands	r3, r2
 8002c66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685a      	ldr	r2, [r3, #4]
 8002c6c:	2380      	movs	r3, #128	; 0x80
 8002c6e:	025b      	lsls	r3, r3, #9
 8002c70:	4013      	ands	r3, r2
 8002c72:	d003      	beq.n	8002c7c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002c7c:	4b0d      	ldr	r3, [pc, #52]	; (8002cb4 <HAL_GPIO_Init+0x2dc>)
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	3301      	adds	r3, #1
 8002c86:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	40da      	lsrs	r2, r3
 8002c90:	1e13      	subs	r3, r2, #0
 8002c92:	d000      	beq.n	8002c96 <HAL_GPIO_Init+0x2be>
 8002c94:	e6a8      	b.n	80029e8 <HAL_GPIO_Init+0x10>
  } 
}
 8002c96:	46c0      	nop			; (mov r8, r8)
 8002c98:	46c0      	nop			; (mov r8, r8)
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	b006      	add	sp, #24
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	40010000 	.word	0x40010000
 8002ca8:	48000400 	.word	0x48000400
 8002cac:	48000800 	.word	0x48000800
 8002cb0:	48000c00 	.word	0x48000c00
 8002cb4:	40010400 	.word	0x40010400

08002cb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	0008      	movs	r0, r1
 8002cc2:	0011      	movs	r1, r2
 8002cc4:	1cbb      	adds	r3, r7, #2
 8002cc6:	1c02      	adds	r2, r0, #0
 8002cc8:	801a      	strh	r2, [r3, #0]
 8002cca:	1c7b      	adds	r3, r7, #1
 8002ccc:	1c0a      	adds	r2, r1, #0
 8002cce:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cd0:	1c7b      	adds	r3, r7, #1
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d004      	beq.n	8002ce2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cd8:	1cbb      	adds	r3, r7, #2
 8002cda:	881a      	ldrh	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ce0:	e003      	b.n	8002cea <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ce2:	1cbb      	adds	r3, r7, #2
 8002ce4:	881a      	ldrh	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002cea:	46c0      	nop			; (mov r8, r8)
 8002cec:	46bd      	mov	sp, r7
 8002cee:	b002      	add	sp, #8
 8002cf0:	bd80      	pop	{r7, pc}
	...

08002cf4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b088      	sub	sp, #32
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e301      	b.n	800330a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	d100      	bne.n	8002d12 <HAL_RCC_OscConfig+0x1e>
 8002d10:	e08d      	b.n	8002e2e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002d12:	4bc3      	ldr	r3, [pc, #780]	; (8003020 <HAL_RCC_OscConfig+0x32c>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	220c      	movs	r2, #12
 8002d18:	4013      	ands	r3, r2
 8002d1a:	2b04      	cmp	r3, #4
 8002d1c:	d00e      	beq.n	8002d3c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d1e:	4bc0      	ldr	r3, [pc, #768]	; (8003020 <HAL_RCC_OscConfig+0x32c>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	220c      	movs	r2, #12
 8002d24:	4013      	ands	r3, r2
 8002d26:	2b08      	cmp	r3, #8
 8002d28:	d116      	bne.n	8002d58 <HAL_RCC_OscConfig+0x64>
 8002d2a:	4bbd      	ldr	r3, [pc, #756]	; (8003020 <HAL_RCC_OscConfig+0x32c>)
 8002d2c:	685a      	ldr	r2, [r3, #4]
 8002d2e:	2380      	movs	r3, #128	; 0x80
 8002d30:	025b      	lsls	r3, r3, #9
 8002d32:	401a      	ands	r2, r3
 8002d34:	2380      	movs	r3, #128	; 0x80
 8002d36:	025b      	lsls	r3, r3, #9
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d10d      	bne.n	8002d58 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d3c:	4bb8      	ldr	r3, [pc, #736]	; (8003020 <HAL_RCC_OscConfig+0x32c>)
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	2380      	movs	r3, #128	; 0x80
 8002d42:	029b      	lsls	r3, r3, #10
 8002d44:	4013      	ands	r3, r2
 8002d46:	d100      	bne.n	8002d4a <HAL_RCC_OscConfig+0x56>
 8002d48:	e070      	b.n	8002e2c <HAL_RCC_OscConfig+0x138>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d000      	beq.n	8002d54 <HAL_RCC_OscConfig+0x60>
 8002d52:	e06b      	b.n	8002e2c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e2d8      	b.n	800330a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d107      	bne.n	8002d70 <HAL_RCC_OscConfig+0x7c>
 8002d60:	4baf      	ldr	r3, [pc, #700]	; (8003020 <HAL_RCC_OscConfig+0x32c>)
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	4bae      	ldr	r3, [pc, #696]	; (8003020 <HAL_RCC_OscConfig+0x32c>)
 8002d66:	2180      	movs	r1, #128	; 0x80
 8002d68:	0249      	lsls	r1, r1, #9
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	e02f      	b.n	8002dd0 <HAL_RCC_OscConfig+0xdc>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d10c      	bne.n	8002d92 <HAL_RCC_OscConfig+0x9e>
 8002d78:	4ba9      	ldr	r3, [pc, #676]	; (8003020 <HAL_RCC_OscConfig+0x32c>)
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	4ba8      	ldr	r3, [pc, #672]	; (8003020 <HAL_RCC_OscConfig+0x32c>)
 8002d7e:	49a9      	ldr	r1, [pc, #676]	; (8003024 <HAL_RCC_OscConfig+0x330>)
 8002d80:	400a      	ands	r2, r1
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	4ba6      	ldr	r3, [pc, #664]	; (8003020 <HAL_RCC_OscConfig+0x32c>)
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	4ba5      	ldr	r3, [pc, #660]	; (8003020 <HAL_RCC_OscConfig+0x32c>)
 8002d8a:	49a7      	ldr	r1, [pc, #668]	; (8003028 <HAL_RCC_OscConfig+0x334>)
 8002d8c:	400a      	ands	r2, r1
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	e01e      	b.n	8002dd0 <HAL_RCC_OscConfig+0xdc>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b05      	cmp	r3, #5
 8002d98:	d10e      	bne.n	8002db8 <HAL_RCC_OscConfig+0xc4>
 8002d9a:	4ba1      	ldr	r3, [pc, #644]	; (8003020 <HAL_RCC_OscConfig+0x32c>)
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	4ba0      	ldr	r3, [pc, #640]	; (8003020 <HAL_RCC_OscConfig+0x32c>)
 8002da0:	2180      	movs	r1, #128	; 0x80
 8002da2:	02c9      	lsls	r1, r1, #11
 8002da4:	430a      	orrs	r2, r1
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	4b9d      	ldr	r3, [pc, #628]	; (8003020 <HAL_RCC_OscConfig+0x32c>)
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	4b9c      	ldr	r3, [pc, #624]	; (8003020 <HAL_RCC_OscConfig+0x32c>)
 8002dae:	2180      	movs	r1, #128	; 0x80
 8002db0:	0249      	lsls	r1, r1, #9
 8002db2:	430a      	orrs	r2, r1
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	e00b      	b.n	8002dd0 <HAL_RCC_OscConfig+0xdc>
 8002db8:	4b99      	ldr	r3, [pc, #612]	; (8003020 <HAL_RCC_OscConfig+0x32c>)
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	4b98      	ldr	r3, [pc, #608]	; (8003020 <HAL_RCC_OscConfig+0x32c>)
 8002dbe:	4999      	ldr	r1, [pc, #612]	; (8003024 <HAL_RCC_OscConfig+0x330>)
 8002dc0:	400a      	ands	r2, r1
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	4b96      	ldr	r3, [pc, #600]	; (8003020 <HAL_RCC_OscConfig+0x32c>)
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	4b95      	ldr	r3, [pc, #596]	; (8003020 <HAL_RCC_OscConfig+0x32c>)
 8002dca:	4997      	ldr	r1, [pc, #604]	; (8003028 <HAL_RCC_OscConfig+0x334>)
 8002dcc:	400a      	ands	r2, r1
 8002dce:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d014      	beq.n	8002e02 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd8:	f7ff f8c2 	bl	8001f60 <HAL_GetTick>
 8002ddc:	0003      	movs	r3, r0
 8002dde:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de0:	e008      	b.n	8002df4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002de2:	f7ff f8bd 	bl	8001f60 <HAL_GetTick>
 8002de6:	0002      	movs	r2, r0
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b64      	cmp	r3, #100	; 0x64
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e28a      	b.n	800330a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002df4:	4b8a      	ldr	r3, [pc, #552]	; (8003020 <HAL_RCC_OscConfig+0x32c>)
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	2380      	movs	r3, #128	; 0x80
 8002dfa:	029b      	lsls	r3, r3, #10
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	d0f0      	beq.n	8002de2 <HAL_RCC_OscConfig+0xee>
 8002e00:	e015      	b.n	8002e2e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e02:	f7ff f8ad 	bl	8001f60 <HAL_GetTick>
 8002e06:	0003      	movs	r3, r0
 8002e08:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e0c:	f7ff f8a8 	bl	8001f60 <HAL_GetTick>
 8002e10:	0002      	movs	r2, r0
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b64      	cmp	r3, #100	; 0x64
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e275      	b.n	800330a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e1e:	4b80      	ldr	r3, [pc, #512]	; (8003020 <HAL_RCC_OscConfig+0x32c>)
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	2380      	movs	r3, #128	; 0x80
 8002e24:	029b      	lsls	r3, r3, #10
 8002e26:	4013      	ands	r3, r2
 8002e28:	d1f0      	bne.n	8002e0c <HAL_RCC_OscConfig+0x118>
 8002e2a:	e000      	b.n	8002e2e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e2c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2202      	movs	r2, #2
 8002e34:	4013      	ands	r3, r2
 8002e36:	d100      	bne.n	8002e3a <HAL_RCC_OscConfig+0x146>
 8002e38:	e069      	b.n	8002f0e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002e3a:	4b79      	ldr	r3, [pc, #484]	; (8003020 <HAL_RCC_OscConfig+0x32c>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	220c      	movs	r2, #12
 8002e40:	4013      	ands	r3, r2
 8002e42:	d00b      	beq.n	8002e5c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e44:	4b76      	ldr	r3, [pc, #472]	; (8003020 <HAL_RCC_OscConfig+0x32c>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	220c      	movs	r2, #12
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	d11c      	bne.n	8002e8a <HAL_RCC_OscConfig+0x196>
 8002e50:	4b73      	ldr	r3, [pc, #460]	; (8003020 <HAL_RCC_OscConfig+0x32c>)
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	2380      	movs	r3, #128	; 0x80
 8002e56:	025b      	lsls	r3, r3, #9
 8002e58:	4013      	ands	r3, r2
 8002e5a:	d116      	bne.n	8002e8a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e5c:	4b70      	ldr	r3, [pc, #448]	; (8003020 <HAL_RCC_OscConfig+0x32c>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2202      	movs	r2, #2
 8002e62:	4013      	ands	r3, r2
 8002e64:	d005      	beq.n	8002e72 <HAL_RCC_OscConfig+0x17e>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d001      	beq.n	8002e72 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e24b      	b.n	800330a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e72:	4b6b      	ldr	r3, [pc, #428]	; (8003020 <HAL_RCC_OscConfig+0x32c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	22f8      	movs	r2, #248	; 0xf8
 8002e78:	4393      	bics	r3, r2
 8002e7a:	0019      	movs	r1, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	00da      	lsls	r2, r3, #3
 8002e82:	4b67      	ldr	r3, [pc, #412]	; (8003020 <HAL_RCC_OscConfig+0x32c>)
 8002e84:	430a      	orrs	r2, r1
 8002e86:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e88:	e041      	b.n	8002f0e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d024      	beq.n	8002edc <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e92:	4b63      	ldr	r3, [pc, #396]	; (8003020 <HAL_RCC_OscConfig+0x32c>)
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	4b62      	ldr	r3, [pc, #392]	; (8003020 <HAL_RCC_OscConfig+0x32c>)
 8002e98:	2101      	movs	r1, #1
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9e:	f7ff f85f 	bl	8001f60 <HAL_GetTick>
 8002ea2:	0003      	movs	r3, r0
 8002ea4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ea8:	f7ff f85a 	bl	8001f60 <HAL_GetTick>
 8002eac:	0002      	movs	r2, r0
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e227      	b.n	800330a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eba:	4b59      	ldr	r3, [pc, #356]	; (8003020 <HAL_RCC_OscConfig+0x32c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	d0f1      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec4:	4b56      	ldr	r3, [pc, #344]	; (8003020 <HAL_RCC_OscConfig+0x32c>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	22f8      	movs	r2, #248	; 0xf8
 8002eca:	4393      	bics	r3, r2
 8002ecc:	0019      	movs	r1, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	00da      	lsls	r2, r3, #3
 8002ed4:	4b52      	ldr	r3, [pc, #328]	; (8003020 <HAL_RCC_OscConfig+0x32c>)
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	e018      	b.n	8002f0e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002edc:	4b50      	ldr	r3, [pc, #320]	; (8003020 <HAL_RCC_OscConfig+0x32c>)
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	4b4f      	ldr	r3, [pc, #316]	; (8003020 <HAL_RCC_OscConfig+0x32c>)
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	438a      	bics	r2, r1
 8002ee6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee8:	f7ff f83a 	bl	8001f60 <HAL_GetTick>
 8002eec:	0003      	movs	r3, r0
 8002eee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ef0:	e008      	b.n	8002f04 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ef2:	f7ff f835 	bl	8001f60 <HAL_GetTick>
 8002ef6:	0002      	movs	r2, r0
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e202      	b.n	800330a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f04:	4b46      	ldr	r3, [pc, #280]	; (8003020 <HAL_RCC_OscConfig+0x32c>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2202      	movs	r2, #2
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	d1f1      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2208      	movs	r2, #8
 8002f14:	4013      	ands	r3, r2
 8002f16:	d036      	beq.n	8002f86 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	69db      	ldr	r3, [r3, #28]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d019      	beq.n	8002f54 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f20:	4b3f      	ldr	r3, [pc, #252]	; (8003020 <HAL_RCC_OscConfig+0x32c>)
 8002f22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f24:	4b3e      	ldr	r3, [pc, #248]	; (8003020 <HAL_RCC_OscConfig+0x32c>)
 8002f26:	2101      	movs	r1, #1
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2c:	f7ff f818 	bl	8001f60 <HAL_GetTick>
 8002f30:	0003      	movs	r3, r0
 8002f32:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f34:	e008      	b.n	8002f48 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f36:	f7ff f813 	bl	8001f60 <HAL_GetTick>
 8002f3a:	0002      	movs	r2, r0
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e1e0      	b.n	800330a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f48:	4b35      	ldr	r3, [pc, #212]	; (8003020 <HAL_RCC_OscConfig+0x32c>)
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	4013      	ands	r3, r2
 8002f50:	d0f1      	beq.n	8002f36 <HAL_RCC_OscConfig+0x242>
 8002f52:	e018      	b.n	8002f86 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f54:	4b32      	ldr	r3, [pc, #200]	; (8003020 <HAL_RCC_OscConfig+0x32c>)
 8002f56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f58:	4b31      	ldr	r3, [pc, #196]	; (8003020 <HAL_RCC_OscConfig+0x32c>)
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	438a      	bics	r2, r1
 8002f5e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f60:	f7fe fffe 	bl	8001f60 <HAL_GetTick>
 8002f64:	0003      	movs	r3, r0
 8002f66:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f68:	e008      	b.n	8002f7c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f6a:	f7fe fff9 	bl	8001f60 <HAL_GetTick>
 8002f6e:	0002      	movs	r2, r0
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e1c6      	b.n	800330a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f7c:	4b28      	ldr	r3, [pc, #160]	; (8003020 <HAL_RCC_OscConfig+0x32c>)
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	2202      	movs	r2, #2
 8002f82:	4013      	ands	r3, r2
 8002f84:	d1f1      	bne.n	8002f6a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2204      	movs	r2, #4
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	d100      	bne.n	8002f92 <HAL_RCC_OscConfig+0x29e>
 8002f90:	e0b4      	b.n	80030fc <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f92:	201f      	movs	r0, #31
 8002f94:	183b      	adds	r3, r7, r0
 8002f96:	2200      	movs	r2, #0
 8002f98:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f9a:	4b21      	ldr	r3, [pc, #132]	; (8003020 <HAL_RCC_OscConfig+0x32c>)
 8002f9c:	69da      	ldr	r2, [r3, #28]
 8002f9e:	2380      	movs	r3, #128	; 0x80
 8002fa0:	055b      	lsls	r3, r3, #21
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	d110      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fa6:	4b1e      	ldr	r3, [pc, #120]	; (8003020 <HAL_RCC_OscConfig+0x32c>)
 8002fa8:	69da      	ldr	r2, [r3, #28]
 8002faa:	4b1d      	ldr	r3, [pc, #116]	; (8003020 <HAL_RCC_OscConfig+0x32c>)
 8002fac:	2180      	movs	r1, #128	; 0x80
 8002fae:	0549      	lsls	r1, r1, #21
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	61da      	str	r2, [r3, #28]
 8002fb4:	4b1a      	ldr	r3, [pc, #104]	; (8003020 <HAL_RCC_OscConfig+0x32c>)
 8002fb6:	69da      	ldr	r2, [r3, #28]
 8002fb8:	2380      	movs	r3, #128	; 0x80
 8002fba:	055b      	lsls	r3, r3, #21
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002fc2:	183b      	adds	r3, r7, r0
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc8:	4b18      	ldr	r3, [pc, #96]	; (800302c <HAL_RCC_OscConfig+0x338>)
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	2380      	movs	r3, #128	; 0x80
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	d11a      	bne.n	800300a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fd4:	4b15      	ldr	r3, [pc, #84]	; (800302c <HAL_RCC_OscConfig+0x338>)
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	4b14      	ldr	r3, [pc, #80]	; (800302c <HAL_RCC_OscConfig+0x338>)
 8002fda:	2180      	movs	r1, #128	; 0x80
 8002fdc:	0049      	lsls	r1, r1, #1
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fe2:	f7fe ffbd 	bl	8001f60 <HAL_GetTick>
 8002fe6:	0003      	movs	r3, r0
 8002fe8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fec:	f7fe ffb8 	bl	8001f60 <HAL_GetTick>
 8002ff0:	0002      	movs	r2, r0
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b64      	cmp	r3, #100	; 0x64
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e185      	b.n	800330a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ffe:	4b0b      	ldr	r3, [pc, #44]	; (800302c <HAL_RCC_OscConfig+0x338>)
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	2380      	movs	r3, #128	; 0x80
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	4013      	ands	r3, r2
 8003008:	d0f0      	beq.n	8002fec <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d10e      	bne.n	8003030 <HAL_RCC_OscConfig+0x33c>
 8003012:	4b03      	ldr	r3, [pc, #12]	; (8003020 <HAL_RCC_OscConfig+0x32c>)
 8003014:	6a1a      	ldr	r2, [r3, #32]
 8003016:	4b02      	ldr	r3, [pc, #8]	; (8003020 <HAL_RCC_OscConfig+0x32c>)
 8003018:	2101      	movs	r1, #1
 800301a:	430a      	orrs	r2, r1
 800301c:	621a      	str	r2, [r3, #32]
 800301e:	e035      	b.n	800308c <HAL_RCC_OscConfig+0x398>
 8003020:	40021000 	.word	0x40021000
 8003024:	fffeffff 	.word	0xfffeffff
 8003028:	fffbffff 	.word	0xfffbffff
 800302c:	40007000 	.word	0x40007000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10c      	bne.n	8003052 <HAL_RCC_OscConfig+0x35e>
 8003038:	4bb6      	ldr	r3, [pc, #728]	; (8003314 <HAL_RCC_OscConfig+0x620>)
 800303a:	6a1a      	ldr	r2, [r3, #32]
 800303c:	4bb5      	ldr	r3, [pc, #724]	; (8003314 <HAL_RCC_OscConfig+0x620>)
 800303e:	2101      	movs	r1, #1
 8003040:	438a      	bics	r2, r1
 8003042:	621a      	str	r2, [r3, #32]
 8003044:	4bb3      	ldr	r3, [pc, #716]	; (8003314 <HAL_RCC_OscConfig+0x620>)
 8003046:	6a1a      	ldr	r2, [r3, #32]
 8003048:	4bb2      	ldr	r3, [pc, #712]	; (8003314 <HAL_RCC_OscConfig+0x620>)
 800304a:	2104      	movs	r1, #4
 800304c:	438a      	bics	r2, r1
 800304e:	621a      	str	r2, [r3, #32]
 8003050:	e01c      	b.n	800308c <HAL_RCC_OscConfig+0x398>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	2b05      	cmp	r3, #5
 8003058:	d10c      	bne.n	8003074 <HAL_RCC_OscConfig+0x380>
 800305a:	4bae      	ldr	r3, [pc, #696]	; (8003314 <HAL_RCC_OscConfig+0x620>)
 800305c:	6a1a      	ldr	r2, [r3, #32]
 800305e:	4bad      	ldr	r3, [pc, #692]	; (8003314 <HAL_RCC_OscConfig+0x620>)
 8003060:	2104      	movs	r1, #4
 8003062:	430a      	orrs	r2, r1
 8003064:	621a      	str	r2, [r3, #32]
 8003066:	4bab      	ldr	r3, [pc, #684]	; (8003314 <HAL_RCC_OscConfig+0x620>)
 8003068:	6a1a      	ldr	r2, [r3, #32]
 800306a:	4baa      	ldr	r3, [pc, #680]	; (8003314 <HAL_RCC_OscConfig+0x620>)
 800306c:	2101      	movs	r1, #1
 800306e:	430a      	orrs	r2, r1
 8003070:	621a      	str	r2, [r3, #32]
 8003072:	e00b      	b.n	800308c <HAL_RCC_OscConfig+0x398>
 8003074:	4ba7      	ldr	r3, [pc, #668]	; (8003314 <HAL_RCC_OscConfig+0x620>)
 8003076:	6a1a      	ldr	r2, [r3, #32]
 8003078:	4ba6      	ldr	r3, [pc, #664]	; (8003314 <HAL_RCC_OscConfig+0x620>)
 800307a:	2101      	movs	r1, #1
 800307c:	438a      	bics	r2, r1
 800307e:	621a      	str	r2, [r3, #32]
 8003080:	4ba4      	ldr	r3, [pc, #656]	; (8003314 <HAL_RCC_OscConfig+0x620>)
 8003082:	6a1a      	ldr	r2, [r3, #32]
 8003084:	4ba3      	ldr	r3, [pc, #652]	; (8003314 <HAL_RCC_OscConfig+0x620>)
 8003086:	2104      	movs	r1, #4
 8003088:	438a      	bics	r2, r1
 800308a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d014      	beq.n	80030be <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003094:	f7fe ff64 	bl	8001f60 <HAL_GetTick>
 8003098:	0003      	movs	r3, r0
 800309a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800309c:	e009      	b.n	80030b2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800309e:	f7fe ff5f 	bl	8001f60 <HAL_GetTick>
 80030a2:	0002      	movs	r2, r0
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	4a9b      	ldr	r2, [pc, #620]	; (8003318 <HAL_RCC_OscConfig+0x624>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e12b      	b.n	800330a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b2:	4b98      	ldr	r3, [pc, #608]	; (8003314 <HAL_RCC_OscConfig+0x620>)
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	2202      	movs	r2, #2
 80030b8:	4013      	ands	r3, r2
 80030ba:	d0f0      	beq.n	800309e <HAL_RCC_OscConfig+0x3aa>
 80030bc:	e013      	b.n	80030e6 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030be:	f7fe ff4f 	bl	8001f60 <HAL_GetTick>
 80030c2:	0003      	movs	r3, r0
 80030c4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030c6:	e009      	b.n	80030dc <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030c8:	f7fe ff4a 	bl	8001f60 <HAL_GetTick>
 80030cc:	0002      	movs	r2, r0
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	4a91      	ldr	r2, [pc, #580]	; (8003318 <HAL_RCC_OscConfig+0x624>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e116      	b.n	800330a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030dc:	4b8d      	ldr	r3, [pc, #564]	; (8003314 <HAL_RCC_OscConfig+0x620>)
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	2202      	movs	r2, #2
 80030e2:	4013      	ands	r3, r2
 80030e4:	d1f0      	bne.n	80030c8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030e6:	231f      	movs	r3, #31
 80030e8:	18fb      	adds	r3, r7, r3
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d105      	bne.n	80030fc <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030f0:	4b88      	ldr	r3, [pc, #544]	; (8003314 <HAL_RCC_OscConfig+0x620>)
 80030f2:	69da      	ldr	r2, [r3, #28]
 80030f4:	4b87      	ldr	r3, [pc, #540]	; (8003314 <HAL_RCC_OscConfig+0x620>)
 80030f6:	4989      	ldr	r1, [pc, #548]	; (800331c <HAL_RCC_OscConfig+0x628>)
 80030f8:	400a      	ands	r2, r1
 80030fa:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2210      	movs	r2, #16
 8003102:	4013      	ands	r3, r2
 8003104:	d063      	beq.n	80031ce <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d12a      	bne.n	8003164 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800310e:	4b81      	ldr	r3, [pc, #516]	; (8003314 <HAL_RCC_OscConfig+0x620>)
 8003110:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003112:	4b80      	ldr	r3, [pc, #512]	; (8003314 <HAL_RCC_OscConfig+0x620>)
 8003114:	2104      	movs	r1, #4
 8003116:	430a      	orrs	r2, r1
 8003118:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800311a:	4b7e      	ldr	r3, [pc, #504]	; (8003314 <HAL_RCC_OscConfig+0x620>)
 800311c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800311e:	4b7d      	ldr	r3, [pc, #500]	; (8003314 <HAL_RCC_OscConfig+0x620>)
 8003120:	2101      	movs	r1, #1
 8003122:	430a      	orrs	r2, r1
 8003124:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003126:	f7fe ff1b 	bl	8001f60 <HAL_GetTick>
 800312a:	0003      	movs	r3, r0
 800312c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003130:	f7fe ff16 	bl	8001f60 <HAL_GetTick>
 8003134:	0002      	movs	r2, r0
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e0e3      	b.n	800330a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003142:	4b74      	ldr	r3, [pc, #464]	; (8003314 <HAL_RCC_OscConfig+0x620>)
 8003144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003146:	2202      	movs	r2, #2
 8003148:	4013      	ands	r3, r2
 800314a:	d0f1      	beq.n	8003130 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800314c:	4b71      	ldr	r3, [pc, #452]	; (8003314 <HAL_RCC_OscConfig+0x620>)
 800314e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003150:	22f8      	movs	r2, #248	; 0xf8
 8003152:	4393      	bics	r3, r2
 8003154:	0019      	movs	r1, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	00da      	lsls	r2, r3, #3
 800315c:	4b6d      	ldr	r3, [pc, #436]	; (8003314 <HAL_RCC_OscConfig+0x620>)
 800315e:	430a      	orrs	r2, r1
 8003160:	635a      	str	r2, [r3, #52]	; 0x34
 8003162:	e034      	b.n	80031ce <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	3305      	adds	r3, #5
 800316a:	d111      	bne.n	8003190 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800316c:	4b69      	ldr	r3, [pc, #420]	; (8003314 <HAL_RCC_OscConfig+0x620>)
 800316e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003170:	4b68      	ldr	r3, [pc, #416]	; (8003314 <HAL_RCC_OscConfig+0x620>)
 8003172:	2104      	movs	r1, #4
 8003174:	438a      	bics	r2, r1
 8003176:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003178:	4b66      	ldr	r3, [pc, #408]	; (8003314 <HAL_RCC_OscConfig+0x620>)
 800317a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800317c:	22f8      	movs	r2, #248	; 0xf8
 800317e:	4393      	bics	r3, r2
 8003180:	0019      	movs	r1, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	00da      	lsls	r2, r3, #3
 8003188:	4b62      	ldr	r3, [pc, #392]	; (8003314 <HAL_RCC_OscConfig+0x620>)
 800318a:	430a      	orrs	r2, r1
 800318c:	635a      	str	r2, [r3, #52]	; 0x34
 800318e:	e01e      	b.n	80031ce <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003190:	4b60      	ldr	r3, [pc, #384]	; (8003314 <HAL_RCC_OscConfig+0x620>)
 8003192:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003194:	4b5f      	ldr	r3, [pc, #380]	; (8003314 <HAL_RCC_OscConfig+0x620>)
 8003196:	2104      	movs	r1, #4
 8003198:	430a      	orrs	r2, r1
 800319a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800319c:	4b5d      	ldr	r3, [pc, #372]	; (8003314 <HAL_RCC_OscConfig+0x620>)
 800319e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031a0:	4b5c      	ldr	r3, [pc, #368]	; (8003314 <HAL_RCC_OscConfig+0x620>)
 80031a2:	2101      	movs	r1, #1
 80031a4:	438a      	bics	r2, r1
 80031a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031a8:	f7fe feda 	bl	8001f60 <HAL_GetTick>
 80031ac:	0003      	movs	r3, r0
 80031ae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80031b0:	e008      	b.n	80031c4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80031b2:	f7fe fed5 	bl	8001f60 <HAL_GetTick>
 80031b6:	0002      	movs	r2, r0
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d901      	bls.n	80031c4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e0a2      	b.n	800330a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80031c4:	4b53      	ldr	r3, [pc, #332]	; (8003314 <HAL_RCC_OscConfig+0x620>)
 80031c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031c8:	2202      	movs	r2, #2
 80031ca:	4013      	ands	r3, r2
 80031cc:	d1f1      	bne.n	80031b2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d100      	bne.n	80031d8 <HAL_RCC_OscConfig+0x4e4>
 80031d6:	e097      	b.n	8003308 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031d8:	4b4e      	ldr	r3, [pc, #312]	; (8003314 <HAL_RCC_OscConfig+0x620>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	220c      	movs	r2, #12
 80031de:	4013      	ands	r3, r2
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d100      	bne.n	80031e6 <HAL_RCC_OscConfig+0x4f2>
 80031e4:	e06b      	b.n	80032be <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d14c      	bne.n	8003288 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ee:	4b49      	ldr	r3, [pc, #292]	; (8003314 <HAL_RCC_OscConfig+0x620>)
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	4b48      	ldr	r3, [pc, #288]	; (8003314 <HAL_RCC_OscConfig+0x620>)
 80031f4:	494a      	ldr	r1, [pc, #296]	; (8003320 <HAL_RCC_OscConfig+0x62c>)
 80031f6:	400a      	ands	r2, r1
 80031f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031fa:	f7fe feb1 	bl	8001f60 <HAL_GetTick>
 80031fe:	0003      	movs	r3, r0
 8003200:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003204:	f7fe feac 	bl	8001f60 <HAL_GetTick>
 8003208:	0002      	movs	r2, r0
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e079      	b.n	800330a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003216:	4b3f      	ldr	r3, [pc, #252]	; (8003314 <HAL_RCC_OscConfig+0x620>)
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	2380      	movs	r3, #128	; 0x80
 800321c:	049b      	lsls	r3, r3, #18
 800321e:	4013      	ands	r3, r2
 8003220:	d1f0      	bne.n	8003204 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003222:	4b3c      	ldr	r3, [pc, #240]	; (8003314 <HAL_RCC_OscConfig+0x620>)
 8003224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003226:	220f      	movs	r2, #15
 8003228:	4393      	bics	r3, r2
 800322a:	0019      	movs	r1, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003230:	4b38      	ldr	r3, [pc, #224]	; (8003314 <HAL_RCC_OscConfig+0x620>)
 8003232:	430a      	orrs	r2, r1
 8003234:	62da      	str	r2, [r3, #44]	; 0x2c
 8003236:	4b37      	ldr	r3, [pc, #220]	; (8003314 <HAL_RCC_OscConfig+0x620>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	4a3a      	ldr	r2, [pc, #232]	; (8003324 <HAL_RCC_OscConfig+0x630>)
 800323c:	4013      	ands	r3, r2
 800323e:	0019      	movs	r1, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	431a      	orrs	r2, r3
 800324a:	4b32      	ldr	r3, [pc, #200]	; (8003314 <HAL_RCC_OscConfig+0x620>)
 800324c:	430a      	orrs	r2, r1
 800324e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003250:	4b30      	ldr	r3, [pc, #192]	; (8003314 <HAL_RCC_OscConfig+0x620>)
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	4b2f      	ldr	r3, [pc, #188]	; (8003314 <HAL_RCC_OscConfig+0x620>)
 8003256:	2180      	movs	r1, #128	; 0x80
 8003258:	0449      	lsls	r1, r1, #17
 800325a:	430a      	orrs	r2, r1
 800325c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325e:	f7fe fe7f 	bl	8001f60 <HAL_GetTick>
 8003262:	0003      	movs	r3, r0
 8003264:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003268:	f7fe fe7a 	bl	8001f60 <HAL_GetTick>
 800326c:	0002      	movs	r2, r0
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e047      	b.n	800330a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800327a:	4b26      	ldr	r3, [pc, #152]	; (8003314 <HAL_RCC_OscConfig+0x620>)
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	2380      	movs	r3, #128	; 0x80
 8003280:	049b      	lsls	r3, r3, #18
 8003282:	4013      	ands	r3, r2
 8003284:	d0f0      	beq.n	8003268 <HAL_RCC_OscConfig+0x574>
 8003286:	e03f      	b.n	8003308 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003288:	4b22      	ldr	r3, [pc, #136]	; (8003314 <HAL_RCC_OscConfig+0x620>)
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	4b21      	ldr	r3, [pc, #132]	; (8003314 <HAL_RCC_OscConfig+0x620>)
 800328e:	4924      	ldr	r1, [pc, #144]	; (8003320 <HAL_RCC_OscConfig+0x62c>)
 8003290:	400a      	ands	r2, r1
 8003292:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003294:	f7fe fe64 	bl	8001f60 <HAL_GetTick>
 8003298:	0003      	movs	r3, r0
 800329a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800329c:	e008      	b.n	80032b0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800329e:	f7fe fe5f 	bl	8001f60 <HAL_GetTick>
 80032a2:	0002      	movs	r2, r0
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e02c      	b.n	800330a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032b0:	4b18      	ldr	r3, [pc, #96]	; (8003314 <HAL_RCC_OscConfig+0x620>)
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	2380      	movs	r3, #128	; 0x80
 80032b6:	049b      	lsls	r3, r3, #18
 80032b8:	4013      	ands	r3, r2
 80032ba:	d1f0      	bne.n	800329e <HAL_RCC_OscConfig+0x5aa>
 80032bc:	e024      	b.n	8003308 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d101      	bne.n	80032ca <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e01f      	b.n	800330a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80032ca:	4b12      	ldr	r3, [pc, #72]	; (8003314 <HAL_RCC_OscConfig+0x620>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80032d0:	4b10      	ldr	r3, [pc, #64]	; (8003314 <HAL_RCC_OscConfig+0x620>)
 80032d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	2380      	movs	r3, #128	; 0x80
 80032da:	025b      	lsls	r3, r3, #9
 80032dc:	401a      	ands	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d10e      	bne.n	8003304 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	220f      	movs	r2, #15
 80032ea:	401a      	ands	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d107      	bne.n	8003304 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	23f0      	movs	r3, #240	; 0xf0
 80032f8:	039b      	lsls	r3, r3, #14
 80032fa:	401a      	ands	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003300:	429a      	cmp	r2, r3
 8003302:	d001      	beq.n	8003308 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e000      	b.n	800330a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	0018      	movs	r0, r3
 800330c:	46bd      	mov	sp, r7
 800330e:	b008      	add	sp, #32
 8003310:	bd80      	pop	{r7, pc}
 8003312:	46c0      	nop			; (mov r8, r8)
 8003314:	40021000 	.word	0x40021000
 8003318:	00001388 	.word	0x00001388
 800331c:	efffffff 	.word	0xefffffff
 8003320:	feffffff 	.word	0xfeffffff
 8003324:	ffc2ffff 	.word	0xffc2ffff

08003328 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e0b3      	b.n	80034a4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800333c:	4b5b      	ldr	r3, [pc, #364]	; (80034ac <HAL_RCC_ClockConfig+0x184>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2201      	movs	r2, #1
 8003342:	4013      	ands	r3, r2
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	429a      	cmp	r2, r3
 8003348:	d911      	bls.n	800336e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800334a:	4b58      	ldr	r3, [pc, #352]	; (80034ac <HAL_RCC_ClockConfig+0x184>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2201      	movs	r2, #1
 8003350:	4393      	bics	r3, r2
 8003352:	0019      	movs	r1, r3
 8003354:	4b55      	ldr	r3, [pc, #340]	; (80034ac <HAL_RCC_ClockConfig+0x184>)
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800335c:	4b53      	ldr	r3, [pc, #332]	; (80034ac <HAL_RCC_ClockConfig+0x184>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2201      	movs	r2, #1
 8003362:	4013      	ands	r3, r2
 8003364:	683a      	ldr	r2, [r7, #0]
 8003366:	429a      	cmp	r2, r3
 8003368:	d001      	beq.n	800336e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e09a      	b.n	80034a4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2202      	movs	r2, #2
 8003374:	4013      	ands	r3, r2
 8003376:	d015      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2204      	movs	r2, #4
 800337e:	4013      	ands	r3, r2
 8003380:	d006      	beq.n	8003390 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003382:	4b4b      	ldr	r3, [pc, #300]	; (80034b0 <HAL_RCC_ClockConfig+0x188>)
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	4b4a      	ldr	r3, [pc, #296]	; (80034b0 <HAL_RCC_ClockConfig+0x188>)
 8003388:	21e0      	movs	r1, #224	; 0xe0
 800338a:	00c9      	lsls	r1, r1, #3
 800338c:	430a      	orrs	r2, r1
 800338e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003390:	4b47      	ldr	r3, [pc, #284]	; (80034b0 <HAL_RCC_ClockConfig+0x188>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	22f0      	movs	r2, #240	; 0xf0
 8003396:	4393      	bics	r3, r2
 8003398:	0019      	movs	r1, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	689a      	ldr	r2, [r3, #8]
 800339e:	4b44      	ldr	r3, [pc, #272]	; (80034b0 <HAL_RCC_ClockConfig+0x188>)
 80033a0:	430a      	orrs	r2, r1
 80033a2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2201      	movs	r2, #1
 80033aa:	4013      	ands	r3, r2
 80033ac:	d040      	beq.n	8003430 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d107      	bne.n	80033c6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b6:	4b3e      	ldr	r3, [pc, #248]	; (80034b0 <HAL_RCC_ClockConfig+0x188>)
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	2380      	movs	r3, #128	; 0x80
 80033bc:	029b      	lsls	r3, r3, #10
 80033be:	4013      	ands	r3, r2
 80033c0:	d114      	bne.n	80033ec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e06e      	b.n	80034a4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d107      	bne.n	80033de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ce:	4b38      	ldr	r3, [pc, #224]	; (80034b0 <HAL_RCC_ClockConfig+0x188>)
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	2380      	movs	r3, #128	; 0x80
 80033d4:	049b      	lsls	r3, r3, #18
 80033d6:	4013      	ands	r3, r2
 80033d8:	d108      	bne.n	80033ec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e062      	b.n	80034a4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033de:	4b34      	ldr	r3, [pc, #208]	; (80034b0 <HAL_RCC_ClockConfig+0x188>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2202      	movs	r2, #2
 80033e4:	4013      	ands	r3, r2
 80033e6:	d101      	bne.n	80033ec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e05b      	b.n	80034a4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033ec:	4b30      	ldr	r3, [pc, #192]	; (80034b0 <HAL_RCC_ClockConfig+0x188>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	2203      	movs	r2, #3
 80033f2:	4393      	bics	r3, r2
 80033f4:	0019      	movs	r1, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	4b2d      	ldr	r3, [pc, #180]	; (80034b0 <HAL_RCC_ClockConfig+0x188>)
 80033fc:	430a      	orrs	r2, r1
 80033fe:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003400:	f7fe fdae 	bl	8001f60 <HAL_GetTick>
 8003404:	0003      	movs	r3, r0
 8003406:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003408:	e009      	b.n	800341e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800340a:	f7fe fda9 	bl	8001f60 <HAL_GetTick>
 800340e:	0002      	movs	r2, r0
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	4a27      	ldr	r2, [pc, #156]	; (80034b4 <HAL_RCC_ClockConfig+0x18c>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d901      	bls.n	800341e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e042      	b.n	80034a4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800341e:	4b24      	ldr	r3, [pc, #144]	; (80034b0 <HAL_RCC_ClockConfig+0x188>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	220c      	movs	r2, #12
 8003424:	401a      	ands	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	429a      	cmp	r2, r3
 800342e:	d1ec      	bne.n	800340a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003430:	4b1e      	ldr	r3, [pc, #120]	; (80034ac <HAL_RCC_ClockConfig+0x184>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2201      	movs	r2, #1
 8003436:	4013      	ands	r3, r2
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	429a      	cmp	r2, r3
 800343c:	d211      	bcs.n	8003462 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800343e:	4b1b      	ldr	r3, [pc, #108]	; (80034ac <HAL_RCC_ClockConfig+0x184>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2201      	movs	r2, #1
 8003444:	4393      	bics	r3, r2
 8003446:	0019      	movs	r1, r3
 8003448:	4b18      	ldr	r3, [pc, #96]	; (80034ac <HAL_RCC_ClockConfig+0x184>)
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	430a      	orrs	r2, r1
 800344e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003450:	4b16      	ldr	r3, [pc, #88]	; (80034ac <HAL_RCC_ClockConfig+0x184>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2201      	movs	r2, #1
 8003456:	4013      	ands	r3, r2
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	429a      	cmp	r2, r3
 800345c:	d001      	beq.n	8003462 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e020      	b.n	80034a4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2204      	movs	r2, #4
 8003468:	4013      	ands	r3, r2
 800346a:	d009      	beq.n	8003480 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800346c:	4b10      	ldr	r3, [pc, #64]	; (80034b0 <HAL_RCC_ClockConfig+0x188>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	4a11      	ldr	r2, [pc, #68]	; (80034b8 <HAL_RCC_ClockConfig+0x190>)
 8003472:	4013      	ands	r3, r2
 8003474:	0019      	movs	r1, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68da      	ldr	r2, [r3, #12]
 800347a:	4b0d      	ldr	r3, [pc, #52]	; (80034b0 <HAL_RCC_ClockConfig+0x188>)
 800347c:	430a      	orrs	r2, r1
 800347e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003480:	f000 f820 	bl	80034c4 <HAL_RCC_GetSysClockFreq>
 8003484:	0001      	movs	r1, r0
 8003486:	4b0a      	ldr	r3, [pc, #40]	; (80034b0 <HAL_RCC_ClockConfig+0x188>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	091b      	lsrs	r3, r3, #4
 800348c:	220f      	movs	r2, #15
 800348e:	4013      	ands	r3, r2
 8003490:	4a0a      	ldr	r2, [pc, #40]	; (80034bc <HAL_RCC_ClockConfig+0x194>)
 8003492:	5cd3      	ldrb	r3, [r2, r3]
 8003494:	000a      	movs	r2, r1
 8003496:	40da      	lsrs	r2, r3
 8003498:	4b09      	ldr	r3, [pc, #36]	; (80034c0 <HAL_RCC_ClockConfig+0x198>)
 800349a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800349c:	2003      	movs	r0, #3
 800349e:	f7fe fd19 	bl	8001ed4 <HAL_InitTick>
  
  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	0018      	movs	r0, r3
 80034a6:	46bd      	mov	sp, r7
 80034a8:	b004      	add	sp, #16
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	40022000 	.word	0x40022000
 80034b0:	40021000 	.word	0x40021000
 80034b4:	00001388 	.word	0x00001388
 80034b8:	fffff8ff 	.word	0xfffff8ff
 80034bc:	080036e0 	.word	0x080036e0
 80034c0:	20000000 	.word	0x20000000

080034c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034ca:	2300      	movs	r3, #0
 80034cc:	60fb      	str	r3, [r7, #12]
 80034ce:	2300      	movs	r3, #0
 80034d0:	60bb      	str	r3, [r7, #8]
 80034d2:	2300      	movs	r3, #0
 80034d4:	617b      	str	r3, [r7, #20]
 80034d6:	2300      	movs	r3, #0
 80034d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80034da:	2300      	movs	r3, #0
 80034dc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80034de:	4b20      	ldr	r3, [pc, #128]	; (8003560 <HAL_RCC_GetSysClockFreq+0x9c>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	220c      	movs	r2, #12
 80034e8:	4013      	ands	r3, r2
 80034ea:	2b04      	cmp	r3, #4
 80034ec:	d002      	beq.n	80034f4 <HAL_RCC_GetSysClockFreq+0x30>
 80034ee:	2b08      	cmp	r3, #8
 80034f0:	d003      	beq.n	80034fa <HAL_RCC_GetSysClockFreq+0x36>
 80034f2:	e02c      	b.n	800354e <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034f4:	4b1b      	ldr	r3, [pc, #108]	; (8003564 <HAL_RCC_GetSysClockFreq+0xa0>)
 80034f6:	613b      	str	r3, [r7, #16]
      break;
 80034f8:	e02c      	b.n	8003554 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	0c9b      	lsrs	r3, r3, #18
 80034fe:	220f      	movs	r2, #15
 8003500:	4013      	ands	r3, r2
 8003502:	4a19      	ldr	r2, [pc, #100]	; (8003568 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003504:	5cd3      	ldrb	r3, [r2, r3]
 8003506:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003508:	4b15      	ldr	r3, [pc, #84]	; (8003560 <HAL_RCC_GetSysClockFreq+0x9c>)
 800350a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350c:	220f      	movs	r2, #15
 800350e:	4013      	ands	r3, r2
 8003510:	4a16      	ldr	r2, [pc, #88]	; (800356c <HAL_RCC_GetSysClockFreq+0xa8>)
 8003512:	5cd3      	ldrb	r3, [r2, r3]
 8003514:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	2380      	movs	r3, #128	; 0x80
 800351a:	025b      	lsls	r3, r3, #9
 800351c:	4013      	ands	r3, r2
 800351e:	d009      	beq.n	8003534 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003520:	68b9      	ldr	r1, [r7, #8]
 8003522:	4810      	ldr	r0, [pc, #64]	; (8003564 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003524:	f7fc fdf0 	bl	8000108 <__udivsi3>
 8003528:	0003      	movs	r3, r0
 800352a:	001a      	movs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4353      	muls	r3, r2
 8003530:	617b      	str	r3, [r7, #20]
 8003532:	e009      	b.n	8003548 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	000a      	movs	r2, r1
 8003538:	0152      	lsls	r2, r2, #5
 800353a:	1a52      	subs	r2, r2, r1
 800353c:	0193      	lsls	r3, r2, #6
 800353e:	1a9b      	subs	r3, r3, r2
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	185b      	adds	r3, r3, r1
 8003544:	021b      	lsls	r3, r3, #8
 8003546:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	613b      	str	r3, [r7, #16]
      break;
 800354c:	e002      	b.n	8003554 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800354e:	4b05      	ldr	r3, [pc, #20]	; (8003564 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003550:	613b      	str	r3, [r7, #16]
      break;
 8003552:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003554:	693b      	ldr	r3, [r7, #16]
}
 8003556:	0018      	movs	r0, r3
 8003558:	46bd      	mov	sp, r7
 800355a:	b006      	add	sp, #24
 800355c:	bd80      	pop	{r7, pc}
 800355e:	46c0      	nop			; (mov r8, r8)
 8003560:	40021000 	.word	0x40021000
 8003564:	007a1200 	.word	0x007a1200
 8003568:	080036f0 	.word	0x080036f0
 800356c:	08003700 	.word	0x08003700

08003570 <__libc_init_array>:
 8003570:	b570      	push	{r4, r5, r6, lr}
 8003572:	2600      	movs	r6, #0
 8003574:	4d0c      	ldr	r5, [pc, #48]	; (80035a8 <__libc_init_array+0x38>)
 8003576:	4c0d      	ldr	r4, [pc, #52]	; (80035ac <__libc_init_array+0x3c>)
 8003578:	1b64      	subs	r4, r4, r5
 800357a:	10a4      	asrs	r4, r4, #2
 800357c:	42a6      	cmp	r6, r4
 800357e:	d109      	bne.n	8003594 <__libc_init_array+0x24>
 8003580:	2600      	movs	r6, #0
 8003582:	f000 f821 	bl	80035c8 <_init>
 8003586:	4d0a      	ldr	r5, [pc, #40]	; (80035b0 <__libc_init_array+0x40>)
 8003588:	4c0a      	ldr	r4, [pc, #40]	; (80035b4 <__libc_init_array+0x44>)
 800358a:	1b64      	subs	r4, r4, r5
 800358c:	10a4      	asrs	r4, r4, #2
 800358e:	42a6      	cmp	r6, r4
 8003590:	d105      	bne.n	800359e <__libc_init_array+0x2e>
 8003592:	bd70      	pop	{r4, r5, r6, pc}
 8003594:	00b3      	lsls	r3, r6, #2
 8003596:	58eb      	ldr	r3, [r5, r3]
 8003598:	4798      	blx	r3
 800359a:	3601      	adds	r6, #1
 800359c:	e7ee      	b.n	800357c <__libc_init_array+0xc>
 800359e:	00b3      	lsls	r3, r6, #2
 80035a0:	58eb      	ldr	r3, [r5, r3]
 80035a2:	4798      	blx	r3
 80035a4:	3601      	adds	r6, #1
 80035a6:	e7f2      	b.n	800358e <__libc_init_array+0x1e>
 80035a8:	08003710 	.word	0x08003710
 80035ac:	08003710 	.word	0x08003710
 80035b0:	08003710 	.word	0x08003710
 80035b4:	08003714 	.word	0x08003714

080035b8 <memset>:
 80035b8:	0003      	movs	r3, r0
 80035ba:	1882      	adds	r2, r0, r2
 80035bc:	4293      	cmp	r3, r2
 80035be:	d100      	bne.n	80035c2 <memset+0xa>
 80035c0:	4770      	bx	lr
 80035c2:	7019      	strb	r1, [r3, #0]
 80035c4:	3301      	adds	r3, #1
 80035c6:	e7f9      	b.n	80035bc <memset+0x4>

080035c8 <_init>:
 80035c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ca:	46c0      	nop			; (mov r8, r8)
 80035cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ce:	bc08      	pop	{r3}
 80035d0:	469e      	mov	lr, r3
 80035d2:	4770      	bx	lr

080035d4 <_fini>:
 80035d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035d6:	46c0      	nop			; (mov r8, r8)
 80035d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035da:	bc08      	pop	{r3}
 80035dc:	469e      	mov	lr, r3
 80035de:	4770      	bx	lr
